
HAND_ARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004728  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080047e4  080047e4  000147e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048c0  080048c0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080048c0  080048c0  000148c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048c8  080048c8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048c8  080048c8  000148c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048cc  080048cc  000148cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080048d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000010  080048e0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  080048e0  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c96  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ad  00000000  00000000  00030cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00032d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d50  00000000  00000000  00033b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e55  00000000  00000000  000348c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103de  00000000  00000000  0004c715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d097  00000000  00000000  0005caf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f9b8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032bc  00000000  00000000  000f9bdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080047cc 	.word	0x080047cc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	080047cc 	.word	0x080047cc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fde0 	bl	80011e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f844 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 fa08 	bl	8000a3c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062c:	f000 f9b8 	bl	80009a0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000630:	f000 f89c 	bl	800076c <MX_TIM3_Init>
  MX_TIM15_Init();
 8000634:	f000 f8f0 	bl	8000818 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  // Start INTERRUPCION DEL TIMER3
  HAL_TIM_Base_Start_IT(&htim3);
 8000638:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <main+0x8c>)
 800063a:	0018      	movs	r0, r3
 800063c:	f002 f818 	bl	8002670 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  ESTADO_SIGUIENTE = FUN_ESTADO_INICIO();
 8000640:	f000 fae2 	bl	8000c08 <FUN_ESTADO_INICIO>
 8000644:	0003      	movs	r3, r0
 8000646:	001a      	movs	r2, r3
 8000648:	4b18      	ldr	r3, [pc, #96]	; (80006ac <main+0x90>)
 800064a:	701a      	strb	r2, [r3, #0]

	  for(;;)
	  {
	    if(ESTADO_SIGUIENTE==ESTADO_ABIERTO)
 800064c:	4b17      	ldr	r3, [pc, #92]	; (80006ac <main+0x90>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d106      	bne.n	8000662 <main+0x46>
	    {
	      ESTADO_SIGUIENTE=FUN_ESTADO_ABIERTO();
 8000654:	f000 fb50 	bl	8000cf8 <FUN_ESTADO_ABIERTO>
 8000658:	0003      	movs	r3, r0
 800065a:	001a      	movs	r2, r3
 800065c:	4b13      	ldr	r3, [pc, #76]	; (80006ac <main+0x90>)
 800065e:	701a      	strb	r2, [r3, #0]
 8000660:	e7f4      	b.n	800064c <main+0x30>
	    }
	    else if(ESTADO_SIGUIENTE==ESTADO_SEMICERRADO)
 8000662:	4b12      	ldr	r3, [pc, #72]	; (80006ac <main+0x90>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b02      	cmp	r3, #2
 8000668:	d106      	bne.n	8000678 <main+0x5c>
	    {
	      ESTADO_SIGUIENTE=FUN_ESTADO_SEMICERRADO();
 800066a:	f000 fb7d 	bl	8000d68 <FUN_ESTADO_SEMICERRADO>
 800066e:	0003      	movs	r3, r0
 8000670:	001a      	movs	r2, r3
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <main+0x90>)
 8000674:	701a      	strb	r2, [r3, #0]
 8000676:	e7e9      	b.n	800064c <main+0x30>
	    }
	    else if(ESTADO_SIGUIENTE==ESTADO_CERRADO)
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <main+0x90>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b03      	cmp	r3, #3
 800067e:	d106      	bne.n	800068e <main+0x72>
	    {
	      ESTADO_SIGUIENTE=FUN_ESTADO_CERRADO();
 8000680:	f000 fbaa 	bl	8000dd8 <FUN_ESTADO_CERRADO>
 8000684:	0003      	movs	r3, r0
 8000686:	001a      	movs	r2, r3
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <main+0x90>)
 800068a:	701a      	strb	r2, [r3, #0]
 800068c:	e7de      	b.n	800064c <main+0x30>
	    }
	    else if(ESTADO_SIGUIENTE==ESTADO_INICIO)
 800068e:	4b07      	ldr	r3, [pc, #28]	; (80006ac <main+0x90>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d106      	bne.n	80006a4 <main+0x88>
	    {
	      ESTADO_SIGUIENTE=FUN_ESTADO_INICIO();
 8000696:	f000 fab7 	bl	8000c08 <FUN_ESTADO_INICIO>
 800069a:	0003      	movs	r3, r0
 800069c:	001a      	movs	r2, r3
 800069e:	4b03      	ldr	r3, [pc, #12]	; (80006ac <main+0x90>)
 80006a0:	701a      	strb	r2, [r3, #0]
	    if(ESTADO_SIGUIENTE==ESTADO_ABIERTO)
 80006a2:	e7d3      	b.n	800064c <main+0x30>
	    }
	    else {break;}
 80006a4:	46c0      	nop			; (mov r8, r8)
	  ESTADO_SIGUIENTE = FUN_ESTADO_INICIO();
 80006a6:	e7cb      	b.n	8000640 <main+0x24>
 80006a8:	20000030 	.word	0x20000030
 80006ac:	2000002c 	.word	0x2000002c

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b093      	sub	sp, #76	; 0x4c
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	2410      	movs	r4, #16
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	0018      	movs	r0, r3
 80006bc:	2338      	movs	r3, #56	; 0x38
 80006be:	001a      	movs	r2, r3
 80006c0:	2100      	movs	r1, #0
 80006c2:	f004 f87b 	bl	80047bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c6:	003b      	movs	r3, r7
 80006c8:	0018      	movs	r0, r3
 80006ca:	2310      	movs	r3, #16
 80006cc:	001a      	movs	r2, r3
 80006ce:	2100      	movs	r1, #0
 80006d0:	f004 f874 	bl	80047bc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d4:	2380      	movs	r3, #128	; 0x80
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	0018      	movs	r0, r3
 80006da:	f001 f8a9 	bl	8001830 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	2202      	movs	r2, #2
 80006e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2280      	movs	r2, #128	; 0x80
 80006e8:	0052      	lsls	r2, r2, #1
 80006ea:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006ec:	0021      	movs	r1, r4
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2240      	movs	r2, #64	; 0x40
 80006f8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2202      	movs	r2, #2
 80006fe:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2202      	movs	r2, #2
 8000704:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2200      	movs	r2, #0
 800070a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2208      	movs	r2, #8
 8000710:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2280      	movs	r2, #128	; 0x80
 8000716:	0292      	lsls	r2, r2, #10
 8000718:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2280      	movs	r2, #128	; 0x80
 800071e:	0492      	lsls	r2, r2, #18
 8000720:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2280      	movs	r2, #128	; 0x80
 8000726:	0592      	lsls	r2, r2, #22
 8000728:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072a:	187b      	adds	r3, r7, r1
 800072c:	0018      	movs	r0, r3
 800072e:	f001 f8cb 	bl	80018c8 <HAL_RCC_OscConfig>
 8000732:	1e03      	subs	r3, r0, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000736:	f000 fbe5 	bl	8000f04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073a:	003b      	movs	r3, r7
 800073c:	2207      	movs	r2, #7
 800073e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000740:	003b      	movs	r3, r7
 8000742:	2202      	movs	r2, #2
 8000744:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000746:	003b      	movs	r3, r7
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074c:	003b      	movs	r3, r7
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000752:	003b      	movs	r3, r7
 8000754:	2102      	movs	r1, #2
 8000756:	0018      	movs	r0, r3
 8000758:	f001 fbd0 	bl	8001efc <HAL_RCC_ClockConfig>
 800075c:	1e03      	subs	r3, r0, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000760:	f000 fbd0 	bl	8000f04 <Error_Handler>
  }
}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	b013      	add	sp, #76	; 0x4c
 800076a:	bd90      	pop	{r4, r7, pc}

0800076c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000772:	2310      	movs	r3, #16
 8000774:	18fb      	adds	r3, r7, r3
 8000776:	0018      	movs	r0, r3
 8000778:	2310      	movs	r3, #16
 800077a:	001a      	movs	r2, r3
 800077c:	2100      	movs	r1, #0
 800077e:	f004 f81d 	bl	80047bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	0018      	movs	r0, r3
 8000786:	230c      	movs	r3, #12
 8000788:	001a      	movs	r2, r3
 800078a:	2100      	movs	r1, #0
 800078c:	f004 f816 	bl	80047bc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000790:	4b1e      	ldr	r3, [pc, #120]	; (800080c <MX_TIM3_Init+0xa0>)
 8000792:	4a1f      	ldr	r2, [pc, #124]	; (8000810 <MX_TIM3_Init+0xa4>)
 8000794:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 8000796:	4b1d      	ldr	r3, [pc, #116]	; (800080c <MX_TIM3_Init+0xa0>)
 8000798:	221f      	movs	r2, #31
 800079a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079c:	4b1b      	ldr	r3, [pc, #108]	; (800080c <MX_TIM3_Init+0xa0>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80007a2:	4b1a      	ldr	r3, [pc, #104]	; (800080c <MX_TIM3_Init+0xa0>)
 80007a4:	4a1b      	ldr	r2, [pc, #108]	; (8000814 <MX_TIM3_Init+0xa8>)
 80007a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a8:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_TIM3_Init+0xa0>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_TIM3_Init+0xa0>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007b4:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_TIM3_Init+0xa0>)
 80007b6:	0018      	movs	r0, r3
 80007b8:	f001 ff02 	bl	80025c0 <HAL_TIM_Base_Init>
 80007bc:	1e03      	subs	r3, r0, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80007c0:	f000 fba0 	bl	8000f04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c4:	2110      	movs	r1, #16
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	2280      	movs	r2, #128	; 0x80
 80007ca:	0152      	lsls	r2, r2, #5
 80007cc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007ce:	187a      	adds	r2, r7, r1
 80007d0:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_TIM3_Init+0xa0>)
 80007d2:	0011      	movs	r1, r2
 80007d4:	0018      	movs	r0, r3
 80007d6:	f002 fbaf 	bl	8002f38 <HAL_TIM_ConfigClockSource>
 80007da:	1e03      	subs	r3, r0, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80007de:	f000 fb91 	bl	8000f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007ee:	1d3a      	adds	r2, r7, #4
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_TIM3_Init+0xa0>)
 80007f2:	0011      	movs	r1, r2
 80007f4:	0018      	movs	r0, r3
 80007f6:	f003 f899 	bl	800392c <HAL_TIMEx_MasterConfigSynchronization>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80007fe:	f000 fb81 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	b008      	add	sp, #32
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	20000030 	.word	0x20000030
 8000810:	40000400 	.word	0x40000400
 8000814:	0000270f 	.word	0x0000270f

08000818 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b09c      	sub	sp, #112	; 0x70
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081e:	2360      	movs	r3, #96	; 0x60
 8000820:	18fb      	adds	r3, r7, r3
 8000822:	0018      	movs	r0, r3
 8000824:	2310      	movs	r3, #16
 8000826:	001a      	movs	r2, r3
 8000828:	2100      	movs	r1, #0
 800082a:	f003 ffc7 	bl	80047bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082e:	2354      	movs	r3, #84	; 0x54
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	0018      	movs	r0, r3
 8000834:	230c      	movs	r3, #12
 8000836:	001a      	movs	r2, r3
 8000838:	2100      	movs	r1, #0
 800083a:	f003 ffbf 	bl	80047bc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800083e:	2338      	movs	r3, #56	; 0x38
 8000840:	18fb      	adds	r3, r7, r3
 8000842:	0018      	movs	r0, r3
 8000844:	231c      	movs	r3, #28
 8000846:	001a      	movs	r2, r3
 8000848:	2100      	movs	r1, #0
 800084a:	f003 ffb7 	bl	80047bc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	0018      	movs	r0, r3
 8000852:	2334      	movs	r3, #52	; 0x34
 8000854:	001a      	movs	r2, r3
 8000856:	2100      	movs	r1, #0
 8000858:	f003 ffb0 	bl	80047bc <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800085c:	4b4d      	ldr	r3, [pc, #308]	; (8000994 <MX_TIM15_Init+0x17c>)
 800085e:	4a4e      	ldr	r2, [pc, #312]	; (8000998 <MX_TIM15_Init+0x180>)
 8000860:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 64-1;
 8000862:	4b4c      	ldr	r3, [pc, #304]	; (8000994 <MX_TIM15_Init+0x17c>)
 8000864:	223f      	movs	r2, #63	; 0x3f
 8000866:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000868:	4b4a      	ldr	r3, [pc, #296]	; (8000994 <MX_TIM15_Init+0x17c>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 800086e:	4b49      	ldr	r3, [pc, #292]	; (8000994 <MX_TIM15_Init+0x17c>)
 8000870:	4a4a      	ldr	r2, [pc, #296]	; (800099c <MX_TIM15_Init+0x184>)
 8000872:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000874:	4b47      	ldr	r3, [pc, #284]	; (8000994 <MX_TIM15_Init+0x17c>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800087a:	4b46      	ldr	r3, [pc, #280]	; (8000994 <MX_TIM15_Init+0x17c>)
 800087c:	2200      	movs	r2, #0
 800087e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000880:	4b44      	ldr	r3, [pc, #272]	; (8000994 <MX_TIM15_Init+0x17c>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000886:	4b43      	ldr	r3, [pc, #268]	; (8000994 <MX_TIM15_Init+0x17c>)
 8000888:	0018      	movs	r0, r3
 800088a:	f001 fe99 	bl	80025c0 <HAL_TIM_Base_Init>
 800088e:	1e03      	subs	r3, r0, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8000892:	f000 fb37 	bl	8000f04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000896:	2160      	movs	r1, #96	; 0x60
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2280      	movs	r2, #128	; 0x80
 800089c:	0152      	lsls	r2, r2, #5
 800089e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80008a0:	187a      	adds	r2, r7, r1
 80008a2:	4b3c      	ldr	r3, [pc, #240]	; (8000994 <MX_TIM15_Init+0x17c>)
 80008a4:	0011      	movs	r1, r2
 80008a6:	0018      	movs	r0, r3
 80008a8:	f002 fb46 	bl	8002f38 <HAL_TIM_ConfigClockSource>
 80008ac:	1e03      	subs	r3, r0, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 80008b0:	f000 fb28 	bl	8000f04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80008b4:	4b37      	ldr	r3, [pc, #220]	; (8000994 <MX_TIM15_Init+0x17c>)
 80008b6:	0018      	movs	r0, r3
 80008b8:	f001 ff36 	bl	8002728 <HAL_TIM_PWM_Init>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 80008c0:	f000 fb20 	bl	8000f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c4:	2154      	movs	r1, #84	; 0x54
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80008d2:	187a      	adds	r2, r7, r1
 80008d4:	4b2f      	ldr	r3, [pc, #188]	; (8000994 <MX_TIM15_Init+0x17c>)
 80008d6:	0011      	movs	r1, r2
 80008d8:	0018      	movs	r0, r3
 80008da:	f003 f827 	bl	800392c <HAL_TIMEx_MasterConfigSynchronization>
 80008de:	1e03      	subs	r3, r0, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 80008e2:	f000 fb0f 	bl	8000f04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008e6:	2138      	movs	r1, #56	; 0x38
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2260      	movs	r2, #96	; 0x60
 80008ec:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	22fa      	movs	r2, #250	; 0xfa
 80008f2:	0052      	lsls	r2, r2, #1
 80008f4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000902:	187b      	adds	r3, r7, r1
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2200      	movs	r2, #0
 800090c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000914:	1879      	adds	r1, r7, r1
 8000916:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <MX_TIM15_Init+0x17c>)
 8000918:	2200      	movs	r2, #0
 800091a:	0018      	movs	r0, r3
 800091c:	f002 fa0c 	bl	8002d38 <HAL_TIM_PWM_ConfigChannel>
 8000920:	1e03      	subs	r3, r0, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM15_Init+0x110>
  {
    Error_Handler();
 8000924:	f000 faee 	bl	8000f04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000928:	2338      	movs	r3, #56	; 0x38
 800092a:	18f9      	adds	r1, r7, r3
 800092c:	4b19      	ldr	r3, [pc, #100]	; (8000994 <MX_TIM15_Init+0x17c>)
 800092e:	2204      	movs	r2, #4
 8000930:	0018      	movs	r0, r3
 8000932:	f002 fa01 	bl	8002d38 <HAL_TIM_PWM_ConfigChannel>
 8000936:	1e03      	subs	r3, r0, #0
 8000938:	d001      	beq.n	800093e <MX_TIM15_Init+0x126>
  {
    Error_Handler();
 800093a:	f000 fae3 	bl	8000f04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2200      	movs	r2, #0
 8000948:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	0192      	lsls	r2, r2, #6
 8000962:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2200      	movs	r2, #0
 800096e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000970:	1d3a      	adds	r2, r7, #4
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <MX_TIM15_Init+0x17c>)
 8000974:	0011      	movs	r1, r2
 8000976:	0018      	movs	r0, r3
 8000978:	f003 f846 	bl	8003a08 <HAL_TIMEx_ConfigBreakDeadTime>
 800097c:	1e03      	subs	r3, r0, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM15_Init+0x16c>
  {
    Error_Handler();
 8000980:	f000 fac0 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <MX_TIM15_Init+0x17c>)
 8000986:	0018      	movs	r0, r3
 8000988:	f000 fb3a 	bl	8001000 <HAL_TIM_MspPostInit>

}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	b01c      	add	sp, #112	; 0x70
 8000992:	bd80      	pop	{r7, pc}
 8000994:	2000007c 	.word	0x2000007c
 8000998:	40014000 	.word	0x40014000
 800099c:	00004e1f 	.word	0x00004e1f

080009a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009a4:	4b23      	ldr	r3, [pc, #140]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009a6:	4a24      	ldr	r2, [pc, #144]	; (8000a38 <MX_USART2_UART_Init+0x98>)
 80009a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009aa:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009ac:	22e1      	movs	r2, #225	; 0xe1
 80009ae:	0252      	lsls	r2, r2, #9
 80009b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b20      	ldr	r3, [pc, #128]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009be:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d0:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d6:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009de:	2200      	movs	r2, #0
 80009e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e2:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009ea:	0018      	movs	r0, r3
 80009ec:	f003 f8ca 	bl	8003b84 <HAL_UART_Init>
 80009f0:	1e03      	subs	r3, r0, #0
 80009f2:	d001      	beq.n	80009f8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009f4:	f000 fa86 	bl	8000f04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f8:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009fa:	2100      	movs	r1, #0
 80009fc:	0018      	movs	r0, r3
 80009fe:	f003 fdd9 	bl	80045b4 <HAL_UARTEx_SetTxFifoThreshold>
 8000a02:	1e03      	subs	r3, r0, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a06:	f000 fa7d 	bl	8000f04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f003 fe10 	bl	8004634 <HAL_UARTEx_SetRxFifoThreshold>
 8000a14:	1e03      	subs	r3, r0, #0
 8000a16:	d001      	beq.n	8000a1c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a18:	f000 fa74 	bl	8000f04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f003 fd8e 	bl	8004540 <HAL_UARTEx_DisableFifoMode>
 8000a24:	1e03      	subs	r3, r0, #0
 8000a26:	d001      	beq.n	8000a2c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a28:	f000 fa6c 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	200000c8 	.word	0x200000c8
 8000a38:	40004400 	.word	0x40004400

08000a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b089      	sub	sp, #36	; 0x24
 8000a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	240c      	movs	r4, #12
 8000a44:	193b      	adds	r3, r7, r4
 8000a46:	0018      	movs	r0, r3
 8000a48:	2314      	movs	r3, #20
 8000a4a:	001a      	movs	r2, r3
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	f003 feb5 	bl	80047bc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	4b29      	ldr	r3, [pc, #164]	; (8000af8 <MX_GPIO_Init+0xbc>)
 8000a54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a56:	4b28      	ldr	r3, [pc, #160]	; (8000af8 <MX_GPIO_Init+0xbc>)
 8000a58:	2104      	movs	r1, #4
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a5e:	4b26      	ldr	r3, [pc, #152]	; (8000af8 <MX_GPIO_Init+0xbc>)
 8000a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a62:	2204      	movs	r2, #4
 8000a64:	4013      	ands	r3, r2
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a6a:	4b23      	ldr	r3, [pc, #140]	; (8000af8 <MX_GPIO_Init+0xbc>)
 8000a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a6e:	4b22      	ldr	r3, [pc, #136]	; (8000af8 <MX_GPIO_Init+0xbc>)
 8000a70:	2120      	movs	r1, #32
 8000a72:	430a      	orrs	r2, r1
 8000a74:	635a      	str	r2, [r3, #52]	; 0x34
 8000a76:	4b20      	ldr	r3, [pc, #128]	; (8000af8 <MX_GPIO_Init+0xbc>)
 8000a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a7a:	2220      	movs	r2, #32
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <MX_GPIO_Init+0xbc>)
 8000a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <MX_GPIO_Init+0xbc>)
 8000a88:	2101      	movs	r1, #1
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <MX_GPIO_Init+0xbc>)
 8000a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a92:	2201      	movs	r2, #1
 8000a94:	4013      	ands	r3, r2
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000a9a:	23a0      	movs	r3, #160	; 0xa0
 8000a9c:	05db      	lsls	r3, r3, #23
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2123      	movs	r1, #35	; 0x23
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f000 fea7 	bl	80017f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 LED_GREEN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LED_GREEN_Pin;
 8000aa8:	193b      	adds	r3, r7, r4
 8000aaa:	2223      	movs	r2, #35	; 0x23
 8000aac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	193b      	adds	r3, r7, r4
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	193b      	adds	r3, r7, r4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aba:	193b      	adds	r3, r7, r4
 8000abc:	2202      	movs	r2, #2
 8000abe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac0:	193a      	adds	r2, r7, r4
 8000ac2:	23a0      	movs	r3, #160	; 0xa0
 8000ac4:	05db      	lsls	r3, r3, #23
 8000ac6:	0011      	movs	r1, r2
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f000 fd13 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ace:	193b      	adds	r3, r7, r4
 8000ad0:	2210      	movs	r2, #16
 8000ad2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad4:	193b      	adds	r3, r7, r4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	193b      	adds	r3, r7, r4
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae0:	193a      	adds	r2, r7, r4
 8000ae2:	23a0      	movs	r3, #160	; 0xa0
 8000ae4:	05db      	lsls	r3, r3, #23
 8000ae6:	0011      	movs	r1, r2
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f000 fd03 	bl	80014f4 <HAL_GPIO_Init>

}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b009      	add	sp, #36	; 0x24
 8000af4:	bd90      	pop	{r4, r7, pc}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	40021000 	.word	0x40021000

08000afc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	//ESTA INTERRUPCION ENTRA CADA 0.01s
	  if (htim == &htim3)
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	4b39      	ldr	r3, [pc, #228]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d16b      	bne.n	8000be4 <HAL_TIM_PeriodElapsedCallback+0xe8>
	  static unsigned int Cont_Button_unactive = 0; //Hace el conteo para el filtro en el flanco bajo
	  static uint8_t Pulso=0;	//Lo que hace es avisar que tuvo un pulso alto para pasar al siguiente pulso
	  static uint8_t CAMBIO=0;	//ES USADO PARA SUMAR
	  static uint8_t WAIT=0;	//ES USADO PARA ESPERAR EL SEGUNDO PULSO

	  	if (HAL_GPIO_ReadPin(GPIOA,BUTTON_IN)==0)
 8000b0c:	23a0      	movs	r3, #160	; 0xa0
 8000b0e:	05db      	lsls	r3, r3, #23
 8000b10:	2110      	movs	r1, #16
 8000b12:	0018      	movs	r0, r3
 8000b14:	f000 fe52 	bl	80017bc <HAL_GPIO_ReadPin>
 8000b18:	1e03      	subs	r3, r0, #0
 8000b1a:	d118      	bne.n	8000b4e <HAL_TIM_PeriodElapsedCallback+0x52>
	    {
	    /* Entrara aqui cuando se precione el push button
	     * El contador comenzara a contar, cuando pase el tiempo de HUMBRAL_TIME
	     * se considerara al push button como activo, cuando se deje de pulsar
	     * el contador se reiniciara*/
	    	SENAL_STATE=0;
 8000b1c:	4b34      	ldr	r3, [pc, #208]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
	    	Cont_Button_active++;
 8000b22:	4b34      	ldr	r3, [pc, #208]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	1c5a      	adds	r2, r3, #1
 8000b28:	4b32      	ldr	r3, [pc, #200]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000b2a:	601a      	str	r2, [r3, #0]
	    	if(Cont_Button_active >= HUMBRAL_TIME)
 8000b2c:	4b31      	ldr	r3, [pc, #196]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b1b      	cmp	r3, #27
 8000b32:	d932      	bls.n	8000b9a <HAL_TIM_PeriodElapsedCallback+0x9e>
	    	{
	    		//DETECTA EL FLANCO ALTO
					Pulso=HIGH;
 8000b34:	4b30      	ldr	r3, [pc, #192]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	701a      	strb	r2, [r3, #0]
					WAIT=0;
 8000b3a:	4b30      	ldr	r3, [pc, #192]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
					Cont_Button_active = 0;
 8000b40:	4b2c      	ldr	r3, [pc, #176]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
					Cont_Button_unactive=0;
 8000b46:	4b2e      	ldr	r3, [pc, #184]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	e025      	b.n	8000b9a <HAL_TIM_PeriodElapsedCallback+0x9e>
				}
	    	}else if(Pulso==HIGH)
 8000b4e:	4b2a      	ldr	r3, [pc, #168]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d121      	bne.n	8000b9a <HAL_TIM_PeriodElapsedCallback+0x9e>
	    	{
	    	    /* Cuando dejo de pulsar el push button, entro aqui
	    	     * Se resetea el contador en alto y comienza a contar el contador en bajo
	    	     * y se vuelve en un FLANCO BAJO*/
	    				WAIT=0;
 8000b56:	4b29      	ldr	r3, [pc, #164]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
	    				Cont_Button_active = 0;
 8000b5c:	4b25      	ldr	r3, [pc, #148]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
	    	    		Cont_Button_unactive++;
 8000b62:	4b27      	ldr	r3, [pc, #156]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	1c5a      	adds	r2, r3, #1
 8000b68:	4b25      	ldr	r3, [pc, #148]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000b6a:	601a      	str	r2, [r3, #0]

	    	    		if(Cont_Button_unactive>60)
 8000b6c:	4b24      	ldr	r3, [pc, #144]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b3c      	cmp	r3, #60	; 0x3c
 8000b72:	d912      	bls.n	8000b9a <HAL_TIM_PeriodElapsedCallback+0x9e>
	    				{
	    	    /* CUANDO EL FLANCO BAJO ES MAYOR A 80 o 0.8s,
	    	     * el valor de CAMBIO aumenta*/
	    	    			CAMBIO++;
 8000b74:	4b23      	ldr	r3, [pc, #140]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	4b21      	ldr	r3, [pc, #132]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000b7e:	701a      	strb	r2, [r3, #0]
	    					Pulso=LOW;
 8000b80:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
	    					Cont_Button_unactive=0;
 8000b86:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]

	    					if(CAMBIO>=2){// ES POR SI HAY OTRA PULSACION, Y EVITANDO UN ERROR DE REBOTE
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d902      	bls.n	8000b9a <HAL_TIM_PeriodElapsedCallback+0x9e>
	    						CAMBIO=2;
 8000b94:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000b96:	2202      	movs	r2, #2
 8000b98:	701a      	strb	r2, [r3, #0]
	    				}

	    	}

//----------------------------Contador de pulsos-----------------------------------------//
	  		  if(CAMBIO==1)
 8000b9a:	4b1a      	ldr	r3, [pc, #104]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d113      	bne.n	8000bca <HAL_TIM_PeriodElapsedCallback+0xce>
	  		  {
	  			//ES UN TIEMPO DE ESPERA PARA EL SIGUIENTE PULSO
				  WAIT++;
 8000ba2:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000bac:	701a      	strb	r2, [r3, #0]
				  if(WAIT>250)
 8000bae:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2bfa      	cmp	r3, #250	; 0xfa
 8000bb4:	d916      	bls.n	8000be4 <HAL_TIM_PeriodElapsedCallback+0xe8>
				  {
					SENAL_STATE=1;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	701a      	strb	r2, [r3, #0]
					WAIT=0;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
					CAMBIO=0;
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
				  CAMBIO=0;
	  		  }
	    }


}
 8000bc8:	e00c      	b.n	8000be4 <HAL_TIM_PeriodElapsedCallback+0xe8>
	  		  } else if (CAMBIO==2)
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	d108      	bne.n	8000be4 <HAL_TIM_PeriodElapsedCallback+0xe8>
				  SENAL_STATE=2;
 8000bd2:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	701a      	strb	r2, [r3, #0]
				  WAIT=0;
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
				  CAMBIO=0;
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
}
 8000be4:	46c0      	nop			; (mov r8, r8)
 8000be6:	46bd      	mov	sp, r7
 8000be8:	b002      	add	sp, #8
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000030 	.word	0x20000030
 8000bf0:	2000002f 	.word	0x2000002f
 8000bf4:	2000015c 	.word	0x2000015c
 8000bf8:	20000160 	.word	0x20000160
 8000bfc:	20000161 	.word	0x20000161
 8000c00:	20000164 	.word	0x20000164
 8000c04:	20000168 	.word	0x20000168

08000c08 <FUN_ESTADO_INICIO>:

//----------------------------------------Maquina de estado---------------------------------------------------//
uint8_t FUN_ESTADO_INICIO (void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
   ESTADO_ANTERIOR=ESTADO_ACTUAL;
 8000c0c:	4b37      	ldr	r3, [pc, #220]	; (8000cec <FUN_ESTADO_INICIO+0xe4>)
 8000c0e:	781a      	ldrb	r2, [r3, #0]
 8000c10:	4b37      	ldr	r3, [pc, #220]	; (8000cf0 <FUN_ESTADO_INICIO+0xe8>)
 8000c12:	701a      	strb	r2, [r3, #0]
   ESTADO_ACTUAL=ESTADO_INICIO;
 8000c14:	4b35      	ldr	r3, [pc, #212]	; (8000cec <FUN_ESTADO_INICIO+0xe4>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]
//rutina de inicio completada

   for(;;)
   {
      //Prueba de leds
	    HAL_GPIO_WritePin(GPIOA,BLUE_LED,LOW);
 8000c1a:	23a0      	movs	r3, #160	; 0xa0
 8000c1c:	05db      	lsls	r3, r3, #23
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2102      	movs	r1, #2
 8000c22:	0018      	movs	r0, r3
 8000c24:	f000 fde7 	bl	80017f6 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA,RED_LED,LOW);
 8000c28:	23a0      	movs	r3, #160	; 0xa0
 8000c2a:	05db      	lsls	r3, r3, #23
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2101      	movs	r1, #1
 8000c30:	0018      	movs	r0, r3
 8000c32:	f000 fde0 	bl	80017f6 <HAL_GPIO_WritePin>
        HAL_Delay(500);
 8000c36:	23fa      	movs	r3, #250	; 0xfa
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f000 fb58 	bl	80012f0 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOA,BLUE_LED,HIGH);
 8000c40:	23a0      	movs	r3, #160	; 0xa0
 8000c42:	05db      	lsls	r3, r3, #23
 8000c44:	2201      	movs	r2, #1
 8000c46:	2102      	movs	r1, #2
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f000 fdd4 	bl	80017f6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA,RED_LED,LOW);
 8000c4e:	23a0      	movs	r3, #160	; 0xa0
 8000c50:	05db      	lsls	r3, r3, #23
 8000c52:	2200      	movs	r2, #0
 8000c54:	2101      	movs	r1, #1
 8000c56:	0018      	movs	r0, r3
 8000c58:	f000 fdcd 	bl	80017f6 <HAL_GPIO_WritePin>
        HAL_Delay(500);
 8000c5c:	23fa      	movs	r3, #250	; 0xfa
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	0018      	movs	r0, r3
 8000c62:	f000 fb45 	bl	80012f0 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOA,BLUE_LED,LOW);
 8000c66:	23a0      	movs	r3, #160	; 0xa0
 8000c68:	05db      	lsls	r3, r3, #23
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f000 fdc1 	bl	80017f6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA,RED_LED,HIGH);
 8000c74:	23a0      	movs	r3, #160	; 0xa0
 8000c76:	05db      	lsls	r3, r3, #23
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f000 fdba 	bl	80017f6 <HAL_GPIO_WritePin>
        HAL_Delay(500);
 8000c82:	23fa      	movs	r3, #250	; 0xfa
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	0018      	movs	r0, r3
 8000c88:	f000 fb32 	bl	80012f0 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOA,BLUE_LED,HIGH);
 8000c8c:	23a0      	movs	r3, #160	; 0xa0
 8000c8e:	05db      	lsls	r3, r3, #23
 8000c90:	2201      	movs	r2, #1
 8000c92:	2102      	movs	r1, #2
 8000c94:	0018      	movs	r0, r3
 8000c96:	f000 fdae 	bl	80017f6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA,RED_LED,HIGH);
 8000c9a:	23a0      	movs	r3, #160	; 0xa0
 8000c9c:	05db      	lsls	r3, r3, #23
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f000 fda7 	bl	80017f6 <HAL_GPIO_WritePin>
        HAL_Delay(500);
 8000ca8:	23fa      	movs	r3, #250	; 0xfa
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	0018      	movs	r0, r3
 8000cae:	f000 fb1f 	bl	80012f0 <HAL_Delay>

     //Prueba de servos
	   // ESTADO ABIERTO
			  SERVOS(1,0);
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f000 f8c7 	bl	8000e48 <SERVOS>
	   // ESTADO SEMI_CERRADO
			  SERVOS(0,0);
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f000 f8c3 	bl	8000e48 <SERVOS>
	   // ESTADO CERRADO
			  SERVOS(0,1);
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f000 f8bf 	bl	8000e48 <SERVOS>
	   // APUNTAR
			  SERVOS(1,1);
 8000cca:	2101      	movs	r1, #1
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f000 f8bb 	bl	8000e48 <SERVOS>

    if(INICIO_STATE==TRUE)
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <FUN_ESTADO_INICIO+0xec>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d101      	bne.n	8000cde <FUN_ESTADO_INICIO+0xd6>
    {
      return ESTADO_ABIERTO;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e003      	b.n	8000ce6 <FUN_ESTADO_INICIO+0xde>
    }

    HAL_Delay(1);
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f000 fb06 	bl	80012f0 <HAL_Delay>
	    HAL_GPIO_WritePin(GPIOA,BLUE_LED,LOW);
 8000ce4:	e799      	b.n	8000c1a <FUN_ESTADO_INICIO+0x12>

   }
}
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	2000002d 	.word	0x2000002d
 8000cf0:	2000002e 	.word	0x2000002e
 8000cf4:	20000000 	.word	0x20000000

08000cf8 <FUN_ESTADO_ABIERTO>:

uint8_t FUN_ESTADO_ABIERTO (void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
   ESTADO_ANTERIOR=ESTADO_ACTUAL;
 8000cfc:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <FUN_ESTADO_ABIERTO+0x64>)
 8000cfe:	781a      	ldrb	r2, [r3, #0]
 8000d00:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <FUN_ESTADO_ABIERTO+0x68>)
 8000d02:	701a      	strb	r2, [r3, #0]
   ESTADO_ACTUAL=ESTADO_ABIERTO;
 8000d04:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <FUN_ESTADO_ABIERTO+0x64>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	701a      	strb	r2, [r3, #0]

   SENAL_STATE=0;//Evita que cambie de estado
 8000d0a:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <FUN_ESTADO_ABIERTO+0x6c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]

   //LEDS DE ESTADO
   HAL_GPIO_WritePin(GPIOA,BLUE_LED,LOW);
 8000d10:	23a0      	movs	r3, #160	; 0xa0
 8000d12:	05db      	lsls	r3, r3, #23
 8000d14:	2200      	movs	r2, #0
 8000d16:	2102      	movs	r1, #2
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f000 fd6c 	bl	80017f6 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOA,RED_LED,LOW);
 8000d1e:	23a0      	movs	r3, #160	; 0xa0
 8000d20:	05db      	lsls	r3, r3, #23
 8000d22:	2200      	movs	r2, #0
 8000d24:	2101      	movs	r1, #1
 8000d26:	0018      	movs	r0, r3
 8000d28:	f000 fd65 	bl	80017f6 <HAL_GPIO_WritePin>

   SERVOS(1,0);
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f000 f88a 	bl	8000e48 <SERVOS>

for(;;){
    //retorno a semicerrado
     if(SENAL_STATE==1)
 8000d34:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <FUN_ESTADO_ABIERTO+0x6c>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d101      	bne.n	8000d40 <FUN_ESTADO_ABIERTO+0x48>
     {
      return ESTADO_SEMICERRADO;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	e009      	b.n	8000d54 <FUN_ESTADO_ABIERTO+0x5c>
     }
     //retorno cerrado
     if(SENAL_STATE==2)
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <FUN_ESTADO_ABIERTO+0x6c>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d101      	bne.n	8000d4c <FUN_ESTADO_ABIERTO+0x54>
     {
      return ESTADO_CERRADO;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	e003      	b.n	8000d54 <FUN_ESTADO_ABIERTO+0x5c>
     }
     HAL_Delay(1);
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f000 facf 	bl	80012f0 <HAL_Delay>
     if(SENAL_STATE==1)
 8000d52:	e7ef      	b.n	8000d34 <FUN_ESTADO_ABIERTO+0x3c>
  }
}
 8000d54:	0018      	movs	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	2000002d 	.word	0x2000002d
 8000d60:	2000002e 	.word	0x2000002e
 8000d64:	2000002f 	.word	0x2000002f

08000d68 <FUN_ESTADO_SEMICERRADO>:

uint8_t FUN_ESTADO_SEMICERRADO (void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
   ESTADO_ANTERIOR=ESTADO_ACTUAL;
 8000d6c:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <FUN_ESTADO_SEMICERRADO+0x64>)
 8000d6e:	781a      	ldrb	r2, [r3, #0]
 8000d70:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <FUN_ESTADO_SEMICERRADO+0x68>)
 8000d72:	701a      	strb	r2, [r3, #0]
   ESTADO_ACTUAL=ESTADO_SEMICERRADO;
 8000d74:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <FUN_ESTADO_SEMICERRADO+0x64>)
 8000d76:	2202      	movs	r2, #2
 8000d78:	701a      	strb	r2, [r3, #0]

   SENAL_STATE=0;//Evita que cambie de estado
 8000d7a:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <FUN_ESTADO_SEMICERRADO+0x6c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]

   //LEDS DE ESTADO
   HAL_GPIO_WritePin(GPIOA,BLUE_LED,LOW);
 8000d80:	23a0      	movs	r3, #160	; 0xa0
 8000d82:	05db      	lsls	r3, r3, #23
 8000d84:	2200      	movs	r2, #0
 8000d86:	2102      	movs	r1, #2
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f000 fd34 	bl	80017f6 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOA,RED_LED,HIGH);
 8000d8e:	23a0      	movs	r3, #160	; 0xa0
 8000d90:	05db      	lsls	r3, r3, #23
 8000d92:	2201      	movs	r2, #1
 8000d94:	2101      	movs	r1, #1
 8000d96:	0018      	movs	r0, r3
 8000d98:	f000 fd2d 	bl	80017f6 <HAL_GPIO_WritePin>

   SERVOS(0,0);
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	2000      	movs	r0, #0
 8000da0:	f000 f852 	bl	8000e48 <SERVOS>

for(;;){
//cierre
    //retorno a ABIERTO
     if(SENAL_STATE==1)
 8000da4:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <FUN_ESTADO_SEMICERRADO+0x6c>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d101      	bne.n	8000db0 <FUN_ESTADO_SEMICERRADO+0x48>
     {
      return ESTADO_ABIERTO;
 8000dac:	2301      	movs	r3, #1
 8000dae:	e009      	b.n	8000dc4 <FUN_ESTADO_SEMICERRADO+0x5c>
     }
     //retorno cerrado
     if(SENAL_STATE==2)
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <FUN_ESTADO_SEMICERRADO+0x6c>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d101      	bne.n	8000dbc <FUN_ESTADO_SEMICERRADO+0x54>
     {
      return ESTADO_CERRADO;
 8000db8:	2303      	movs	r3, #3
 8000dba:	e003      	b.n	8000dc4 <FUN_ESTADO_SEMICERRADO+0x5c>
     }
     HAL_Delay(1);
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	f000 fa97 	bl	80012f0 <HAL_Delay>
     if(SENAL_STATE==1)
 8000dc2:	e7ef      	b.n	8000da4 <FUN_ESTADO_SEMICERRADO+0x3c>
   }
}
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	2000002d 	.word	0x2000002d
 8000dd0:	2000002e 	.word	0x2000002e
 8000dd4:	2000002f 	.word	0x2000002f

08000dd8 <FUN_ESTADO_CERRADO>:

uint8_t FUN_ESTADO_CERRADO (void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
   ESTADO_ANTERIOR=ESTADO_ACTUAL;
 8000ddc:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <FUN_ESTADO_CERRADO+0x64>)
 8000dde:	781a      	ldrb	r2, [r3, #0]
 8000de0:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <FUN_ESTADO_CERRADO+0x68>)
 8000de2:	701a      	strb	r2, [r3, #0]
   ESTADO_ACTUAL=ESTADO_CERRADO;
 8000de4:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <FUN_ESTADO_CERRADO+0x64>)
 8000de6:	2203      	movs	r2, #3
 8000de8:	701a      	strb	r2, [r3, #0]

   SENAL_STATE=0;//Evita que cambie de estado
 8000dea:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <FUN_ESTADO_CERRADO+0x6c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	701a      	strb	r2, [r3, #0]

   //LEDS DE ESTADO
   HAL_GPIO_WritePin(GPIOA,BLUE_LED,HIGH);
 8000df0:	23a0      	movs	r3, #160	; 0xa0
 8000df2:	05db      	lsls	r3, r3, #23
 8000df4:	2201      	movs	r2, #1
 8000df6:	2102      	movs	r1, #2
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f000 fcfc 	bl	80017f6 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOA,RED_LED,LOW);
 8000dfe:	23a0      	movs	r3, #160	; 0xa0
 8000e00:	05db      	lsls	r3, r3, #23
 8000e02:	2200      	movs	r2, #0
 8000e04:	2101      	movs	r1, #1
 8000e06:	0018      	movs	r0, r3
 8000e08:	f000 fcf5 	bl	80017f6 <HAL_GPIO_WritePin>

   SERVOS(0,1);
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f000 f81a 	bl	8000e48 <SERVOS>

for(;;){

    //retorno a ABIERTO
     if(SENAL_STATE==1)
 8000e14:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <FUN_ESTADO_CERRADO+0x6c>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d101      	bne.n	8000e20 <FUN_ESTADO_CERRADO+0x48>
     {
      return ESTADO_ABIERTO;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e009      	b.n	8000e34 <FUN_ESTADO_CERRADO+0x5c>
     }
     //retorno a SEMICERRADO
     if(SENAL_STATE==2)
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <FUN_ESTADO_CERRADO+0x6c>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d101      	bne.n	8000e2c <FUN_ESTADO_CERRADO+0x54>
     {
      return ESTADO_SEMICERRADO;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	e003      	b.n	8000e34 <FUN_ESTADO_CERRADO+0x5c>
     }
     HAL_Delay(1);
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f000 fa5f 	bl	80012f0 <HAL_Delay>
     if(SENAL_STATE==1)
 8000e32:	e7ef      	b.n	8000e14 <FUN_ESTADO_CERRADO+0x3c>
  }
}
 8000e34:	0018      	movs	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	2000002d 	.word	0x2000002d
 8000e40:	2000002e 	.word	0x2000002e
 8000e44:	2000002f 	.word	0x2000002f

08000e48 <SERVOS>:
 * ESTADO CERRADO = SERVOS(0,1);
 * APUNTAR = SERVOS(1,1);
 *
 * */
void SERVOS(uint8_t servo1, uint8_t servo2)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	0002      	movs	r2, r0
 8000e50:	1dfb      	adds	r3, r7, #7
 8000e52:	701a      	strb	r2, [r3, #0]
 8000e54:	1dbb      	adds	r3, r7, #6
 8000e56:	1c0a      	adds	r2, r1, #0
 8000e58:	701a      	strb	r2, [r3, #0]
	//ACTIVAR EL PWM
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000e5a:	4b28      	ldr	r3, [pc, #160]	; (8000efc <SERVOS+0xb4>)
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f001 fcc2 	bl	80027e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000e64:	4b25      	ldr	r3, [pc, #148]	; (8000efc <SERVOS+0xb4>)
 8000e66:	2104      	movs	r1, #4
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f001 fcbd 	bl	80027e8 <HAL_TIM_PWM_Start>

	//Servo1
		if(servo1==1)
 8000e6e:	1dfb      	adds	r3, r7, #7
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d109      	bne.n	8000e8a <SERVOS+0x42>
		{
			//0 a 180
			htim15.Instance->CCR1 = 2500;// 180 grados
 8000e76:	4b21      	ldr	r3, [pc, #132]	; (8000efc <SERVOS+0xb4>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a21      	ldr	r2, [pc, #132]	; (8000f00 <SERVOS+0xb8>)
 8000e7c:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(1000);
 8000e7e:	23fa      	movs	r3, #250	; 0xfa
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	0018      	movs	r0, r3
 8000e84:	f000 fa34 	bl	80012f0 <HAL_Delay>
 8000e88:	e00d      	b.n	8000ea6 <SERVOS+0x5e>

		} else if(servo1==0)
 8000e8a:	1dfb      	adds	r3, r7, #7
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d109      	bne.n	8000ea6 <SERVOS+0x5e>
		{
			//180 a 0
			htim15.Instance->CCR1 = 500;// 0 grados
 8000e92:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <SERVOS+0xb4>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	22fa      	movs	r2, #250	; 0xfa
 8000e98:	0052      	lsls	r2, r2, #1
 8000e9a:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(1000);
 8000e9c:	23fa      	movs	r3, #250	; 0xfa
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f000 fa25 	bl	80012f0 <HAL_Delay>
		}

	//Servo2
		if(servo2==1)
 8000ea6:	1dbb      	adds	r3, r7, #6
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d109      	bne.n	8000ec2 <SERVOS+0x7a>
		{
			//0 a 180
			htim15.Instance->CCR2 = 2500;// 180 GRADOS
 8000eae:	4b13      	ldr	r3, [pc, #76]	; (8000efc <SERVOS+0xb4>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a13      	ldr	r2, [pc, #76]	; (8000f00 <SERVOS+0xb8>)
 8000eb4:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(1000);
 8000eb6:	23fa      	movs	r3, #250	; 0xfa
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f000 fa18 	bl	80012f0 <HAL_Delay>
 8000ec0:	e00d      	b.n	8000ede <SERVOS+0x96>

		} else if(servo2==0)
 8000ec2:	1dbb      	adds	r3, r7, #6
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d109      	bne.n	8000ede <SERVOS+0x96>
		{
			//180 a 0
			htim15.Instance->CCR2 = 500;// 0 GRADOS
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <SERVOS+0xb4>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	22fa      	movs	r2, #250	; 0xfa
 8000ed0:	0052      	lsls	r2, r2, #1
 8000ed2:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(1000);
 8000ed4:	23fa      	movs	r3, #250	; 0xfa
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f000 fa09 	bl	80012f0 <HAL_Delay>
		}

	   //DESACTIVA EL PWM
	   HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 8000ede:	4b07      	ldr	r3, [pc, #28]	; (8000efc <SERVOS+0xb4>)
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f001 fd6a 	bl	80029bc <HAL_TIM_PWM_Stop>
	   HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <SERVOS+0xb4>)
 8000eea:	2104      	movs	r1, #4
 8000eec:	0018      	movs	r0, r3
 8000eee:	f001 fd65 	bl	80029bc <HAL_TIM_PWM_Stop>
}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	b002      	add	sp, #8
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	2000007c 	.word	0x2000007c
 8000f00:	000009c4 	.word	0x000009c4

08000f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f08:	b672      	cpsid	i
}
 8000f0a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <Error_Handler+0x8>
	...

08000f10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <HAL_MspInit+0x44>)
 8000f18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <HAL_MspInit+0x44>)
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	641a      	str	r2, [r3, #64]	; 0x40
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <HAL_MspInit+0x44>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	2201      	movs	r2, #1
 8000f28:	4013      	ands	r3, r2
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <HAL_MspInit+0x44>)
 8000f30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <HAL_MspInit+0x44>)
 8000f34:	2180      	movs	r1, #128	; 0x80
 8000f36:	0549      	lsls	r1, r1, #21
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <HAL_MspInit+0x44>)
 8000f3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	055b      	lsls	r3, r3, #21
 8000f44:	4013      	ands	r3, r2
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b002      	add	sp, #8
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	40021000 	.word	0x40021000

08000f58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b092      	sub	sp, #72	; 0x48
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f60:	2314      	movs	r3, #20
 8000f62:	18fb      	adds	r3, r7, r3
 8000f64:	0018      	movs	r0, r3
 8000f66:	2334      	movs	r3, #52	; 0x34
 8000f68:	001a      	movs	r2, r3
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	f003 fc26 	bl	80047bc <memset>
  if(htim_base->Instance==TIM3)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a1f      	ldr	r2, [pc, #124]	; (8000ff4 <HAL_TIM_Base_MspInit+0x9c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d114      	bne.n	8000fa4 <HAL_TIM_Base_MspInit+0x4c>
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f7a:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <HAL_TIM_Base_MspInit+0xa0>)
 8000f7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ff8 <HAL_TIM_Base_MspInit+0xa0>)
 8000f80:	2102      	movs	r1, #2
 8000f82:	430a      	orrs	r2, r1
 8000f84:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f86:	4b1c      	ldr	r3, [pc, #112]	; (8000ff8 <HAL_TIM_Base_MspInit+0xa0>)
 8000f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	2010      	movs	r0, #16
 8000f98:	f000 fa7a 	bl	8001490 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f9c:	2010      	movs	r0, #16
 8000f9e:	f000 fa8c 	bl	80014ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000fa2:	e022      	b.n	8000fea <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM15)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a14      	ldr	r2, [pc, #80]	; (8000ffc <HAL_TIM_Base_MspInit+0xa4>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d11d      	bne.n	8000fea <HAL_TIM_Base_MspInit+0x92>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM15;
 8000fae:	2114      	movs	r1, #20
 8000fb0:	187b      	adds	r3, r7, r1
 8000fb2:	2280      	movs	r2, #128	; 0x80
 8000fb4:	03d2      	lsls	r2, r2, #15
 8000fb6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLKSOURCE_PCLK1;
 8000fb8:	187b      	adds	r3, r7, r1
 8000fba:	2200      	movs	r2, #0
 8000fbc:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fbe:	187b      	adds	r3, r7, r1
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f001 f945 	bl	8002250 <HAL_RCCEx_PeriphCLKConfig>
 8000fc6:	1e03      	subs	r3, r0, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_TIM_Base_MspInit+0x76>
      Error_Handler();
 8000fca:	f7ff ff9b 	bl	8000f04 <Error_Handler>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <HAL_TIM_Base_MspInit+0xa0>)
 8000fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <HAL_TIM_Base_MspInit+0xa0>)
 8000fd4:	2180      	movs	r1, #128	; 0x80
 8000fd6:	0249      	lsls	r1, r1, #9
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	641a      	str	r2, [r3, #64]	; 0x40
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_TIM_Base_MspInit+0xa0>)
 8000fde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fe0:	2380      	movs	r3, #128	; 0x80
 8000fe2:	025b      	lsls	r3, r3, #9
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	46bd      	mov	sp, r7
 8000fee:	b012      	add	sp, #72	; 0x48
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	40000400 	.word	0x40000400
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40014000 	.word	0x40014000

08001000 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001000:	b590      	push	{r4, r7, lr}
 8001002:	b089      	sub	sp, #36	; 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	240c      	movs	r4, #12
 800100a:	193b      	adds	r3, r7, r4
 800100c:	0018      	movs	r0, r3
 800100e:	2314      	movs	r3, #20
 8001010:	001a      	movs	r2, r3
 8001012:	2100      	movs	r1, #0
 8001014:	f003 fbd2 	bl	80047bc <memset>
  if(htim->Instance==TIM15)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a14      	ldr	r2, [pc, #80]	; (8001070 <HAL_TIM_MspPostInit+0x70>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d121      	bne.n	8001066 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001022:	4b14      	ldr	r3, [pc, #80]	; (8001074 <HAL_TIM_MspPostInit+0x74>)
 8001024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001026:	4b13      	ldr	r3, [pc, #76]	; (8001074 <HAL_TIM_MspPostInit+0x74>)
 8001028:	2104      	movs	r1, #4
 800102a:	430a      	orrs	r2, r1
 800102c:	635a      	str	r2, [r3, #52]	; 0x34
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <HAL_TIM_MspPostInit+0x74>)
 8001030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001032:	2204      	movs	r2, #4
 8001034:	4013      	ands	r3, r2
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PC1     ------> TIM15_CH1
    PC2     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800103a:	0021      	movs	r1, r4
 800103c:	187b      	adds	r3, r7, r1
 800103e:	2206      	movs	r2, #6
 8001040:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	187b      	adds	r3, r7, r1
 8001044:	2202      	movs	r2, #2
 8001046:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	187b      	adds	r3, r7, r1
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	187b      	adds	r3, r7, r1
 8001050:	2200      	movs	r2, #0
 8001052:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM15;
 8001054:	187b      	adds	r3, r7, r1
 8001056:	2202      	movs	r2, #2
 8001058:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800105a:	187b      	adds	r3, r7, r1
 800105c:	4a06      	ldr	r2, [pc, #24]	; (8001078 <HAL_TIM_MspPostInit+0x78>)
 800105e:	0019      	movs	r1, r3
 8001060:	0010      	movs	r0, r2
 8001062:	f000 fa47 	bl	80014f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	46bd      	mov	sp, r7
 800106a:	b009      	add	sp, #36	; 0x24
 800106c:	bd90      	pop	{r4, r7, pc}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	40014000 	.word	0x40014000
 8001074:	40021000 	.word	0x40021000
 8001078:	50000800 	.word	0x50000800

0800107c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b097      	sub	sp, #92	; 0x5c
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	2344      	movs	r3, #68	; 0x44
 8001086:	18fb      	adds	r3, r7, r3
 8001088:	0018      	movs	r0, r3
 800108a:	2314      	movs	r3, #20
 800108c:	001a      	movs	r2, r3
 800108e:	2100      	movs	r1, #0
 8001090:	f003 fb94 	bl	80047bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001094:	2410      	movs	r4, #16
 8001096:	193b      	adds	r3, r7, r4
 8001098:	0018      	movs	r0, r3
 800109a:	2334      	movs	r3, #52	; 0x34
 800109c:	001a      	movs	r2, r3
 800109e:	2100      	movs	r1, #0
 80010a0:	f003 fb8c 	bl	80047bc <memset>
  if(huart->Instance==USART2)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a22      	ldr	r2, [pc, #136]	; (8001134 <HAL_UART_MspInit+0xb8>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d13e      	bne.n	800112c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010ae:	193b      	adds	r3, r7, r4
 80010b0:	2202      	movs	r2, #2
 80010b2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010b4:	193b      	adds	r3, r7, r4
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ba:	193b      	adds	r3, r7, r4
 80010bc:	0018      	movs	r0, r3
 80010be:	f001 f8c7 	bl	8002250 <HAL_RCCEx_PeriphCLKConfig>
 80010c2:	1e03      	subs	r3, r0, #0
 80010c4:	d001      	beq.n	80010ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010c6:	f7ff ff1d 	bl	8000f04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010ca:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <HAL_UART_MspInit+0xbc>)
 80010cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010ce:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <HAL_UART_MspInit+0xbc>)
 80010d0:	2180      	movs	r1, #128	; 0x80
 80010d2:	0289      	lsls	r1, r1, #10
 80010d4:	430a      	orrs	r2, r1
 80010d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <HAL_UART_MspInit+0xbc>)
 80010da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	029b      	lsls	r3, r3, #10
 80010e0:	4013      	ands	r3, r2
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	4b14      	ldr	r3, [pc, #80]	; (8001138 <HAL_UART_MspInit+0xbc>)
 80010e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <HAL_UART_MspInit+0xbc>)
 80010ec:	2101      	movs	r1, #1
 80010ee:	430a      	orrs	r2, r1
 80010f0:	635a      	str	r2, [r3, #52]	; 0x34
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <HAL_UART_MspInit+0xbc>)
 80010f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f6:	2201      	movs	r2, #1
 80010f8:	4013      	ands	r3, r2
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80010fe:	2144      	movs	r1, #68	; 0x44
 8001100:	187b      	adds	r3, r7, r1
 8001102:	220c      	movs	r2, #12
 8001104:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	187b      	adds	r3, r7, r1
 8001108:	2202      	movs	r2, #2
 800110a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800110c:	187b      	adds	r3, r7, r1
 800110e:	2201      	movs	r2, #1
 8001110:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	187b      	adds	r3, r7, r1
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001118:	187b      	adds	r3, r7, r1
 800111a:	2201      	movs	r2, #1
 800111c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111e:	187a      	adds	r2, r7, r1
 8001120:	23a0      	movs	r3, #160	; 0xa0
 8001122:	05db      	lsls	r3, r3, #23
 8001124:	0011      	movs	r1, r2
 8001126:	0018      	movs	r0, r3
 8001128:	f000 f9e4 	bl	80014f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800112c:	46c0      	nop			; (mov r8, r8)
 800112e:	46bd      	mov	sp, r7
 8001130:	b017      	add	sp, #92	; 0x5c
 8001132:	bd90      	pop	{r4, r7, pc}
 8001134:	40004400 	.word	0x40004400
 8001138:	40021000 	.word	0x40021000

0800113c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <NMI_Handler+0x4>

08001142 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001146:	e7fe      	b.n	8001146 <HardFault_Handler+0x4>

08001148 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800114c:	46c0      	nop			; (mov r8, r8)
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001160:	f000 f8aa 	bl	80012b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001164:	46c0      	nop			; (mov r8, r8)
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <TIM3_IRQHandler+0x14>)
 8001172:	0018      	movs	r0, r3
 8001174:	f001 fcae 	bl	8002ad4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001178:	46c0      	nop			; (mov r8, r8)
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	20000030 	.word	0x20000030

08001184 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001188:	46c0      	nop			; (mov r8, r8)
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001190:	480d      	ldr	r0, [pc, #52]	; (80011c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001192:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001194:	f7ff fff6 	bl	8001184 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001198:	480c      	ldr	r0, [pc, #48]	; (80011cc <LoopForever+0x6>)
  ldr r1, =_edata
 800119a:	490d      	ldr	r1, [pc, #52]	; (80011d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800119c:	4a0d      	ldr	r2, [pc, #52]	; (80011d4 <LoopForever+0xe>)
  movs r3, #0
 800119e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a0:	e002      	b.n	80011a8 <LoopCopyDataInit>

080011a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011a6:	3304      	adds	r3, #4

080011a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ac:	d3f9      	bcc.n	80011a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ae:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011b0:	4c0a      	ldr	r4, [pc, #40]	; (80011dc <LoopForever+0x16>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b4:	e001      	b.n	80011ba <LoopFillZerobss>

080011b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b8:	3204      	adds	r2, #4

080011ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011bc:	d3fb      	bcc.n	80011b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011be:	f003 fad9 	bl	8004774 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80011c2:	f7ff fa2b 	bl	800061c <main>

080011c6 <LoopForever>:

LoopForever:
  b LoopForever
 80011c6:	e7fe      	b.n	80011c6 <LoopForever>
  ldr   r0, =_estack
 80011c8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80011cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80011d4:	080048d0 	.word	0x080048d0
  ldr r2, =_sbss
 80011d8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80011dc:	20000170 	.word	0x20000170

080011e0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011e0:	e7fe      	b.n	80011e0 <ADC1_COMP_IRQHandler>
	...

080011e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011ea:	1dfb      	adds	r3, r7, #7
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f0:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <HAL_Init+0x3c>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <HAL_Init+0x3c>)
 80011f6:	2180      	movs	r1, #128	; 0x80
 80011f8:	0049      	lsls	r1, r1, #1
 80011fa:	430a      	orrs	r2, r1
 80011fc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011fe:	2000      	movs	r0, #0
 8001200:	f000 f810 	bl	8001224 <HAL_InitTick>
 8001204:	1e03      	subs	r3, r0, #0
 8001206:	d003      	beq.n	8001210 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001208:	1dfb      	adds	r3, r7, #7
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]
 800120e:	e001      	b.n	8001214 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001210:	f7ff fe7e 	bl	8000f10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001214:	1dfb      	adds	r3, r7, #7
 8001216:	781b      	ldrb	r3, [r3, #0]
}
 8001218:	0018      	movs	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	b002      	add	sp, #8
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40022000 	.word	0x40022000

08001224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001224:	b590      	push	{r4, r7, lr}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800122c:	230f      	movs	r3, #15
 800122e:	18fb      	adds	r3, r7, r3
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001234:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <HAL_InitTick+0x88>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d02b      	beq.n	8001294 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800123c:	4b1c      	ldr	r3, [pc, #112]	; (80012b0 <HAL_InitTick+0x8c>)
 800123e:	681c      	ldr	r4, [r3, #0]
 8001240:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <HAL_InitTick+0x88>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	0019      	movs	r1, r3
 8001246:	23fa      	movs	r3, #250	; 0xfa
 8001248:	0098      	lsls	r0, r3, #2
 800124a:	f7fe ff5b 	bl	8000104 <__udivsi3>
 800124e:	0003      	movs	r3, r0
 8001250:	0019      	movs	r1, r3
 8001252:	0020      	movs	r0, r4
 8001254:	f7fe ff56 	bl	8000104 <__udivsi3>
 8001258:	0003      	movs	r3, r0
 800125a:	0018      	movs	r0, r3
 800125c:	f000 f93d 	bl	80014da <HAL_SYSTICK_Config>
 8001260:	1e03      	subs	r3, r0, #0
 8001262:	d112      	bne.n	800128a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b03      	cmp	r3, #3
 8001268:	d80a      	bhi.n	8001280 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	2301      	movs	r3, #1
 800126e:	425b      	negs	r3, r3
 8001270:	2200      	movs	r2, #0
 8001272:	0018      	movs	r0, r3
 8001274:	f000 f90c 	bl	8001490 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001278:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <HAL_InitTick+0x90>)
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	e00d      	b.n	800129c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001280:	230f      	movs	r3, #15
 8001282:	18fb      	adds	r3, r7, r3
 8001284:	2201      	movs	r2, #1
 8001286:	701a      	strb	r2, [r3, #0]
 8001288:	e008      	b.n	800129c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800128a:	230f      	movs	r3, #15
 800128c:	18fb      	adds	r3, r7, r3
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]
 8001292:	e003      	b.n	800129c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001294:	230f      	movs	r3, #15
 8001296:	18fb      	adds	r3, r7, r3
 8001298:	2201      	movs	r2, #1
 800129a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800129c:	230f      	movs	r3, #15
 800129e:	18fb      	adds	r3, r7, r3
 80012a0:	781b      	ldrb	r3, [r3, #0]
}
 80012a2:	0018      	movs	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b005      	add	sp, #20
 80012a8:	bd90      	pop	{r4, r7, pc}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	2000000c 	.word	0x2000000c
 80012b0:	20000004 	.word	0x20000004
 80012b4:	20000008 	.word	0x20000008

080012b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <HAL_IncTick+0x1c>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	001a      	movs	r2, r3
 80012c2:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <HAL_IncTick+0x20>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	18d2      	adds	r2, r2, r3
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <HAL_IncTick+0x20>)
 80012ca:	601a      	str	r2, [r3, #0]
}
 80012cc:	46c0      	nop			; (mov r8, r8)
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	2000000c 	.word	0x2000000c
 80012d8:	2000016c 	.word	0x2000016c

080012dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  return uwTick;
 80012e0:	4b02      	ldr	r3, [pc, #8]	; (80012ec <HAL_GetTick+0x10>)
 80012e2:	681b      	ldr	r3, [r3, #0]
}
 80012e4:	0018      	movs	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	2000016c 	.word	0x2000016c

080012f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012f8:	f7ff fff0 	bl	80012dc <HAL_GetTick>
 80012fc:	0003      	movs	r3, r0
 80012fe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	3301      	adds	r3, #1
 8001308:	d005      	beq.n	8001316 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800130a:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <HAL_Delay+0x44>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	001a      	movs	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	189b      	adds	r3, r3, r2
 8001314:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	f7ff ffe0 	bl	80012dc <HAL_GetTick>
 800131c:	0002      	movs	r2, r0
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	429a      	cmp	r2, r3
 8001326:	d8f7      	bhi.n	8001318 <HAL_Delay+0x28>
  {
  }
}
 8001328:	46c0      	nop			; (mov r8, r8)
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	46bd      	mov	sp, r7
 800132e:	b004      	add	sp, #16
 8001330:	bd80      	pop	{r7, pc}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	2000000c 	.word	0x2000000c

08001338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	0002      	movs	r2, r0
 8001340:	1dfb      	adds	r3, r7, #7
 8001342:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001344:	1dfb      	adds	r3, r7, #7
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b7f      	cmp	r3, #127	; 0x7f
 800134a:	d809      	bhi.n	8001360 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134c:	1dfb      	adds	r3, r7, #7
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	001a      	movs	r2, r3
 8001352:	231f      	movs	r3, #31
 8001354:	401a      	ands	r2, r3
 8001356:	4b04      	ldr	r3, [pc, #16]	; (8001368 <__NVIC_EnableIRQ+0x30>)
 8001358:	2101      	movs	r1, #1
 800135a:	4091      	lsls	r1, r2
 800135c:	000a      	movs	r2, r1
 800135e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001360:	46c0      	nop			; (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	b002      	add	sp, #8
 8001366:	bd80      	pop	{r7, pc}
 8001368:	e000e100 	.word	0xe000e100

0800136c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	0002      	movs	r2, r0
 8001374:	6039      	str	r1, [r7, #0]
 8001376:	1dfb      	adds	r3, r7, #7
 8001378:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800137a:	1dfb      	adds	r3, r7, #7
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b7f      	cmp	r3, #127	; 0x7f
 8001380:	d828      	bhi.n	80013d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001382:	4a2f      	ldr	r2, [pc, #188]	; (8001440 <__NVIC_SetPriority+0xd4>)
 8001384:	1dfb      	adds	r3, r7, #7
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	b25b      	sxtb	r3, r3
 800138a:	089b      	lsrs	r3, r3, #2
 800138c:	33c0      	adds	r3, #192	; 0xc0
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	589b      	ldr	r3, [r3, r2]
 8001392:	1dfa      	adds	r2, r7, #7
 8001394:	7812      	ldrb	r2, [r2, #0]
 8001396:	0011      	movs	r1, r2
 8001398:	2203      	movs	r2, #3
 800139a:	400a      	ands	r2, r1
 800139c:	00d2      	lsls	r2, r2, #3
 800139e:	21ff      	movs	r1, #255	; 0xff
 80013a0:	4091      	lsls	r1, r2
 80013a2:	000a      	movs	r2, r1
 80013a4:	43d2      	mvns	r2, r2
 80013a6:	401a      	ands	r2, r3
 80013a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	019b      	lsls	r3, r3, #6
 80013ae:	22ff      	movs	r2, #255	; 0xff
 80013b0:	401a      	ands	r2, r3
 80013b2:	1dfb      	adds	r3, r7, #7
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	0018      	movs	r0, r3
 80013b8:	2303      	movs	r3, #3
 80013ba:	4003      	ands	r3, r0
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013c0:	481f      	ldr	r0, [pc, #124]	; (8001440 <__NVIC_SetPriority+0xd4>)
 80013c2:	1dfb      	adds	r3, r7, #7
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	b25b      	sxtb	r3, r3
 80013c8:	089b      	lsrs	r3, r3, #2
 80013ca:	430a      	orrs	r2, r1
 80013cc:	33c0      	adds	r3, #192	; 0xc0
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013d2:	e031      	b.n	8001438 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013d4:	4a1b      	ldr	r2, [pc, #108]	; (8001444 <__NVIC_SetPriority+0xd8>)
 80013d6:	1dfb      	adds	r3, r7, #7
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	0019      	movs	r1, r3
 80013dc:	230f      	movs	r3, #15
 80013de:	400b      	ands	r3, r1
 80013e0:	3b08      	subs	r3, #8
 80013e2:	089b      	lsrs	r3, r3, #2
 80013e4:	3306      	adds	r3, #6
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	18d3      	adds	r3, r2, r3
 80013ea:	3304      	adds	r3, #4
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	1dfa      	adds	r2, r7, #7
 80013f0:	7812      	ldrb	r2, [r2, #0]
 80013f2:	0011      	movs	r1, r2
 80013f4:	2203      	movs	r2, #3
 80013f6:	400a      	ands	r2, r1
 80013f8:	00d2      	lsls	r2, r2, #3
 80013fa:	21ff      	movs	r1, #255	; 0xff
 80013fc:	4091      	lsls	r1, r2
 80013fe:	000a      	movs	r2, r1
 8001400:	43d2      	mvns	r2, r2
 8001402:	401a      	ands	r2, r3
 8001404:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	019b      	lsls	r3, r3, #6
 800140a:	22ff      	movs	r2, #255	; 0xff
 800140c:	401a      	ands	r2, r3
 800140e:	1dfb      	adds	r3, r7, #7
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	0018      	movs	r0, r3
 8001414:	2303      	movs	r3, #3
 8001416:	4003      	ands	r3, r0
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800141c:	4809      	ldr	r0, [pc, #36]	; (8001444 <__NVIC_SetPriority+0xd8>)
 800141e:	1dfb      	adds	r3, r7, #7
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	001c      	movs	r4, r3
 8001424:	230f      	movs	r3, #15
 8001426:	4023      	ands	r3, r4
 8001428:	3b08      	subs	r3, #8
 800142a:	089b      	lsrs	r3, r3, #2
 800142c:	430a      	orrs	r2, r1
 800142e:	3306      	adds	r3, #6
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	18c3      	adds	r3, r0, r3
 8001434:	3304      	adds	r3, #4
 8001436:	601a      	str	r2, [r3, #0]
}
 8001438:	46c0      	nop			; (mov r8, r8)
 800143a:	46bd      	mov	sp, r7
 800143c:	b003      	add	sp, #12
 800143e:	bd90      	pop	{r4, r7, pc}
 8001440:	e000e100 	.word	0xe000e100
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	1e5a      	subs	r2, r3, #1
 8001454:	2380      	movs	r3, #128	; 0x80
 8001456:	045b      	lsls	r3, r3, #17
 8001458:	429a      	cmp	r2, r3
 800145a:	d301      	bcc.n	8001460 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145c:	2301      	movs	r3, #1
 800145e:	e010      	b.n	8001482 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001460:	4b0a      	ldr	r3, [pc, #40]	; (800148c <SysTick_Config+0x44>)
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	3a01      	subs	r2, #1
 8001466:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001468:	2301      	movs	r3, #1
 800146a:	425b      	negs	r3, r3
 800146c:	2103      	movs	r1, #3
 800146e:	0018      	movs	r0, r3
 8001470:	f7ff ff7c 	bl	800136c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <SysTick_Config+0x44>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147a:	4b04      	ldr	r3, [pc, #16]	; (800148c <SysTick_Config+0x44>)
 800147c:	2207      	movs	r2, #7
 800147e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001480:	2300      	movs	r3, #0
}
 8001482:	0018      	movs	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	b002      	add	sp, #8
 8001488:	bd80      	pop	{r7, pc}
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	e000e010 	.word	0xe000e010

08001490 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
 800149a:	210f      	movs	r1, #15
 800149c:	187b      	adds	r3, r7, r1
 800149e:	1c02      	adds	r2, r0, #0
 80014a0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	187b      	adds	r3, r7, r1
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	b25b      	sxtb	r3, r3
 80014aa:	0011      	movs	r1, r2
 80014ac:	0018      	movs	r0, r3
 80014ae:	f7ff ff5d 	bl	800136c <__NVIC_SetPriority>
}
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	46bd      	mov	sp, r7
 80014b6:	b004      	add	sp, #16
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	0002      	movs	r2, r0
 80014c2:	1dfb      	adds	r3, r7, #7
 80014c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c6:	1dfb      	adds	r3, r7, #7
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	b25b      	sxtb	r3, r3
 80014cc:	0018      	movs	r0, r3
 80014ce:	f7ff ff33 	bl	8001338 <__NVIC_EnableIRQ>
}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	46bd      	mov	sp, r7
 80014d6:	b002      	add	sp, #8
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	0018      	movs	r0, r3
 80014e6:	f7ff ffaf 	bl	8001448 <SysTick_Config>
 80014ea:	0003      	movs	r3, r0
}
 80014ec:	0018      	movs	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	b002      	add	sp, #8
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001502:	e147      	b.n	8001794 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2101      	movs	r1, #1
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	4091      	lsls	r1, r2
 800150e:	000a      	movs	r2, r1
 8001510:	4013      	ands	r3, r2
 8001512:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d100      	bne.n	800151c <HAL_GPIO_Init+0x28>
 800151a:	e138      	b.n	800178e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2203      	movs	r2, #3
 8001522:	4013      	ands	r3, r2
 8001524:	2b01      	cmp	r3, #1
 8001526:	d005      	beq.n	8001534 <HAL_GPIO_Init+0x40>
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2203      	movs	r2, #3
 800152e:	4013      	ands	r3, r2
 8001530:	2b02      	cmp	r3, #2
 8001532:	d130      	bne.n	8001596 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	2203      	movs	r2, #3
 8001540:	409a      	lsls	r2, r3
 8001542:	0013      	movs	r3, r2
 8001544:	43da      	mvns	r2, r3
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	409a      	lsls	r2, r3
 8001556:	0013      	movs	r3, r2
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4313      	orrs	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800156a:	2201      	movs	r2, #1
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	409a      	lsls	r2, r3
 8001570:	0013      	movs	r3, r2
 8001572:	43da      	mvns	r2, r3
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	4013      	ands	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	091b      	lsrs	r3, r3, #4
 8001580:	2201      	movs	r2, #1
 8001582:	401a      	ands	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	409a      	lsls	r2, r3
 8001588:	0013      	movs	r3, r2
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2203      	movs	r2, #3
 800159c:	4013      	ands	r3, r2
 800159e:	2b03      	cmp	r3, #3
 80015a0:	d017      	beq.n	80015d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	2203      	movs	r2, #3
 80015ae:	409a      	lsls	r2, r3
 80015b0:	0013      	movs	r3, r2
 80015b2:	43da      	mvns	r2, r3
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	409a      	lsls	r2, r3
 80015c4:	0013      	movs	r3, r2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2203      	movs	r2, #3
 80015d8:	4013      	ands	r3, r2
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d123      	bne.n	8001626 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	08da      	lsrs	r2, r3, #3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3208      	adds	r2, #8
 80015e6:	0092      	lsls	r2, r2, #2
 80015e8:	58d3      	ldr	r3, [r2, r3]
 80015ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	2207      	movs	r2, #7
 80015f0:	4013      	ands	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	220f      	movs	r2, #15
 80015f6:	409a      	lsls	r2, r3
 80015f8:	0013      	movs	r3, r2
 80015fa:	43da      	mvns	r2, r3
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	691a      	ldr	r2, [r3, #16]
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	2107      	movs	r1, #7
 800160a:	400b      	ands	r3, r1
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	409a      	lsls	r2, r3
 8001610:	0013      	movs	r3, r2
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	08da      	lsrs	r2, r3, #3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3208      	adds	r2, #8
 8001620:	0092      	lsls	r2, r2, #2
 8001622:	6939      	ldr	r1, [r7, #16]
 8001624:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	2203      	movs	r2, #3
 8001632:	409a      	lsls	r2, r3
 8001634:	0013      	movs	r3, r2
 8001636:	43da      	mvns	r2, r3
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	4013      	ands	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2203      	movs	r2, #3
 8001644:	401a      	ands	r2, r3
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	409a      	lsls	r2, r3
 800164c:	0013      	movs	r3, r2
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	23c0      	movs	r3, #192	; 0xc0
 8001660:	029b      	lsls	r3, r3, #10
 8001662:	4013      	ands	r3, r2
 8001664:	d100      	bne.n	8001668 <HAL_GPIO_Init+0x174>
 8001666:	e092      	b.n	800178e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001668:	4a50      	ldr	r2, [pc, #320]	; (80017ac <HAL_GPIO_Init+0x2b8>)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	089b      	lsrs	r3, r3, #2
 800166e:	3318      	adds	r3, #24
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	589b      	ldr	r3, [r3, r2]
 8001674:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	2203      	movs	r2, #3
 800167a:	4013      	ands	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	220f      	movs	r2, #15
 8001680:	409a      	lsls	r2, r3
 8001682:	0013      	movs	r3, r2
 8001684:	43da      	mvns	r2, r3
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	4013      	ands	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	23a0      	movs	r3, #160	; 0xa0
 8001690:	05db      	lsls	r3, r3, #23
 8001692:	429a      	cmp	r2, r3
 8001694:	d013      	beq.n	80016be <HAL_GPIO_Init+0x1ca>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a45      	ldr	r2, [pc, #276]	; (80017b0 <HAL_GPIO_Init+0x2bc>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d00d      	beq.n	80016ba <HAL_GPIO_Init+0x1c6>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a44      	ldr	r2, [pc, #272]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d007      	beq.n	80016b6 <HAL_GPIO_Init+0x1c2>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a43      	ldr	r2, [pc, #268]	; (80017b8 <HAL_GPIO_Init+0x2c4>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d101      	bne.n	80016b2 <HAL_GPIO_Init+0x1be>
 80016ae:	2303      	movs	r3, #3
 80016b0:	e006      	b.n	80016c0 <HAL_GPIO_Init+0x1cc>
 80016b2:	2305      	movs	r3, #5
 80016b4:	e004      	b.n	80016c0 <HAL_GPIO_Init+0x1cc>
 80016b6:	2302      	movs	r3, #2
 80016b8:	e002      	b.n	80016c0 <HAL_GPIO_Init+0x1cc>
 80016ba:	2301      	movs	r3, #1
 80016bc:	e000      	b.n	80016c0 <HAL_GPIO_Init+0x1cc>
 80016be:	2300      	movs	r3, #0
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	2103      	movs	r1, #3
 80016c4:	400a      	ands	r2, r1
 80016c6:	00d2      	lsls	r2, r2, #3
 80016c8:	4093      	lsls	r3, r2
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80016d0:	4936      	ldr	r1, [pc, #216]	; (80017ac <HAL_GPIO_Init+0x2b8>)
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	089b      	lsrs	r3, r3, #2
 80016d6:	3318      	adds	r3, #24
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016de:	4b33      	ldr	r3, [pc, #204]	; (80017ac <HAL_GPIO_Init+0x2b8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	43da      	mvns	r2, r3
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	4013      	ands	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685a      	ldr	r2, [r3, #4]
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	035b      	lsls	r3, r3, #13
 80016f6:	4013      	ands	r3, r2
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4313      	orrs	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001702:	4b2a      	ldr	r3, [pc, #168]	; (80017ac <HAL_GPIO_Init+0x2b8>)
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001708:	4b28      	ldr	r3, [pc, #160]	; (80017ac <HAL_GPIO_Init+0x2b8>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	43da      	mvns	r2, r3
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	4013      	ands	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	2380      	movs	r3, #128	; 0x80
 800171e:	039b      	lsls	r3, r3, #14
 8001720:	4013      	ands	r3, r2
 8001722:	d003      	beq.n	800172c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	4313      	orrs	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800172c:	4b1f      	ldr	r3, [pc, #124]	; (80017ac <HAL_GPIO_Init+0x2b8>)
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001732:	4a1e      	ldr	r2, [pc, #120]	; (80017ac <HAL_GPIO_Init+0x2b8>)
 8001734:	2384      	movs	r3, #132	; 0x84
 8001736:	58d3      	ldr	r3, [r2, r3]
 8001738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	43da      	mvns	r2, r3
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	029b      	lsls	r3, r3, #10
 800174c:	4013      	ands	r3, r2
 800174e:	d003      	beq.n	8001758 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001758:	4914      	ldr	r1, [pc, #80]	; (80017ac <HAL_GPIO_Init+0x2b8>)
 800175a:	2284      	movs	r2, #132	; 0x84
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001760:	4a12      	ldr	r2, [pc, #72]	; (80017ac <HAL_GPIO_Init+0x2b8>)
 8001762:	2380      	movs	r3, #128	; 0x80
 8001764:	58d3      	ldr	r3, [r2, r3]
 8001766:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	43da      	mvns	r2, r3
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4013      	ands	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	2380      	movs	r3, #128	; 0x80
 8001778:	025b      	lsls	r3, r3, #9
 800177a:	4013      	ands	r3, r2
 800177c:	d003      	beq.n	8001786 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4313      	orrs	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001786:	4909      	ldr	r1, [pc, #36]	; (80017ac <HAL_GPIO_Init+0x2b8>)
 8001788:	2280      	movs	r2, #128	; 0x80
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	3301      	adds	r3, #1
 8001792:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	40da      	lsrs	r2, r3
 800179c:	1e13      	subs	r3, r2, #0
 800179e:	d000      	beq.n	80017a2 <HAL_GPIO_Init+0x2ae>
 80017a0:	e6b0      	b.n	8001504 <HAL_GPIO_Init+0x10>
  }
}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	46c0      	nop			; (mov r8, r8)
 80017a6:	46bd      	mov	sp, r7
 80017a8:	b006      	add	sp, #24
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40021800 	.word	0x40021800
 80017b0:	50000400 	.word	0x50000400
 80017b4:	50000800 	.word	0x50000800
 80017b8:	50000c00 	.word	0x50000c00

080017bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	000a      	movs	r2, r1
 80017c6:	1cbb      	adds	r3, r7, #2
 80017c8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	1cba      	adds	r2, r7, #2
 80017d0:	8812      	ldrh	r2, [r2, #0]
 80017d2:	4013      	ands	r3, r2
 80017d4:	d004      	beq.n	80017e0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80017d6:	230f      	movs	r3, #15
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	2201      	movs	r2, #1
 80017dc:	701a      	strb	r2, [r3, #0]
 80017de:	e003      	b.n	80017e8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017e0:	230f      	movs	r3, #15
 80017e2:	18fb      	adds	r3, r7, r3
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80017e8:	230f      	movs	r3, #15
 80017ea:	18fb      	adds	r3, r7, r3
 80017ec:	781b      	ldrb	r3, [r3, #0]
}
 80017ee:	0018      	movs	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	b004      	add	sp, #16
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
 80017fe:	0008      	movs	r0, r1
 8001800:	0011      	movs	r1, r2
 8001802:	1cbb      	adds	r3, r7, #2
 8001804:	1c02      	adds	r2, r0, #0
 8001806:	801a      	strh	r2, [r3, #0]
 8001808:	1c7b      	adds	r3, r7, #1
 800180a:	1c0a      	adds	r2, r1, #0
 800180c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800180e:	1c7b      	adds	r3, r7, #1
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d004      	beq.n	8001820 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001816:	1cbb      	adds	r3, r7, #2
 8001818:	881a      	ldrh	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800181e:	e003      	b.n	8001828 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001820:	1cbb      	adds	r3, r7, #2
 8001822:	881a      	ldrh	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001828:	46c0      	nop			; (mov r8, r8)
 800182a:	46bd      	mov	sp, r7
 800182c:	b002      	add	sp, #8
 800182e:	bd80      	pop	{r7, pc}

08001830 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001838:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a19      	ldr	r2, [pc, #100]	; (80018a4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800183e:	4013      	ands	r3, r2
 8001840:	0019      	movs	r1, r3
 8001842:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	430a      	orrs	r2, r1
 8001848:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	2380      	movs	r3, #128	; 0x80
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	429a      	cmp	r2, r3
 8001852:	d11f      	bne.n	8001894 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001854:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	0013      	movs	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	189b      	adds	r3, r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4912      	ldr	r1, [pc, #72]	; (80018ac <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001862:	0018      	movs	r0, r3
 8001864:	f7fe fc4e 	bl	8000104 <__udivsi3>
 8001868:	0003      	movs	r3, r0
 800186a:	3301      	adds	r3, #1
 800186c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800186e:	e008      	b.n	8001882 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	3b01      	subs	r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	e001      	b.n	8001882 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e009      	b.n	8001896 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001882:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001884:	695a      	ldr	r2, [r3, #20]
 8001886:	2380      	movs	r3, #128	; 0x80
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	401a      	ands	r2, r3
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	429a      	cmp	r2, r3
 8001892:	d0ed      	beq.n	8001870 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	0018      	movs	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	b004      	add	sp, #16
 800189c:	bd80      	pop	{r7, pc}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	40007000 	.word	0x40007000
 80018a4:	fffff9ff 	.word	0xfffff9ff
 80018a8:	20000004 	.word	0x20000004
 80018ac:	000f4240 	.word	0x000f4240

080018b0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80018b4:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	23e0      	movs	r3, #224	; 0xe0
 80018ba:	01db      	lsls	r3, r3, #7
 80018bc:	4013      	ands	r3, r2
}
 80018be:	0018      	movs	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40021000 	.word	0x40021000

080018c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e2fe      	b.n	8001ed8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2201      	movs	r2, #1
 80018e0:	4013      	ands	r3, r2
 80018e2:	d100      	bne.n	80018e6 <HAL_RCC_OscConfig+0x1e>
 80018e4:	e07c      	b.n	80019e0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018e6:	4bc3      	ldr	r3, [pc, #780]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	2238      	movs	r2, #56	; 0x38
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018f0:	4bc0      	ldr	r3, [pc, #768]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	2203      	movs	r2, #3
 80018f6:	4013      	ands	r3, r2
 80018f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	2b10      	cmp	r3, #16
 80018fe:	d102      	bne.n	8001906 <HAL_RCC_OscConfig+0x3e>
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	2b03      	cmp	r3, #3
 8001904:	d002      	beq.n	800190c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	2b08      	cmp	r3, #8
 800190a:	d10b      	bne.n	8001924 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800190c:	4bb9      	ldr	r3, [pc, #740]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	029b      	lsls	r3, r3, #10
 8001914:	4013      	ands	r3, r2
 8001916:	d062      	beq.n	80019de <HAL_RCC_OscConfig+0x116>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d15e      	bne.n	80019de <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e2d9      	b.n	8001ed8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	025b      	lsls	r3, r3, #9
 800192c:	429a      	cmp	r2, r3
 800192e:	d107      	bne.n	8001940 <HAL_RCC_OscConfig+0x78>
 8001930:	4bb0      	ldr	r3, [pc, #704]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4baf      	ldr	r3, [pc, #700]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 8001936:	2180      	movs	r1, #128	; 0x80
 8001938:	0249      	lsls	r1, r1, #9
 800193a:	430a      	orrs	r2, r1
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	e020      	b.n	8001982 <HAL_RCC_OscConfig+0xba>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	23a0      	movs	r3, #160	; 0xa0
 8001946:	02db      	lsls	r3, r3, #11
 8001948:	429a      	cmp	r2, r3
 800194a:	d10e      	bne.n	800196a <HAL_RCC_OscConfig+0xa2>
 800194c:	4ba9      	ldr	r3, [pc, #676]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4ba8      	ldr	r3, [pc, #672]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 8001952:	2180      	movs	r1, #128	; 0x80
 8001954:	02c9      	lsls	r1, r1, #11
 8001956:	430a      	orrs	r2, r1
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	4ba6      	ldr	r3, [pc, #664]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	4ba5      	ldr	r3, [pc, #660]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 8001960:	2180      	movs	r1, #128	; 0x80
 8001962:	0249      	lsls	r1, r1, #9
 8001964:	430a      	orrs	r2, r1
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	e00b      	b.n	8001982 <HAL_RCC_OscConfig+0xba>
 800196a:	4ba2      	ldr	r3, [pc, #648]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	4ba1      	ldr	r3, [pc, #644]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 8001970:	49a1      	ldr	r1, [pc, #644]	; (8001bf8 <HAL_RCC_OscConfig+0x330>)
 8001972:	400a      	ands	r2, r1
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	4b9f      	ldr	r3, [pc, #636]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	4b9e      	ldr	r3, [pc, #632]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 800197c:	499f      	ldr	r1, [pc, #636]	; (8001bfc <HAL_RCC_OscConfig+0x334>)
 800197e:	400a      	ands	r2, r1
 8001980:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d014      	beq.n	80019b4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198a:	f7ff fca7 	bl	80012dc <HAL_GetTick>
 800198e:	0003      	movs	r3, r0
 8001990:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001994:	f7ff fca2 	bl	80012dc <HAL_GetTick>
 8001998:	0002      	movs	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b64      	cmp	r3, #100	; 0x64
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e298      	b.n	8001ed8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019a6:	4b93      	ldr	r3, [pc, #588]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	2380      	movs	r3, #128	; 0x80
 80019ac:	029b      	lsls	r3, r3, #10
 80019ae:	4013      	ands	r3, r2
 80019b0:	d0f0      	beq.n	8001994 <HAL_RCC_OscConfig+0xcc>
 80019b2:	e015      	b.n	80019e0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b4:	f7ff fc92 	bl	80012dc <HAL_GetTick>
 80019b8:	0003      	movs	r3, r0
 80019ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019be:	f7ff fc8d 	bl	80012dc <HAL_GetTick>
 80019c2:	0002      	movs	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b64      	cmp	r3, #100	; 0x64
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e283      	b.n	8001ed8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019d0:	4b88      	ldr	r3, [pc, #544]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	029b      	lsls	r3, r3, #10
 80019d8:	4013      	ands	r3, r2
 80019da:	d1f0      	bne.n	80019be <HAL_RCC_OscConfig+0xf6>
 80019dc:	e000      	b.n	80019e0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019de:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2202      	movs	r2, #2
 80019e6:	4013      	ands	r3, r2
 80019e8:	d100      	bne.n	80019ec <HAL_RCC_OscConfig+0x124>
 80019ea:	e099      	b.n	8001b20 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ec:	4b81      	ldr	r3, [pc, #516]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	2238      	movs	r2, #56	; 0x38
 80019f2:	4013      	ands	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019f6:	4b7f      	ldr	r3, [pc, #508]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	2203      	movs	r2, #3
 80019fc:	4013      	ands	r3, r2
 80019fe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	2b10      	cmp	r3, #16
 8001a04:	d102      	bne.n	8001a0c <HAL_RCC_OscConfig+0x144>
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d002      	beq.n	8001a12 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d135      	bne.n	8001a7e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a12:	4b78      	ldr	r3, [pc, #480]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d005      	beq.n	8001a2a <HAL_RCC_OscConfig+0x162>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e256      	b.n	8001ed8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2a:	4b72      	ldr	r3, [pc, #456]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	4a74      	ldr	r2, [pc, #464]	; (8001c00 <HAL_RCC_OscConfig+0x338>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	0019      	movs	r1, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	695b      	ldr	r3, [r3, #20]
 8001a38:	021a      	lsls	r2, r3, #8
 8001a3a:	4b6e      	ldr	r3, [pc, #440]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d112      	bne.n	8001a6c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a46:	4b6b      	ldr	r3, [pc, #428]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a6e      	ldr	r2, [pc, #440]	; (8001c04 <HAL_RCC_OscConfig+0x33c>)
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	0019      	movs	r1, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	691a      	ldr	r2, [r3, #16]
 8001a54:	4b67      	ldr	r3, [pc, #412]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 8001a56:	430a      	orrs	r2, r1
 8001a58:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001a5a:	4b66      	ldr	r3, [pc, #408]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	0adb      	lsrs	r3, r3, #11
 8001a60:	2207      	movs	r2, #7
 8001a62:	4013      	ands	r3, r2
 8001a64:	4a68      	ldr	r2, [pc, #416]	; (8001c08 <HAL_RCC_OscConfig+0x340>)
 8001a66:	40da      	lsrs	r2, r3
 8001a68:	4b68      	ldr	r3, [pc, #416]	; (8001c0c <HAL_RCC_OscConfig+0x344>)
 8001a6a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a6c:	4b68      	ldr	r3, [pc, #416]	; (8001c10 <HAL_RCC_OscConfig+0x348>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	0018      	movs	r0, r3
 8001a72:	f7ff fbd7 	bl	8001224 <HAL_InitTick>
 8001a76:	1e03      	subs	r3, r0, #0
 8001a78:	d051      	beq.n	8001b1e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e22c      	b.n	8001ed8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d030      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a86:	4b5b      	ldr	r3, [pc, #364]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a5e      	ldr	r2, [pc, #376]	; (8001c04 <HAL_RCC_OscConfig+0x33c>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	0019      	movs	r1, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	691a      	ldr	r2, [r3, #16]
 8001a94:	4b57      	ldr	r3, [pc, #348]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 8001a96:	430a      	orrs	r2, r1
 8001a98:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001a9a:	4b56      	ldr	r3, [pc, #344]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	4b55      	ldr	r3, [pc, #340]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 8001aa0:	2180      	movs	r1, #128	; 0x80
 8001aa2:	0049      	lsls	r1, r1, #1
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa8:	f7ff fc18 	bl	80012dc <HAL_GetTick>
 8001aac:	0003      	movs	r3, r0
 8001aae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab2:	f7ff fc13 	bl	80012dc <HAL_GetTick>
 8001ab6:	0002      	movs	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e209      	b.n	8001ed8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ac4:	4b4b      	ldr	r3, [pc, #300]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	2380      	movs	r3, #128	; 0x80
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	4013      	ands	r3, r2
 8001ace:	d0f0      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad0:	4b48      	ldr	r3, [pc, #288]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	4a4a      	ldr	r2, [pc, #296]	; (8001c00 <HAL_RCC_OscConfig+0x338>)
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	0019      	movs	r1, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	021a      	lsls	r2, r3, #8
 8001ae0:	4b44      	ldr	r3, [pc, #272]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	e01b      	b.n	8001b20 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001ae8:	4b42      	ldr	r3, [pc, #264]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b41      	ldr	r3, [pc, #260]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 8001aee:	4949      	ldr	r1, [pc, #292]	; (8001c14 <HAL_RCC_OscConfig+0x34c>)
 8001af0:	400a      	ands	r2, r1
 8001af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af4:	f7ff fbf2 	bl	80012dc <HAL_GetTick>
 8001af8:	0003      	movs	r3, r0
 8001afa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001afe:	f7ff fbed 	bl	80012dc <HAL_GetTick>
 8001b02:	0002      	movs	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e1e3      	b.n	8001ed8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b10:	4b38      	ldr	r3, [pc, #224]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	2380      	movs	r3, #128	; 0x80
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d1f0      	bne.n	8001afe <HAL_RCC_OscConfig+0x236>
 8001b1c:	e000      	b.n	8001b20 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b1e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2208      	movs	r2, #8
 8001b26:	4013      	ands	r3, r2
 8001b28:	d047      	beq.n	8001bba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b2a:	4b32      	ldr	r3, [pc, #200]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2238      	movs	r2, #56	; 0x38
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b18      	cmp	r3, #24
 8001b34:	d10a      	bne.n	8001b4c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001b36:	4b2f      	ldr	r3, [pc, #188]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 8001b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d03c      	beq.n	8001bba <HAL_RCC_OscConfig+0x2f2>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d138      	bne.n	8001bba <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e1c5      	b.n	8001ed8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d019      	beq.n	8001b88 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001b54:	4b27      	ldr	r3, [pc, #156]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 8001b56:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b58:	4b26      	ldr	r3, [pc, #152]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b60:	f7ff fbbc 	bl	80012dc <HAL_GetTick>
 8001b64:	0003      	movs	r3, r0
 8001b66:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b6a:	f7ff fbb7 	bl	80012dc <HAL_GetTick>
 8001b6e:	0002      	movs	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e1ad      	b.n	8001ed8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b7c:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 8001b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b80:	2202      	movs	r2, #2
 8001b82:	4013      	ands	r3, r2
 8001b84:	d0f1      	beq.n	8001b6a <HAL_RCC_OscConfig+0x2a2>
 8001b86:	e018      	b.n	8001bba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001b88:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 8001b8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b8c:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 8001b8e:	2101      	movs	r1, #1
 8001b90:	438a      	bics	r2, r1
 8001b92:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b94:	f7ff fba2 	bl	80012dc <HAL_GetTick>
 8001b98:	0003      	movs	r3, r0
 8001b9a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b9e:	f7ff fb9d 	bl	80012dc <HAL_GetTick>
 8001ba2:	0002      	movs	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e193      	b.n	8001ed8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb0:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 8001bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d1f1      	bne.n	8001b9e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2204      	movs	r2, #4
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d100      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x2fe>
 8001bc4:	e0c6      	b.n	8001d54 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bc6:	231f      	movs	r3, #31
 8001bc8:	18fb      	adds	r3, r7, r3
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2238      	movs	r2, #56	; 0x38
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	2b20      	cmp	r3, #32
 8001bd8:	d11e      	bne.n	8001c18 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HAL_RCC_OscConfig+0x32c>)
 8001bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bde:	2202      	movs	r2, #2
 8001be0:	4013      	ands	r3, r2
 8001be2:	d100      	bne.n	8001be6 <HAL_RCC_OscConfig+0x31e>
 8001be4:	e0b6      	b.n	8001d54 <HAL_RCC_OscConfig+0x48c>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d000      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x328>
 8001bee:	e0b1      	b.n	8001d54 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e171      	b.n	8001ed8 <HAL_RCC_OscConfig+0x610>
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	fffeffff 	.word	0xfffeffff
 8001bfc:	fffbffff 	.word	0xfffbffff
 8001c00:	ffff80ff 	.word	0xffff80ff
 8001c04:	ffffc7ff 	.word	0xffffc7ff
 8001c08:	00f42400 	.word	0x00f42400
 8001c0c:	20000004 	.word	0x20000004
 8001c10:	20000008 	.word	0x20000008
 8001c14:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c18:	4bb1      	ldr	r3, [pc, #708]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001c1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c1c:	2380      	movs	r3, #128	; 0x80
 8001c1e:	055b      	lsls	r3, r3, #21
 8001c20:	4013      	ands	r3, r2
 8001c22:	d101      	bne.n	8001c28 <HAL_RCC_OscConfig+0x360>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <HAL_RCC_OscConfig+0x362>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d011      	beq.n	8001c52 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001c2e:	4bac      	ldr	r3, [pc, #688]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001c30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c32:	4bab      	ldr	r3, [pc, #684]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001c34:	2180      	movs	r1, #128	; 0x80
 8001c36:	0549      	lsls	r1, r1, #21
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c3c:	4ba8      	ldr	r3, [pc, #672]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001c3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	055b      	lsls	r3, r3, #21
 8001c44:	4013      	ands	r3, r2
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001c4a:	231f      	movs	r3, #31
 8001c4c:	18fb      	adds	r3, r7, r3
 8001c4e:	2201      	movs	r2, #1
 8001c50:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c52:	4ba4      	ldr	r3, [pc, #656]	; (8001ee4 <HAL_RCC_OscConfig+0x61c>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d11a      	bne.n	8001c94 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c5e:	4ba1      	ldr	r3, [pc, #644]	; (8001ee4 <HAL_RCC_OscConfig+0x61c>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	4ba0      	ldr	r3, [pc, #640]	; (8001ee4 <HAL_RCC_OscConfig+0x61c>)
 8001c64:	2180      	movs	r1, #128	; 0x80
 8001c66:	0049      	lsls	r1, r1, #1
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001c6c:	f7ff fb36 	bl	80012dc <HAL_GetTick>
 8001c70:	0003      	movs	r3, r0
 8001c72:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c76:	f7ff fb31 	bl	80012dc <HAL_GetTick>
 8001c7a:	0002      	movs	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e127      	b.n	8001ed8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c88:	4b96      	ldr	r3, [pc, #600]	; (8001ee4 <HAL_RCC_OscConfig+0x61c>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	2380      	movs	r3, #128	; 0x80
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4013      	ands	r3, r2
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d106      	bne.n	8001caa <HAL_RCC_OscConfig+0x3e2>
 8001c9c:	4b90      	ldr	r3, [pc, #576]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001c9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ca0:	4b8f      	ldr	r3, [pc, #572]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ca8:	e01c      	b.n	8001ce4 <HAL_RCC_OscConfig+0x41c>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	2b05      	cmp	r3, #5
 8001cb0:	d10c      	bne.n	8001ccc <HAL_RCC_OscConfig+0x404>
 8001cb2:	4b8b      	ldr	r3, [pc, #556]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001cb4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cb6:	4b8a      	ldr	r3, [pc, #552]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001cb8:	2104      	movs	r1, #4
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cbe:	4b88      	ldr	r3, [pc, #544]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001cc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cc2:	4b87      	ldr	r3, [pc, #540]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cca:	e00b      	b.n	8001ce4 <HAL_RCC_OscConfig+0x41c>
 8001ccc:	4b84      	ldr	r3, [pc, #528]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001cce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cd0:	4b83      	ldr	r3, [pc, #524]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	438a      	bics	r2, r1
 8001cd6:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cd8:	4b81      	ldr	r3, [pc, #516]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001cda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cdc:	4b80      	ldr	r3, [pc, #512]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001cde:	2104      	movs	r1, #4
 8001ce0:	438a      	bics	r2, r1
 8001ce2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d014      	beq.n	8001d16 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cec:	f7ff faf6 	bl	80012dc <HAL_GetTick>
 8001cf0:	0003      	movs	r3, r0
 8001cf2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cf4:	e009      	b.n	8001d0a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf6:	f7ff faf1 	bl	80012dc <HAL_GetTick>
 8001cfa:	0002      	movs	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	4a79      	ldr	r2, [pc, #484]	; (8001ee8 <HAL_RCC_OscConfig+0x620>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e0e6      	b.n	8001ed8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d0a:	4b75      	ldr	r3, [pc, #468]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0e:	2202      	movs	r2, #2
 8001d10:	4013      	ands	r3, r2
 8001d12:	d0f0      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x42e>
 8001d14:	e013      	b.n	8001d3e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d16:	f7ff fae1 	bl	80012dc <HAL_GetTick>
 8001d1a:	0003      	movs	r3, r0
 8001d1c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d1e:	e009      	b.n	8001d34 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d20:	f7ff fadc 	bl	80012dc <HAL_GetTick>
 8001d24:	0002      	movs	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	4a6f      	ldr	r2, [pc, #444]	; (8001ee8 <HAL_RCC_OscConfig+0x620>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e0d1      	b.n	8001ed8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d34:	4b6a      	ldr	r3, [pc, #424]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d38:	2202      	movs	r2, #2
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001d3e:	231f      	movs	r3, #31
 8001d40:	18fb      	adds	r3, r7, r3
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d105      	bne.n	8001d54 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001d48:	4b65      	ldr	r3, [pc, #404]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001d4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d4c:	4b64      	ldr	r3, [pc, #400]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001d4e:	4967      	ldr	r1, [pc, #412]	; (8001eec <HAL_RCC_OscConfig+0x624>)
 8001d50:	400a      	ands	r2, r1
 8001d52:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d100      	bne.n	8001d5e <HAL_RCC_OscConfig+0x496>
 8001d5c:	e0bb      	b.n	8001ed6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d5e:	4b60      	ldr	r3, [pc, #384]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2238      	movs	r2, #56	; 0x38
 8001d64:	4013      	ands	r3, r2
 8001d66:	2b10      	cmp	r3, #16
 8001d68:	d100      	bne.n	8001d6c <HAL_RCC_OscConfig+0x4a4>
 8001d6a:	e07b      	b.n	8001e64 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69db      	ldr	r3, [r3, #28]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d156      	bne.n	8001e22 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d74:	4b5a      	ldr	r3, [pc, #360]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b59      	ldr	r3, [pc, #356]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001d7a:	495d      	ldr	r1, [pc, #372]	; (8001ef0 <HAL_RCC_OscConfig+0x628>)
 8001d7c:	400a      	ands	r2, r1
 8001d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d80:	f7ff faac 	bl	80012dc <HAL_GetTick>
 8001d84:	0003      	movs	r3, r0
 8001d86:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d8a:	f7ff faa7 	bl	80012dc <HAL_GetTick>
 8001d8e:	0002      	movs	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e09d      	b.n	8001ed8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d9c:	4b50      	ldr	r3, [pc, #320]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	2380      	movs	r3, #128	; 0x80
 8001da2:	049b      	lsls	r3, r3, #18
 8001da4:	4013      	ands	r3, r2
 8001da6:	d1f0      	bne.n	8001d8a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001da8:	4b4d      	ldr	r3, [pc, #308]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	4a51      	ldr	r2, [pc, #324]	; (8001ef4 <HAL_RCC_OscConfig+0x62c>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	0019      	movs	r1, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a1a      	ldr	r2, [r3, #32]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc0:	021b      	lsls	r3, r3, #8
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	4b42      	ldr	r3, [pc, #264]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ddc:	4b40      	ldr	r3, [pc, #256]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	4b3f      	ldr	r3, [pc, #252]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001de2:	2180      	movs	r1, #128	; 0x80
 8001de4:	0449      	lsls	r1, r1, #17
 8001de6:	430a      	orrs	r2, r1
 8001de8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001dea:	4b3d      	ldr	r3, [pc, #244]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	4b3c      	ldr	r3, [pc, #240]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001df0:	2180      	movs	r1, #128	; 0x80
 8001df2:	0549      	lsls	r1, r1, #21
 8001df4:	430a      	orrs	r2, r1
 8001df6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df8:	f7ff fa70 	bl	80012dc <HAL_GetTick>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e02:	f7ff fa6b 	bl	80012dc <HAL_GetTick>
 8001e06:	0002      	movs	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e061      	b.n	8001ed8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e14:	4b32      	ldr	r3, [pc, #200]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	2380      	movs	r3, #128	; 0x80
 8001e1a:	049b      	lsls	r3, r3, #18
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d0f0      	beq.n	8001e02 <HAL_RCC_OscConfig+0x53a>
 8001e20:	e059      	b.n	8001ed6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e22:	4b2f      	ldr	r3, [pc, #188]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	4b2e      	ldr	r3, [pc, #184]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001e28:	4931      	ldr	r1, [pc, #196]	; (8001ef0 <HAL_RCC_OscConfig+0x628>)
 8001e2a:	400a      	ands	r2, r1
 8001e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2e:	f7ff fa55 	bl	80012dc <HAL_GetTick>
 8001e32:	0003      	movs	r3, r0
 8001e34:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e38:	f7ff fa50 	bl	80012dc <HAL_GetTick>
 8001e3c:	0002      	movs	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e046      	b.n	8001ed8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e4a:	4b25      	ldr	r3, [pc, #148]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	2380      	movs	r3, #128	; 0x80
 8001e50:	049b      	lsls	r3, r3, #18
 8001e52:	4013      	ands	r3, r2
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001e56:	4b22      	ldr	r3, [pc, #136]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	4b21      	ldr	r3, [pc, #132]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001e5c:	4926      	ldr	r1, [pc, #152]	; (8001ef8 <HAL_RCC_OscConfig+0x630>)
 8001e5e:	400a      	ands	r2, r1
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	e038      	b.n	8001ed6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e033      	b.n	8001ed8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001e70:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <HAL_RCC_OscConfig+0x618>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2203      	movs	r2, #3
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d126      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	2270      	movs	r2, #112	; 0x70
 8001e88:	401a      	ands	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d11f      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	23fe      	movs	r3, #254	; 0xfe
 8001e96:	01db      	lsls	r3, r3, #7
 8001e98:	401a      	ands	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d116      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	23f8      	movs	r3, #248	; 0xf8
 8001ea8:	039b      	lsls	r3, r3, #14
 8001eaa:	401a      	ands	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d10e      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	23e0      	movs	r3, #224	; 0xe0
 8001eb8:	051b      	lsls	r3, r3, #20
 8001eba:	401a      	ands	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d106      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	0f5b      	lsrs	r3, r3, #29
 8001ec8:	075a      	lsls	r2, r3, #29
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d001      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	0018      	movs	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	b008      	add	sp, #32
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40007000 	.word	0x40007000
 8001ee8:	00001388 	.word	0x00001388
 8001eec:	efffffff 	.word	0xefffffff
 8001ef0:	feffffff 	.word	0xfeffffff
 8001ef4:	11c1808c 	.word	0x11c1808c
 8001ef8:	eefefffc 	.word	0xeefefffc

08001efc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0e9      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f10:	4b76      	ldr	r3, [pc, #472]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2207      	movs	r2, #7
 8001f16:	4013      	ands	r3, r2
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d91e      	bls.n	8001f5c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1e:	4b73      	ldr	r3, [pc, #460]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2207      	movs	r2, #7
 8001f24:	4393      	bics	r3, r2
 8001f26:	0019      	movs	r1, r3
 8001f28:	4b70      	ldr	r3, [pc, #448]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f30:	f7ff f9d4 	bl	80012dc <HAL_GetTick>
 8001f34:	0003      	movs	r3, r0
 8001f36:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f38:	e009      	b.n	8001f4e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f3a:	f7ff f9cf 	bl	80012dc <HAL_GetTick>
 8001f3e:	0002      	movs	r2, r0
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	4a6a      	ldr	r2, [pc, #424]	; (80020f0 <HAL_RCC_ClockConfig+0x1f4>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e0ca      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f4e:	4b67      	ldr	r3, [pc, #412]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2207      	movs	r2, #7
 8001f54:	4013      	ands	r3, r2
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d1ee      	bne.n	8001f3a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2202      	movs	r2, #2
 8001f62:	4013      	ands	r3, r2
 8001f64:	d015      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2204      	movs	r2, #4
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d006      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f70:	4b60      	ldr	r3, [pc, #384]	; (80020f4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	4b5f      	ldr	r3, [pc, #380]	; (80020f4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f76:	21e0      	movs	r1, #224	; 0xe0
 8001f78:	01c9      	lsls	r1, r1, #7
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f7e:	4b5d      	ldr	r3, [pc, #372]	; (80020f4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	4a5d      	ldr	r2, [pc, #372]	; (80020f8 <HAL_RCC_ClockConfig+0x1fc>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	0019      	movs	r1, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	4b59      	ldr	r3, [pc, #356]	; (80020f4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2201      	movs	r2, #1
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d057      	beq.n	800204c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d107      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fa4:	4b53      	ldr	r3, [pc, #332]	; (80020f4 <HAL_RCC_ClockConfig+0x1f8>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	029b      	lsls	r3, r3, #10
 8001fac:	4013      	ands	r3, r2
 8001fae:	d12b      	bne.n	8002008 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e097      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d107      	bne.n	8001fcc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fbc:	4b4d      	ldr	r3, [pc, #308]	; (80020f4 <HAL_RCC_ClockConfig+0x1f8>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	049b      	lsls	r3, r3, #18
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d11f      	bne.n	8002008 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e08b      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d107      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fd4:	4b47      	ldr	r3, [pc, #284]	; (80020f4 <HAL_RCC_ClockConfig+0x1f8>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	2380      	movs	r3, #128	; 0x80
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d113      	bne.n	8002008 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e07f      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d106      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fec:	4b41      	ldr	r3, [pc, #260]	; (80020f4 <HAL_RCC_ClockConfig+0x1f8>)
 8001fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d108      	bne.n	8002008 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e074      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ffa:	4b3e      	ldr	r3, [pc, #248]	; (80020f4 <HAL_RCC_ClockConfig+0x1f8>)
 8001ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffe:	2202      	movs	r2, #2
 8002000:	4013      	ands	r3, r2
 8002002:	d101      	bne.n	8002008 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e06d      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002008:	4b3a      	ldr	r3, [pc, #232]	; (80020f4 <HAL_RCC_ClockConfig+0x1f8>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	2207      	movs	r2, #7
 800200e:	4393      	bics	r3, r2
 8002010:	0019      	movs	r1, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	4b37      	ldr	r3, [pc, #220]	; (80020f4 <HAL_RCC_ClockConfig+0x1f8>)
 8002018:	430a      	orrs	r2, r1
 800201a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800201c:	f7ff f95e 	bl	80012dc <HAL_GetTick>
 8002020:	0003      	movs	r3, r0
 8002022:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002024:	e009      	b.n	800203a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002026:	f7ff f959 	bl	80012dc <HAL_GetTick>
 800202a:	0002      	movs	r2, r0
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	4a2f      	ldr	r2, [pc, #188]	; (80020f0 <HAL_RCC_ClockConfig+0x1f4>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d901      	bls.n	800203a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e054      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203a:	4b2e      	ldr	r3, [pc, #184]	; (80020f4 <HAL_RCC_ClockConfig+0x1f8>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2238      	movs	r2, #56	; 0x38
 8002040:	401a      	ands	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	429a      	cmp	r2, r3
 800204a:	d1ec      	bne.n	8002026 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800204c:	4b27      	ldr	r3, [pc, #156]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2207      	movs	r2, #7
 8002052:	4013      	ands	r3, r2
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d21e      	bcs.n	8002098 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205a:	4b24      	ldr	r3, [pc, #144]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2207      	movs	r2, #7
 8002060:	4393      	bics	r3, r2
 8002062:	0019      	movs	r1, r3
 8002064:	4b21      	ldr	r3, [pc, #132]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800206c:	f7ff f936 	bl	80012dc <HAL_GetTick>
 8002070:	0003      	movs	r3, r0
 8002072:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002074:	e009      	b.n	800208a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002076:	f7ff f931 	bl	80012dc <HAL_GetTick>
 800207a:	0002      	movs	r2, r0
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	4a1b      	ldr	r2, [pc, #108]	; (80020f0 <HAL_RCC_ClockConfig+0x1f4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d901      	bls.n	800208a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e02c      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800208a:	4b18      	ldr	r3, [pc, #96]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2207      	movs	r2, #7
 8002090:	4013      	ands	r3, r2
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d1ee      	bne.n	8002076 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2204      	movs	r2, #4
 800209e:	4013      	ands	r3, r2
 80020a0:	d009      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80020a2:	4b14      	ldr	r3, [pc, #80]	; (80020f4 <HAL_RCC_ClockConfig+0x1f8>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	4a15      	ldr	r2, [pc, #84]	; (80020fc <HAL_RCC_ClockConfig+0x200>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	0019      	movs	r1, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68da      	ldr	r2, [r3, #12]
 80020b0:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <HAL_RCC_ClockConfig+0x1f8>)
 80020b2:	430a      	orrs	r2, r1
 80020b4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80020b6:	f000 f829 	bl	800210c <HAL_RCC_GetSysClockFreq>
 80020ba:	0001      	movs	r1, r0
 80020bc:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <HAL_RCC_ClockConfig+0x1f8>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	0a1b      	lsrs	r3, r3, #8
 80020c2:	220f      	movs	r2, #15
 80020c4:	401a      	ands	r2, r3
 80020c6:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <HAL_RCC_ClockConfig+0x204>)
 80020c8:	0092      	lsls	r2, r2, #2
 80020ca:	58d3      	ldr	r3, [r2, r3]
 80020cc:	221f      	movs	r2, #31
 80020ce:	4013      	ands	r3, r2
 80020d0:	000a      	movs	r2, r1
 80020d2:	40da      	lsrs	r2, r3
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <HAL_RCC_ClockConfig+0x208>)
 80020d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_RCC_ClockConfig+0x20c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	0018      	movs	r0, r3
 80020de:	f7ff f8a1 	bl	8001224 <HAL_InitTick>
 80020e2:	0003      	movs	r3, r0
}
 80020e4:	0018      	movs	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	b004      	add	sp, #16
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40022000 	.word	0x40022000
 80020f0:	00001388 	.word	0x00001388
 80020f4:	40021000 	.word	0x40021000
 80020f8:	fffff0ff 	.word	0xfffff0ff
 80020fc:	ffff8fff 	.word	0xffff8fff
 8002100:	080047e4 	.word	0x080047e4
 8002104:	20000004 	.word	0x20000004
 8002108:	20000008 	.word	0x20000008

0800210c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002112:	4b3c      	ldr	r3, [pc, #240]	; (8002204 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2238      	movs	r2, #56	; 0x38
 8002118:	4013      	ands	r3, r2
 800211a:	d10f      	bne.n	800213c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800211c:	4b39      	ldr	r3, [pc, #228]	; (8002204 <HAL_RCC_GetSysClockFreq+0xf8>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	0adb      	lsrs	r3, r3, #11
 8002122:	2207      	movs	r2, #7
 8002124:	4013      	ands	r3, r2
 8002126:	2201      	movs	r2, #1
 8002128:	409a      	lsls	r2, r3
 800212a:	0013      	movs	r3, r2
 800212c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800212e:	6839      	ldr	r1, [r7, #0]
 8002130:	4835      	ldr	r0, [pc, #212]	; (8002208 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002132:	f7fd ffe7 	bl	8000104 <__udivsi3>
 8002136:	0003      	movs	r3, r0
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	e05d      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800213c:	4b31      	ldr	r3, [pc, #196]	; (8002204 <HAL_RCC_GetSysClockFreq+0xf8>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2238      	movs	r2, #56	; 0x38
 8002142:	4013      	ands	r3, r2
 8002144:	2b08      	cmp	r3, #8
 8002146:	d102      	bne.n	800214e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002148:	4b30      	ldr	r3, [pc, #192]	; (800220c <HAL_RCC_GetSysClockFreq+0x100>)
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	e054      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800214e:	4b2d      	ldr	r3, [pc, #180]	; (8002204 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2238      	movs	r2, #56	; 0x38
 8002154:	4013      	ands	r3, r2
 8002156:	2b10      	cmp	r3, #16
 8002158:	d138      	bne.n	80021cc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800215a:	4b2a      	ldr	r3, [pc, #168]	; (8002204 <HAL_RCC_GetSysClockFreq+0xf8>)
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	2203      	movs	r2, #3
 8002160:	4013      	ands	r3, r2
 8002162:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002164:	4b27      	ldr	r3, [pc, #156]	; (8002204 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	091b      	lsrs	r3, r3, #4
 800216a:	2207      	movs	r2, #7
 800216c:	4013      	ands	r3, r2
 800216e:	3301      	adds	r3, #1
 8002170:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2b03      	cmp	r3, #3
 8002176:	d10d      	bne.n	8002194 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	4824      	ldr	r0, [pc, #144]	; (800220c <HAL_RCC_GetSysClockFreq+0x100>)
 800217c:	f7fd ffc2 	bl	8000104 <__udivsi3>
 8002180:	0003      	movs	r3, r0
 8002182:	0019      	movs	r1, r3
 8002184:	4b1f      	ldr	r3, [pc, #124]	; (8002204 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	0a1b      	lsrs	r3, r3, #8
 800218a:	227f      	movs	r2, #127	; 0x7f
 800218c:	4013      	ands	r3, r2
 800218e:	434b      	muls	r3, r1
 8002190:	617b      	str	r3, [r7, #20]
        break;
 8002192:	e00d      	b.n	80021b0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002194:	68b9      	ldr	r1, [r7, #8]
 8002196:	481c      	ldr	r0, [pc, #112]	; (8002208 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002198:	f7fd ffb4 	bl	8000104 <__udivsi3>
 800219c:	0003      	movs	r3, r0
 800219e:	0019      	movs	r1, r3
 80021a0:	4b18      	ldr	r3, [pc, #96]	; (8002204 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	0a1b      	lsrs	r3, r3, #8
 80021a6:	227f      	movs	r2, #127	; 0x7f
 80021a8:	4013      	ands	r3, r2
 80021aa:	434b      	muls	r3, r1
 80021ac:	617b      	str	r3, [r7, #20]
        break;
 80021ae:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80021b0:	4b14      	ldr	r3, [pc, #80]	; (8002204 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	0f5b      	lsrs	r3, r3, #29
 80021b6:	2207      	movs	r2, #7
 80021b8:	4013      	ands	r3, r2
 80021ba:	3301      	adds	r3, #1
 80021bc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	6978      	ldr	r0, [r7, #20]
 80021c2:	f7fd ff9f 	bl	8000104 <__udivsi3>
 80021c6:	0003      	movs	r3, r0
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	e015      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80021cc:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2238      	movs	r2, #56	; 0x38
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b20      	cmp	r3, #32
 80021d6:	d103      	bne.n	80021e0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80021d8:	2380      	movs	r3, #128	; 0x80
 80021da:	021b      	lsls	r3, r3, #8
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	e00b      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	2238      	movs	r2, #56	; 0x38
 80021e6:	4013      	ands	r3, r2
 80021e8:	2b18      	cmp	r3, #24
 80021ea:	d103      	bne.n	80021f4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80021ec:	23fa      	movs	r3, #250	; 0xfa
 80021ee:	01db      	lsls	r3, r3, #7
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	e001      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80021f8:	693b      	ldr	r3, [r7, #16]
}
 80021fa:	0018      	movs	r0, r3
 80021fc:	46bd      	mov	sp, r7
 80021fe:	b006      	add	sp, #24
 8002200:	bd80      	pop	{r7, pc}
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	40021000 	.word	0x40021000
 8002208:	00f42400 	.word	0x00f42400
 800220c:	007a1200 	.word	0x007a1200

08002210 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002214:	4b02      	ldr	r3, [pc, #8]	; (8002220 <HAL_RCC_GetHCLKFreq+0x10>)
 8002216:	681b      	ldr	r3, [r3, #0]
}
 8002218:	0018      	movs	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	20000004 	.word	0x20000004

08002224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002224:	b5b0      	push	{r4, r5, r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002228:	f7ff fff2 	bl	8002210 <HAL_RCC_GetHCLKFreq>
 800222c:	0004      	movs	r4, r0
 800222e:	f7ff fb3f 	bl	80018b0 <LL_RCC_GetAPB1Prescaler>
 8002232:	0003      	movs	r3, r0
 8002234:	0b1a      	lsrs	r2, r3, #12
 8002236:	4b05      	ldr	r3, [pc, #20]	; (800224c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002238:	0092      	lsls	r2, r2, #2
 800223a:	58d3      	ldr	r3, [r2, r3]
 800223c:	221f      	movs	r2, #31
 800223e:	4013      	ands	r3, r2
 8002240:	40dc      	lsrs	r4, r3
 8002242:	0023      	movs	r3, r4
}
 8002244:	0018      	movs	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	bdb0      	pop	{r4, r5, r7, pc}
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	08004824 	.word	0x08004824

08002250 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002258:	2313      	movs	r3, #19
 800225a:	18fb      	adds	r3, r7, r3
 800225c:	2200      	movs	r2, #0
 800225e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002260:	2312      	movs	r3, #18
 8002262:	18fb      	adds	r3, r7, r3
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	2380      	movs	r3, #128	; 0x80
 800226e:	029b      	lsls	r3, r3, #10
 8002270:	4013      	ands	r3, r2
 8002272:	d100      	bne.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002274:	e0a3      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002276:	2011      	movs	r0, #17
 8002278:	183b      	adds	r3, r7, r0
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800227e:	4bc3      	ldr	r3, [pc, #780]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002280:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	055b      	lsls	r3, r3, #21
 8002286:	4013      	ands	r3, r2
 8002288:	d110      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800228a:	4bc0      	ldr	r3, [pc, #768]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800228c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800228e:	4bbf      	ldr	r3, [pc, #764]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002290:	2180      	movs	r1, #128	; 0x80
 8002292:	0549      	lsls	r1, r1, #21
 8002294:	430a      	orrs	r2, r1
 8002296:	63da      	str	r2, [r3, #60]	; 0x3c
 8002298:	4bbc      	ldr	r3, [pc, #752]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800229a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800229c:	2380      	movs	r3, #128	; 0x80
 800229e:	055b      	lsls	r3, r3, #21
 80022a0:	4013      	ands	r3, r2
 80022a2:	60bb      	str	r3, [r7, #8]
 80022a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022a6:	183b      	adds	r3, r7, r0
 80022a8:	2201      	movs	r2, #1
 80022aa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022ac:	4bb8      	ldr	r3, [pc, #736]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4bb7      	ldr	r3, [pc, #732]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80022b2:	2180      	movs	r1, #128	; 0x80
 80022b4:	0049      	lsls	r1, r1, #1
 80022b6:	430a      	orrs	r2, r1
 80022b8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022ba:	f7ff f80f 	bl	80012dc <HAL_GetTick>
 80022be:	0003      	movs	r3, r0
 80022c0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022c2:	e00b      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c4:	f7ff f80a 	bl	80012dc <HAL_GetTick>
 80022c8:	0002      	movs	r2, r0
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d904      	bls.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80022d2:	2313      	movs	r3, #19
 80022d4:	18fb      	adds	r3, r7, r3
 80022d6:	2203      	movs	r2, #3
 80022d8:	701a      	strb	r2, [r3, #0]
        break;
 80022da:	e005      	b.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022dc:	4bac      	ldr	r3, [pc, #688]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	2380      	movs	r3, #128	; 0x80
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	4013      	ands	r3, r2
 80022e6:	d0ed      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80022e8:	2313      	movs	r3, #19
 80022ea:	18fb      	adds	r3, r7, r3
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d154      	bne.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022f2:	4ba6      	ldr	r3, [pc, #664]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022f6:	23c0      	movs	r3, #192	; 0xc0
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4013      	ands	r3, r2
 80022fc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d019      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	429a      	cmp	r2, r3
 800230c:	d014      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800230e:	4b9f      	ldr	r3, [pc, #636]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002312:	4aa0      	ldr	r2, [pc, #640]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002314:	4013      	ands	r3, r2
 8002316:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002318:	4b9c      	ldr	r3, [pc, #624]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800231a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800231c:	4b9b      	ldr	r3, [pc, #620]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800231e:	2180      	movs	r1, #128	; 0x80
 8002320:	0249      	lsls	r1, r1, #9
 8002322:	430a      	orrs	r2, r1
 8002324:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002326:	4b99      	ldr	r3, [pc, #612]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002328:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800232a:	4b98      	ldr	r3, [pc, #608]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800232c:	499a      	ldr	r1, [pc, #616]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800232e:	400a      	ands	r2, r1
 8002330:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002332:	4b96      	ldr	r3, [pc, #600]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	2201      	movs	r2, #1
 800233c:	4013      	ands	r3, r2
 800233e:	d016      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7fe ffcc 	bl	80012dc <HAL_GetTick>
 8002344:	0003      	movs	r3, r0
 8002346:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002348:	e00c      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234a:	f7fe ffc7 	bl	80012dc <HAL_GetTick>
 800234e:	0002      	movs	r2, r0
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	4a91      	ldr	r2, [pc, #580]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d904      	bls.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800235a:	2313      	movs	r3, #19
 800235c:	18fb      	adds	r3, r7, r3
 800235e:	2203      	movs	r2, #3
 8002360:	701a      	strb	r2, [r3, #0]
            break;
 8002362:	e004      	b.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002364:	4b89      	ldr	r3, [pc, #548]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002368:	2202      	movs	r2, #2
 800236a:	4013      	ands	r3, r2
 800236c:	d0ed      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800236e:	2313      	movs	r3, #19
 8002370:	18fb      	adds	r3, r7, r3
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10a      	bne.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002378:	4b84      	ldr	r3, [pc, #528]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800237a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237c:	4a85      	ldr	r2, [pc, #532]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800237e:	4013      	ands	r3, r2
 8002380:	0019      	movs	r1, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002386:	4b81      	ldr	r3, [pc, #516]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002388:	430a      	orrs	r2, r1
 800238a:	65da      	str	r2, [r3, #92]	; 0x5c
 800238c:	e00c      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800238e:	2312      	movs	r3, #18
 8002390:	18fb      	adds	r3, r7, r3
 8002392:	2213      	movs	r2, #19
 8002394:	18ba      	adds	r2, r7, r2
 8002396:	7812      	ldrb	r2, [r2, #0]
 8002398:	701a      	strb	r2, [r3, #0]
 800239a:	e005      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800239c:	2312      	movs	r3, #18
 800239e:	18fb      	adds	r3, r7, r3
 80023a0:	2213      	movs	r2, #19
 80023a2:	18ba      	adds	r2, r7, r2
 80023a4:	7812      	ldrb	r2, [r2, #0]
 80023a6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023a8:	2311      	movs	r3, #17
 80023aa:	18fb      	adds	r3, r7, r3
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d105      	bne.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023b2:	4b76      	ldr	r3, [pc, #472]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023b6:	4b75      	ldr	r3, [pc, #468]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023b8:	4979      	ldr	r1, [pc, #484]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80023ba:	400a      	ands	r2, r1
 80023bc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2201      	movs	r2, #1
 80023c4:	4013      	ands	r3, r2
 80023c6:	d009      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023c8:	4b70      	ldr	r3, [pc, #448]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023cc:	2203      	movs	r2, #3
 80023ce:	4393      	bics	r3, r2
 80023d0:	0019      	movs	r1, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	4b6d      	ldr	r3, [pc, #436]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023d8:	430a      	orrs	r2, r1
 80023da:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2202      	movs	r2, #2
 80023e2:	4013      	ands	r3, r2
 80023e4:	d009      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023e6:	4b69      	ldr	r3, [pc, #420]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ea:	220c      	movs	r2, #12
 80023ec:	4393      	bics	r3, r2
 80023ee:	0019      	movs	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	4b65      	ldr	r3, [pc, #404]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023f6:	430a      	orrs	r2, r1
 80023f8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2210      	movs	r2, #16
 8002400:	4013      	ands	r3, r2
 8002402:	d009      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002404:	4b61      	ldr	r3, [pc, #388]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002408:	4a66      	ldr	r2, [pc, #408]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800240a:	4013      	ands	r3, r2
 800240c:	0019      	movs	r1, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	4b5e      	ldr	r3, [pc, #376]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002414:	430a      	orrs	r2, r1
 8002416:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	2380      	movs	r3, #128	; 0x80
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4013      	ands	r3, r2
 8002422:	d009      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002424:	4b59      	ldr	r3, [pc, #356]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002428:	4a5f      	ldr	r2, [pc, #380]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800242a:	4013      	ands	r3, r2
 800242c:	0019      	movs	r1, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699a      	ldr	r2, [r3, #24]
 8002432:	4b56      	ldr	r3, [pc, #344]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002434:	430a      	orrs	r2, r1
 8002436:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	2380      	movs	r3, #128	; 0x80
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4013      	ands	r3, r2
 8002442:	d009      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002444:	4b51      	ldr	r3, [pc, #324]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002448:	4a58      	ldr	r2, [pc, #352]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800244a:	4013      	ands	r3, r2
 800244c:	0019      	movs	r1, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69da      	ldr	r2, [r3, #28]
 8002452:	4b4e      	ldr	r3, [pc, #312]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002454:	430a      	orrs	r2, r1
 8002456:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2220      	movs	r2, #32
 800245e:	4013      	ands	r3, r2
 8002460:	d009      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002462:	4b4a      	ldr	r3, [pc, #296]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002466:	4a52      	ldr	r2, [pc, #328]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002468:	4013      	ands	r3, r2
 800246a:	0019      	movs	r1, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691a      	ldr	r2, [r3, #16]
 8002470:	4b46      	ldr	r3, [pc, #280]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002472:	430a      	orrs	r2, r1
 8002474:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	01db      	lsls	r3, r3, #7
 800247e:	4013      	ands	r3, r2
 8002480:	d015      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002482:	4b42      	ldr	r3, [pc, #264]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	0899      	lsrs	r1, r3, #2
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1a      	ldr	r2, [r3, #32]
 800248e:	4b3f      	ldr	r3, [pc, #252]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002490:	430a      	orrs	r2, r1
 8002492:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a1a      	ldr	r2, [r3, #32]
 8002498:	2380      	movs	r3, #128	; 0x80
 800249a:	05db      	lsls	r3, r3, #23
 800249c:	429a      	cmp	r2, r3
 800249e:	d106      	bne.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80024a0:	4b3a      	ldr	r3, [pc, #232]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	4b39      	ldr	r3, [pc, #228]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024a6:	2180      	movs	r1, #128	; 0x80
 80024a8:	0249      	lsls	r1, r1, #9
 80024aa:	430a      	orrs	r2, r1
 80024ac:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	2380      	movs	r3, #128	; 0x80
 80024b4:	031b      	lsls	r3, r3, #12
 80024b6:	4013      	ands	r3, r2
 80024b8:	d009      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80024ba:	4b34      	ldr	r3, [pc, #208]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024be:	2240      	movs	r2, #64	; 0x40
 80024c0:	4393      	bics	r3, r2
 80024c2:	0019      	movs	r1, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024c8:	4b30      	ldr	r3, [pc, #192]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024ca:	430a      	orrs	r2, r1
 80024cc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	2380      	movs	r3, #128	; 0x80
 80024d4:	039b      	lsls	r3, r3, #14
 80024d6:	4013      	ands	r3, r2
 80024d8:	d016      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80024da:	4b2c      	ldr	r3, [pc, #176]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024de:	4a35      	ldr	r2, [pc, #212]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	0019      	movs	r1, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024e8:	4b28      	ldr	r3, [pc, #160]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024ea:	430a      	orrs	r2, r1
 80024ec:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024f2:	2380      	movs	r3, #128	; 0x80
 80024f4:	03db      	lsls	r3, r3, #15
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d106      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80024fa:	4b24      	ldr	r3, [pc, #144]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	4b23      	ldr	r3, [pc, #140]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002500:	2180      	movs	r1, #128	; 0x80
 8002502:	0449      	lsls	r1, r1, #17
 8002504:	430a      	orrs	r2, r1
 8002506:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	2380      	movs	r3, #128	; 0x80
 800250e:	03db      	lsls	r3, r3, #15
 8002510:	4013      	ands	r3, r2
 8002512:	d016      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002514:	4b1d      	ldr	r3, [pc, #116]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002518:	4a27      	ldr	r2, [pc, #156]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800251a:	4013      	ands	r3, r2
 800251c:	0019      	movs	r1, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002522:	4b1a      	ldr	r3, [pc, #104]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002524:	430a      	orrs	r2, r1
 8002526:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800252c:	2380      	movs	r3, #128	; 0x80
 800252e:	045b      	lsls	r3, r3, #17
 8002530:	429a      	cmp	r2, r3
 8002532:	d106      	bne.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002534:	4b15      	ldr	r3, [pc, #84]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	4b14      	ldr	r3, [pc, #80]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800253a:	2180      	movs	r1, #128	; 0x80
 800253c:	0449      	lsls	r1, r1, #17
 800253e:	430a      	orrs	r2, r1
 8002540:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	2380      	movs	r3, #128	; 0x80
 8002548:	011b      	lsls	r3, r3, #4
 800254a:	4013      	ands	r3, r2
 800254c:	d016      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800254e:	4b0f      	ldr	r3, [pc, #60]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002552:	4a1a      	ldr	r2, [pc, #104]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002554:	4013      	ands	r3, r2
 8002556:	0019      	movs	r1, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	695a      	ldr	r2, [r3, #20]
 800255c:	4b0b      	ldr	r3, [pc, #44]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800255e:	430a      	orrs	r2, r1
 8002560:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695a      	ldr	r2, [r3, #20]
 8002566:	2380      	movs	r3, #128	; 0x80
 8002568:	01db      	lsls	r3, r3, #7
 800256a:	429a      	cmp	r2, r3
 800256c:	d106      	bne.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800256e:	4b07      	ldr	r3, [pc, #28]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	4b06      	ldr	r3, [pc, #24]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002574:	2180      	movs	r1, #128	; 0x80
 8002576:	0249      	lsls	r1, r1, #9
 8002578:	430a      	orrs	r2, r1
 800257a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800257c:	2312      	movs	r3, #18
 800257e:	18fb      	adds	r3, r7, r3
 8002580:	781b      	ldrb	r3, [r3, #0]
}
 8002582:	0018      	movs	r0, r3
 8002584:	46bd      	mov	sp, r7
 8002586:	b006      	add	sp, #24
 8002588:	bd80      	pop	{r7, pc}
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	40021000 	.word	0x40021000
 8002590:	40007000 	.word	0x40007000
 8002594:	fffffcff 	.word	0xfffffcff
 8002598:	fffeffff 	.word	0xfffeffff
 800259c:	00001388 	.word	0x00001388
 80025a0:	efffffff 	.word	0xefffffff
 80025a4:	fffff3ff 	.word	0xfffff3ff
 80025a8:	fff3ffff 	.word	0xfff3ffff
 80025ac:	ffcfffff 	.word	0xffcfffff
 80025b0:	ffffcfff 	.word	0xffffcfff
 80025b4:	ffbfffff 	.word	0xffbfffff
 80025b8:	feffffff 	.word	0xfeffffff
 80025bc:	ffff3fff 	.word	0xffff3fff

080025c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e04a      	b.n	8002668 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	223d      	movs	r2, #61	; 0x3d
 80025d6:	5c9b      	ldrb	r3, [r3, r2]
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d107      	bne.n	80025ee <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	223c      	movs	r2, #60	; 0x3c
 80025e2:	2100      	movs	r1, #0
 80025e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	0018      	movs	r0, r3
 80025ea:	f7fe fcb5 	bl	8000f58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	223d      	movs	r2, #61	; 0x3d
 80025f2:	2102      	movs	r1, #2
 80025f4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3304      	adds	r3, #4
 80025fe:	0019      	movs	r1, r3
 8002600:	0010      	movs	r0, r2
 8002602:	f000 fd8f 	bl	8003124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2248      	movs	r2, #72	; 0x48
 800260a:	2101      	movs	r1, #1
 800260c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	223e      	movs	r2, #62	; 0x3e
 8002612:	2101      	movs	r1, #1
 8002614:	5499      	strb	r1, [r3, r2]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	223f      	movs	r2, #63	; 0x3f
 800261a:	2101      	movs	r1, #1
 800261c:	5499      	strb	r1, [r3, r2]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2240      	movs	r2, #64	; 0x40
 8002622:	2101      	movs	r1, #1
 8002624:	5499      	strb	r1, [r3, r2]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2241      	movs	r2, #65	; 0x41
 800262a:	2101      	movs	r1, #1
 800262c:	5499      	strb	r1, [r3, r2]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2242      	movs	r2, #66	; 0x42
 8002632:	2101      	movs	r1, #1
 8002634:	5499      	strb	r1, [r3, r2]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2243      	movs	r2, #67	; 0x43
 800263a:	2101      	movs	r1, #1
 800263c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2244      	movs	r2, #68	; 0x44
 8002642:	2101      	movs	r1, #1
 8002644:	5499      	strb	r1, [r3, r2]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2245      	movs	r2, #69	; 0x45
 800264a:	2101      	movs	r1, #1
 800264c:	5499      	strb	r1, [r3, r2]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2246      	movs	r2, #70	; 0x46
 8002652:	2101      	movs	r1, #1
 8002654:	5499      	strb	r1, [r3, r2]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2247      	movs	r2, #71	; 0x47
 800265a:	2101      	movs	r1, #1
 800265c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	223d      	movs	r2, #61	; 0x3d
 8002662:	2101      	movs	r1, #1
 8002664:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	0018      	movs	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	b002      	add	sp, #8
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	223d      	movs	r2, #61	; 0x3d
 800267c:	5c9b      	ldrb	r3, [r3, r2]
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b01      	cmp	r3, #1
 8002682:	d001      	beq.n	8002688 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e042      	b.n	800270e <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	223d      	movs	r2, #61	; 0x3d
 800268c:	2102      	movs	r1, #2
 800268e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2101      	movs	r1, #1
 800269c:	430a      	orrs	r2, r1
 800269e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a1c      	ldr	r2, [pc, #112]	; (8002718 <HAL_TIM_Base_Start_IT+0xa8>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d00f      	beq.n	80026ca <HAL_TIM_Base_Start_IT+0x5a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	2380      	movs	r3, #128	; 0x80
 80026b0:	05db      	lsls	r3, r3, #23
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d009      	beq.n	80026ca <HAL_TIM_Base_Start_IT+0x5a>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a18      	ldr	r2, [pc, #96]	; (800271c <HAL_TIM_Base_Start_IT+0xac>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d004      	beq.n	80026ca <HAL_TIM_Base_Start_IT+0x5a>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a16      	ldr	r2, [pc, #88]	; (8002720 <HAL_TIM_Base_Start_IT+0xb0>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d116      	bne.n	80026f8 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	4a14      	ldr	r2, [pc, #80]	; (8002724 <HAL_TIM_Base_Start_IT+0xb4>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2b06      	cmp	r3, #6
 80026da:	d016      	beq.n	800270a <HAL_TIM_Base_Start_IT+0x9a>
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	2380      	movs	r3, #128	; 0x80
 80026e0:	025b      	lsls	r3, r3, #9
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d011      	beq.n	800270a <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2101      	movs	r1, #1
 80026f2:	430a      	orrs	r2, r1
 80026f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026f6:	e008      	b.n	800270a <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2101      	movs	r1, #1
 8002704:	430a      	orrs	r2, r1
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	e000      	b.n	800270c <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800270a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	0018      	movs	r0, r3
 8002710:	46bd      	mov	sp, r7
 8002712:	b004      	add	sp, #16
 8002714:	bd80      	pop	{r7, pc}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	40012c00 	.word	0x40012c00
 800271c:	40000400 	.word	0x40000400
 8002720:	40014000 	.word	0x40014000
 8002724:	00010007 	.word	0x00010007

08002728 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e04a      	b.n	80027d0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	223d      	movs	r2, #61	; 0x3d
 800273e:	5c9b      	ldrb	r3, [r3, r2]
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d107      	bne.n	8002756 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	223c      	movs	r2, #60	; 0x3c
 800274a:	2100      	movs	r1, #0
 800274c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	0018      	movs	r0, r3
 8002752:	f000 f841 	bl	80027d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	223d      	movs	r2, #61	; 0x3d
 800275a:	2102      	movs	r1, #2
 800275c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3304      	adds	r3, #4
 8002766:	0019      	movs	r1, r3
 8002768:	0010      	movs	r0, r2
 800276a:	f000 fcdb 	bl	8003124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2248      	movs	r2, #72	; 0x48
 8002772:	2101      	movs	r1, #1
 8002774:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	223e      	movs	r2, #62	; 0x3e
 800277a:	2101      	movs	r1, #1
 800277c:	5499      	strb	r1, [r3, r2]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	223f      	movs	r2, #63	; 0x3f
 8002782:	2101      	movs	r1, #1
 8002784:	5499      	strb	r1, [r3, r2]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2240      	movs	r2, #64	; 0x40
 800278a:	2101      	movs	r1, #1
 800278c:	5499      	strb	r1, [r3, r2]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2241      	movs	r2, #65	; 0x41
 8002792:	2101      	movs	r1, #1
 8002794:	5499      	strb	r1, [r3, r2]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2242      	movs	r2, #66	; 0x42
 800279a:	2101      	movs	r1, #1
 800279c:	5499      	strb	r1, [r3, r2]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2243      	movs	r2, #67	; 0x43
 80027a2:	2101      	movs	r1, #1
 80027a4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2244      	movs	r2, #68	; 0x44
 80027aa:	2101      	movs	r1, #1
 80027ac:	5499      	strb	r1, [r3, r2]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2245      	movs	r2, #69	; 0x45
 80027b2:	2101      	movs	r1, #1
 80027b4:	5499      	strb	r1, [r3, r2]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2246      	movs	r2, #70	; 0x46
 80027ba:	2101      	movs	r1, #1
 80027bc:	5499      	strb	r1, [r3, r2]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2247      	movs	r2, #71	; 0x47
 80027c2:	2101      	movs	r1, #1
 80027c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	223d      	movs	r2, #61	; 0x3d
 80027ca:	2101      	movs	r1, #1
 80027cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	0018      	movs	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	b002      	add	sp, #8
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80027e0:	46c0      	nop			; (mov r8, r8)
 80027e2:	46bd      	mov	sp, r7
 80027e4:	b002      	add	sp, #8
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d108      	bne.n	800280a <HAL_TIM_PWM_Start+0x22>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	223e      	movs	r2, #62	; 0x3e
 80027fc:	5c9b      	ldrb	r3, [r3, r2]
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	3b01      	subs	r3, #1
 8002802:	1e5a      	subs	r2, r3, #1
 8002804:	4193      	sbcs	r3, r2
 8002806:	b2db      	uxtb	r3, r3
 8002808:	e037      	b.n	800287a <HAL_TIM_PWM_Start+0x92>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	2b04      	cmp	r3, #4
 800280e:	d108      	bne.n	8002822 <HAL_TIM_PWM_Start+0x3a>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	223f      	movs	r2, #63	; 0x3f
 8002814:	5c9b      	ldrb	r3, [r3, r2]
 8002816:	b2db      	uxtb	r3, r3
 8002818:	3b01      	subs	r3, #1
 800281a:	1e5a      	subs	r2, r3, #1
 800281c:	4193      	sbcs	r3, r2
 800281e:	b2db      	uxtb	r3, r3
 8002820:	e02b      	b.n	800287a <HAL_TIM_PWM_Start+0x92>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2b08      	cmp	r3, #8
 8002826:	d108      	bne.n	800283a <HAL_TIM_PWM_Start+0x52>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2240      	movs	r2, #64	; 0x40
 800282c:	5c9b      	ldrb	r3, [r3, r2]
 800282e:	b2db      	uxtb	r3, r3
 8002830:	3b01      	subs	r3, #1
 8002832:	1e5a      	subs	r2, r3, #1
 8002834:	4193      	sbcs	r3, r2
 8002836:	b2db      	uxtb	r3, r3
 8002838:	e01f      	b.n	800287a <HAL_TIM_PWM_Start+0x92>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	2b0c      	cmp	r3, #12
 800283e:	d108      	bne.n	8002852 <HAL_TIM_PWM_Start+0x6a>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2241      	movs	r2, #65	; 0x41
 8002844:	5c9b      	ldrb	r3, [r3, r2]
 8002846:	b2db      	uxtb	r3, r3
 8002848:	3b01      	subs	r3, #1
 800284a:	1e5a      	subs	r2, r3, #1
 800284c:	4193      	sbcs	r3, r2
 800284e:	b2db      	uxtb	r3, r3
 8002850:	e013      	b.n	800287a <HAL_TIM_PWM_Start+0x92>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2b10      	cmp	r3, #16
 8002856:	d108      	bne.n	800286a <HAL_TIM_PWM_Start+0x82>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2242      	movs	r2, #66	; 0x42
 800285c:	5c9b      	ldrb	r3, [r3, r2]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	3b01      	subs	r3, #1
 8002862:	1e5a      	subs	r2, r3, #1
 8002864:	4193      	sbcs	r3, r2
 8002866:	b2db      	uxtb	r3, r3
 8002868:	e007      	b.n	800287a <HAL_TIM_PWM_Start+0x92>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2243      	movs	r2, #67	; 0x43
 800286e:	5c9b      	ldrb	r3, [r3, r2]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	3b01      	subs	r3, #1
 8002874:	1e5a      	subs	r2, r3, #1
 8002876:	4193      	sbcs	r3, r2
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e08b      	b.n	800299a <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d104      	bne.n	8002892 <HAL_TIM_PWM_Start+0xaa>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	223e      	movs	r2, #62	; 0x3e
 800288c:	2102      	movs	r1, #2
 800288e:	5499      	strb	r1, [r3, r2]
 8002890:	e023      	b.n	80028da <HAL_TIM_PWM_Start+0xf2>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2b04      	cmp	r3, #4
 8002896:	d104      	bne.n	80028a2 <HAL_TIM_PWM_Start+0xba>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	223f      	movs	r2, #63	; 0x3f
 800289c:	2102      	movs	r1, #2
 800289e:	5499      	strb	r1, [r3, r2]
 80028a0:	e01b      	b.n	80028da <HAL_TIM_PWM_Start+0xf2>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	d104      	bne.n	80028b2 <HAL_TIM_PWM_Start+0xca>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2240      	movs	r2, #64	; 0x40
 80028ac:	2102      	movs	r1, #2
 80028ae:	5499      	strb	r1, [r3, r2]
 80028b0:	e013      	b.n	80028da <HAL_TIM_PWM_Start+0xf2>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2b0c      	cmp	r3, #12
 80028b6:	d104      	bne.n	80028c2 <HAL_TIM_PWM_Start+0xda>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2241      	movs	r2, #65	; 0x41
 80028bc:	2102      	movs	r1, #2
 80028be:	5499      	strb	r1, [r3, r2]
 80028c0:	e00b      	b.n	80028da <HAL_TIM_PWM_Start+0xf2>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	2b10      	cmp	r3, #16
 80028c6:	d104      	bne.n	80028d2 <HAL_TIM_PWM_Start+0xea>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2242      	movs	r2, #66	; 0x42
 80028cc:	2102      	movs	r1, #2
 80028ce:	5499      	strb	r1, [r3, r2]
 80028d0:	e003      	b.n	80028da <HAL_TIM_PWM_Start+0xf2>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2243      	movs	r2, #67	; 0x43
 80028d6:	2102      	movs	r1, #2
 80028d8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6839      	ldr	r1, [r7, #0]
 80028e0:	2201      	movs	r2, #1
 80028e2:	0018      	movs	r0, r3
 80028e4:	f000 fffe 	bl	80038e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a2d      	ldr	r2, [pc, #180]	; (80029a4 <HAL_TIM_PWM_Start+0x1bc>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d00e      	beq.n	8002910 <HAL_TIM_PWM_Start+0x128>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a2c      	ldr	r2, [pc, #176]	; (80029a8 <HAL_TIM_PWM_Start+0x1c0>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d009      	beq.n	8002910 <HAL_TIM_PWM_Start+0x128>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a2a      	ldr	r2, [pc, #168]	; (80029ac <HAL_TIM_PWM_Start+0x1c4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d004      	beq.n	8002910 <HAL_TIM_PWM_Start+0x128>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a29      	ldr	r2, [pc, #164]	; (80029b0 <HAL_TIM_PWM_Start+0x1c8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d101      	bne.n	8002914 <HAL_TIM_PWM_Start+0x12c>
 8002910:	2301      	movs	r3, #1
 8002912:	e000      	b.n	8002916 <HAL_TIM_PWM_Start+0x12e>
 8002914:	2300      	movs	r3, #0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d008      	beq.n	800292c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2180      	movs	r1, #128	; 0x80
 8002926:	0209      	lsls	r1, r1, #8
 8002928:	430a      	orrs	r2, r1
 800292a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a1c      	ldr	r2, [pc, #112]	; (80029a4 <HAL_TIM_PWM_Start+0x1bc>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d00f      	beq.n	8002956 <HAL_TIM_PWM_Start+0x16e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	2380      	movs	r3, #128	; 0x80
 800293c:	05db      	lsls	r3, r3, #23
 800293e:	429a      	cmp	r2, r3
 8002940:	d009      	beq.n	8002956 <HAL_TIM_PWM_Start+0x16e>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a1b      	ldr	r2, [pc, #108]	; (80029b4 <HAL_TIM_PWM_Start+0x1cc>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d004      	beq.n	8002956 <HAL_TIM_PWM_Start+0x16e>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a15      	ldr	r2, [pc, #84]	; (80029a8 <HAL_TIM_PWM_Start+0x1c0>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d116      	bne.n	8002984 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	4a16      	ldr	r2, [pc, #88]	; (80029b8 <HAL_TIM_PWM_Start+0x1d0>)
 800295e:	4013      	ands	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2b06      	cmp	r3, #6
 8002966:	d016      	beq.n	8002996 <HAL_TIM_PWM_Start+0x1ae>
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	2380      	movs	r3, #128	; 0x80
 800296c:	025b      	lsls	r3, r3, #9
 800296e:	429a      	cmp	r2, r3
 8002970:	d011      	beq.n	8002996 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2101      	movs	r1, #1
 800297e:	430a      	orrs	r2, r1
 8002980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002982:	e008      	b.n	8002996 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2101      	movs	r1, #1
 8002990:	430a      	orrs	r2, r1
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	e000      	b.n	8002998 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002996:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	0018      	movs	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	b004      	add	sp, #16
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	46c0      	nop			; (mov r8, r8)
 80029a4:	40012c00 	.word	0x40012c00
 80029a8:	40014000 	.word	0x40014000
 80029ac:	40014400 	.word	0x40014400
 80029b0:	40014800 	.word	0x40014800
 80029b4:	40000400 	.word	0x40000400
 80029b8:	00010007 	.word	0x00010007

080029bc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6839      	ldr	r1, [r7, #0]
 80029cc:	2200      	movs	r2, #0
 80029ce:	0018      	movs	r0, r3
 80029d0:	f000 ff88 	bl	80038e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a37      	ldr	r2, [pc, #220]	; (8002ab8 <HAL_TIM_PWM_Stop+0xfc>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d00e      	beq.n	80029fc <HAL_TIM_PWM_Stop+0x40>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a36      	ldr	r2, [pc, #216]	; (8002abc <HAL_TIM_PWM_Stop+0x100>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d009      	beq.n	80029fc <HAL_TIM_PWM_Stop+0x40>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a34      	ldr	r2, [pc, #208]	; (8002ac0 <HAL_TIM_PWM_Stop+0x104>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d004      	beq.n	80029fc <HAL_TIM_PWM_Stop+0x40>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a33      	ldr	r2, [pc, #204]	; (8002ac4 <HAL_TIM_PWM_Stop+0x108>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d101      	bne.n	8002a00 <HAL_TIM_PWM_Stop+0x44>
 80029fc:	2301      	movs	r3, #1
 80029fe:	e000      	b.n	8002a02 <HAL_TIM_PWM_Stop+0x46>
 8002a00:	2300      	movs	r3, #0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d013      	beq.n	8002a2e <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	4a2e      	ldr	r2, [pc, #184]	; (8002ac8 <HAL_TIM_PWM_Stop+0x10c>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d10d      	bne.n	8002a2e <HAL_TIM_PWM_Stop+0x72>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	4a2c      	ldr	r2, [pc, #176]	; (8002acc <HAL_TIM_PWM_Stop+0x110>)
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d107      	bne.n	8002a2e <HAL_TIM_PWM_Stop+0x72>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4929      	ldr	r1, [pc, #164]	; (8002ad0 <HAL_TIM_PWM_Stop+0x114>)
 8002a2a:	400a      	ands	r2, r1
 8002a2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	4a24      	ldr	r2, [pc, #144]	; (8002ac8 <HAL_TIM_PWM_Stop+0x10c>)
 8002a36:	4013      	ands	r3, r2
 8002a38:	d10d      	bne.n	8002a56 <HAL_TIM_PWM_Stop+0x9a>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	4a22      	ldr	r2, [pc, #136]	; (8002acc <HAL_TIM_PWM_Stop+0x110>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	d107      	bne.n	8002a56 <HAL_TIM_PWM_Stop+0x9a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2101      	movs	r1, #1
 8002a52:	438a      	bics	r2, r1
 8002a54:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d104      	bne.n	8002a66 <HAL_TIM_PWM_Stop+0xaa>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	223e      	movs	r2, #62	; 0x3e
 8002a60:	2101      	movs	r1, #1
 8002a62:	5499      	strb	r1, [r3, r2]
 8002a64:	e023      	b.n	8002aae <HAL_TIM_PWM_Stop+0xf2>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b04      	cmp	r3, #4
 8002a6a:	d104      	bne.n	8002a76 <HAL_TIM_PWM_Stop+0xba>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	223f      	movs	r2, #63	; 0x3f
 8002a70:	2101      	movs	r1, #1
 8002a72:	5499      	strb	r1, [r3, r2]
 8002a74:	e01b      	b.n	8002aae <HAL_TIM_PWM_Stop+0xf2>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d104      	bne.n	8002a86 <HAL_TIM_PWM_Stop+0xca>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2240      	movs	r2, #64	; 0x40
 8002a80:	2101      	movs	r1, #1
 8002a82:	5499      	strb	r1, [r3, r2]
 8002a84:	e013      	b.n	8002aae <HAL_TIM_PWM_Stop+0xf2>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	2b0c      	cmp	r3, #12
 8002a8a:	d104      	bne.n	8002a96 <HAL_TIM_PWM_Stop+0xda>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2241      	movs	r2, #65	; 0x41
 8002a90:	2101      	movs	r1, #1
 8002a92:	5499      	strb	r1, [r3, r2]
 8002a94:	e00b      	b.n	8002aae <HAL_TIM_PWM_Stop+0xf2>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2b10      	cmp	r3, #16
 8002a9a:	d104      	bne.n	8002aa6 <HAL_TIM_PWM_Stop+0xea>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2242      	movs	r2, #66	; 0x42
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	5499      	strb	r1, [r3, r2]
 8002aa4:	e003      	b.n	8002aae <HAL_TIM_PWM_Stop+0xf2>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2243      	movs	r2, #67	; 0x43
 8002aaa:	2101      	movs	r1, #1
 8002aac:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	b002      	add	sp, #8
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40012c00 	.word	0x40012c00
 8002abc:	40014000 	.word	0x40014000
 8002ac0:	40014400 	.word	0x40014400
 8002ac4:	40014800 	.word	0x40014800
 8002ac8:	00001111 	.word	0x00001111
 8002acc:	00000444 	.word	0x00000444
 8002ad0:	ffff7fff 	.word	0xffff7fff

08002ad4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d124      	bne.n	8002b34 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	2202      	movs	r2, #2
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d11d      	bne.n	8002b34 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2203      	movs	r2, #3
 8002afe:	4252      	negs	r2, r2
 8002b00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	2203      	movs	r2, #3
 8002b10:	4013      	ands	r3, r2
 8002b12:	d004      	beq.n	8002b1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	0018      	movs	r0, r3
 8002b18:	f000 faec 	bl	80030f4 <HAL_TIM_IC_CaptureCallback>
 8002b1c:	e007      	b.n	8002b2e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	0018      	movs	r0, r3
 8002b22:	f000 fadf 	bl	80030e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f000 faeb 	bl	8003104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	2204      	movs	r2, #4
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d125      	bne.n	8002b8e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	2204      	movs	r2, #4
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d11e      	bne.n	8002b8e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2205      	movs	r2, #5
 8002b56:	4252      	negs	r2, r2
 8002b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699a      	ldr	r2, [r3, #24]
 8002b66:	23c0      	movs	r3, #192	; 0xc0
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d004      	beq.n	8002b78 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	0018      	movs	r0, r3
 8002b72:	f000 fabf 	bl	80030f4 <HAL_TIM_IC_CaptureCallback>
 8002b76:	e007      	b.n	8002b88 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f000 fab2 	bl	80030e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	0018      	movs	r0, r3
 8002b84:	f000 fabe 	bl	8003104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	2208      	movs	r2, #8
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d124      	bne.n	8002be6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	2208      	movs	r2, #8
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d11d      	bne.n	8002be6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2209      	movs	r2, #9
 8002bb0:	4252      	negs	r2, r2
 8002bb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2204      	movs	r2, #4
 8002bb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	2203      	movs	r2, #3
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	d004      	beq.n	8002bd0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f000 fa93 	bl	80030f4 <HAL_TIM_IC_CaptureCallback>
 8002bce:	e007      	b.n	8002be0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	f000 fa86 	bl	80030e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f000 fa92 	bl	8003104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	2210      	movs	r2, #16
 8002bee:	4013      	ands	r3, r2
 8002bf0:	2b10      	cmp	r3, #16
 8002bf2:	d125      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	2210      	movs	r2, #16
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b10      	cmp	r3, #16
 8002c00:	d11e      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2211      	movs	r2, #17
 8002c08:	4252      	negs	r2, r2
 8002c0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2208      	movs	r2, #8
 8002c10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	69da      	ldr	r2, [r3, #28]
 8002c18:	23c0      	movs	r3, #192	; 0xc0
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d004      	beq.n	8002c2a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	0018      	movs	r0, r3
 8002c24:	f000 fa66 	bl	80030f4 <HAL_TIM_IC_CaptureCallback>
 8002c28:	e007      	b.n	8002c3a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	f000 fa59 	bl	80030e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	0018      	movs	r0, r3
 8002c36:	f000 fa65 	bl	8003104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	2201      	movs	r2, #1
 8002c48:	4013      	ands	r3, r2
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d10f      	bne.n	8002c6e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	2201      	movs	r2, #1
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d108      	bne.n	8002c6e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2202      	movs	r2, #2
 8002c62:	4252      	negs	r2, r2
 8002c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f7fd ff47 	bl	8000afc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	2280      	movs	r2, #128	; 0x80
 8002c76:	4013      	ands	r3, r2
 8002c78:	2b80      	cmp	r3, #128	; 0x80
 8002c7a:	d10f      	bne.n	8002c9c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	2280      	movs	r2, #128	; 0x80
 8002c84:	4013      	ands	r3, r2
 8002c86:	2b80      	cmp	r3, #128	; 0x80
 8002c88:	d108      	bne.n	8002c9c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2281      	movs	r2, #129	; 0x81
 8002c90:	4252      	negs	r2, r2
 8002c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	0018      	movs	r0, r3
 8002c98:	f000 ff64 	bl	8003b64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691a      	ldr	r2, [r3, #16]
 8002ca2:	2380      	movs	r3, #128	; 0x80
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	401a      	ands	r2, r3
 8002ca8:	2380      	movs	r3, #128	; 0x80
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d10e      	bne.n	8002cce <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	2280      	movs	r2, #128	; 0x80
 8002cb8:	4013      	ands	r3, r2
 8002cba:	2b80      	cmp	r3, #128	; 0x80
 8002cbc:	d107      	bne.n	8002cce <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a1c      	ldr	r2, [pc, #112]	; (8002d34 <HAL_TIM_IRQHandler+0x260>)
 8002cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f000 ff53 	bl	8003b74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	2240      	movs	r2, #64	; 0x40
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b40      	cmp	r3, #64	; 0x40
 8002cda:	d10f      	bne.n	8002cfc <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	2240      	movs	r2, #64	; 0x40
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2b40      	cmp	r3, #64	; 0x40
 8002ce8:	d108      	bne.n	8002cfc <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2241      	movs	r2, #65	; 0x41
 8002cf0:	4252      	negs	r2, r2
 8002cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f000 fa0c 	bl	8003114 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	2220      	movs	r2, #32
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b20      	cmp	r3, #32
 8002d08:	d10f      	bne.n	8002d2a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	2220      	movs	r2, #32
 8002d12:	4013      	ands	r3, r2
 8002d14:	2b20      	cmp	r3, #32
 8002d16:	d108      	bne.n	8002d2a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2221      	movs	r2, #33	; 0x21
 8002d1e:	4252      	negs	r2, r2
 8002d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	0018      	movs	r0, r3
 8002d26:	f000 ff15 	bl	8003b54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	b002      	add	sp, #8
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	fffffeff 	.word	0xfffffeff

08002d38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d44:	2317      	movs	r3, #23
 8002d46:	18fb      	adds	r3, r7, r3
 8002d48:	2200      	movs	r2, #0
 8002d4a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	223c      	movs	r2, #60	; 0x3c
 8002d50:	5c9b      	ldrb	r3, [r3, r2]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d101      	bne.n	8002d5a <HAL_TIM_PWM_ConfigChannel+0x22>
 8002d56:	2302      	movs	r3, #2
 8002d58:	e0e5      	b.n	8002f26 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	223c      	movs	r2, #60	; 0x3c
 8002d5e:	2101      	movs	r1, #1
 8002d60:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b14      	cmp	r3, #20
 8002d66:	d900      	bls.n	8002d6a <HAL_TIM_PWM_ConfigChannel+0x32>
 8002d68:	e0d1      	b.n	8002f0e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	009a      	lsls	r2, r3, #2
 8002d6e:	4b70      	ldr	r3, [pc, #448]	; (8002f30 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002d70:	18d3      	adds	r3, r2, r3
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	0011      	movs	r1, r2
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f000 fa50 	bl	8003224 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	699a      	ldr	r2, [r3, #24]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2108      	movs	r1, #8
 8002d90:	430a      	orrs	r2, r1
 8002d92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699a      	ldr	r2, [r3, #24]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2104      	movs	r1, #4
 8002da0:	438a      	bics	r2, r1
 8002da2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6999      	ldr	r1, [r3, #24]
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	691a      	ldr	r2, [r3, #16]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	619a      	str	r2, [r3, #24]
      break;
 8002db6:	e0af      	b.n	8002f18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	0011      	movs	r1, r2
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	f000 fab9 	bl	8003338 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	699a      	ldr	r2, [r3, #24]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2180      	movs	r1, #128	; 0x80
 8002dd2:	0109      	lsls	r1, r1, #4
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	699a      	ldr	r2, [r3, #24]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4954      	ldr	r1, [pc, #336]	; (8002f34 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002de4:	400a      	ands	r2, r1
 8002de6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6999      	ldr	r1, [r3, #24]
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	021a      	lsls	r2, r3, #8
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	619a      	str	r2, [r3, #24]
      break;
 8002dfc:	e08c      	b.n	8002f18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	0011      	movs	r1, r2
 8002e06:	0018      	movs	r0, r3
 8002e08:	f000 fb1a 	bl	8003440 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	69da      	ldr	r2, [r3, #28]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2108      	movs	r1, #8
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	69da      	ldr	r2, [r3, #28]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2104      	movs	r1, #4
 8002e28:	438a      	bics	r2, r1
 8002e2a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	69d9      	ldr	r1, [r3, #28]
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	691a      	ldr	r2, [r3, #16]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	61da      	str	r2, [r3, #28]
      break;
 8002e3e:	e06b      	b.n	8002f18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	0011      	movs	r1, r2
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f000 fb81 	bl	8003550 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	69da      	ldr	r2, [r3, #28]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2180      	movs	r1, #128	; 0x80
 8002e5a:	0109      	lsls	r1, r1, #4
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	69da      	ldr	r2, [r3, #28]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4932      	ldr	r1, [pc, #200]	; (8002f34 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002e6c:	400a      	ands	r2, r1
 8002e6e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	69d9      	ldr	r1, [r3, #28]
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	021a      	lsls	r2, r3, #8
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	61da      	str	r2, [r3, #28]
      break;
 8002e84:	e048      	b.n	8002f18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	0011      	movs	r1, r2
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f000 fbc8 	bl	8003624 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2108      	movs	r1, #8
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2104      	movs	r1, #4
 8002eb0:	438a      	bics	r2, r1
 8002eb2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	691a      	ldr	r2, [r3, #16]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002ec6:	e027      	b.n	8002f18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	0011      	movs	r1, r2
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f000 fc07 	bl	80036e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2180      	movs	r1, #128	; 0x80
 8002ee2:	0109      	lsls	r1, r1, #4
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4910      	ldr	r1, [pc, #64]	; (8002f34 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002ef4:	400a      	ands	r2, r1
 8002ef6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	021a      	lsls	r2, r3, #8
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002f0c:	e004      	b.n	8002f18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002f0e:	2317      	movs	r3, #23
 8002f10:	18fb      	adds	r3, r7, r3
 8002f12:	2201      	movs	r2, #1
 8002f14:	701a      	strb	r2, [r3, #0]
      break;
 8002f16:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	223c      	movs	r2, #60	; 0x3c
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	5499      	strb	r1, [r3, r2]

  return status;
 8002f20:	2317      	movs	r3, #23
 8002f22:	18fb      	adds	r3, r7, r3
 8002f24:	781b      	ldrb	r3, [r3, #0]
}
 8002f26:	0018      	movs	r0, r3
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	b006      	add	sp, #24
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	08004844 	.word	0x08004844
 8002f34:	fffffbff 	.word	0xfffffbff

08002f38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f42:	230f      	movs	r3, #15
 8002f44:	18fb      	adds	r3, r7, r3
 8002f46:	2200      	movs	r2, #0
 8002f48:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	223c      	movs	r2, #60	; 0x3c
 8002f4e:	5c9b      	ldrb	r3, [r3, r2]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_TIM_ConfigClockSource+0x20>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e0bc      	b.n	80030d2 <HAL_TIM_ConfigClockSource+0x19a>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	223c      	movs	r2, #60	; 0x3c
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	223d      	movs	r2, #61	; 0x3d
 8002f64:	2102      	movs	r1, #2
 8002f66:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4a5a      	ldr	r2, [pc, #360]	; (80030dc <HAL_TIM_ConfigClockSource+0x1a4>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4a59      	ldr	r2, [pc, #356]	; (80030e0 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2280      	movs	r2, #128	; 0x80
 8002f8e:	0192      	lsls	r2, r2, #6
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d040      	beq.n	8003016 <HAL_TIM_ConfigClockSource+0xde>
 8002f94:	2280      	movs	r2, #128	; 0x80
 8002f96:	0192      	lsls	r2, r2, #6
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d900      	bls.n	8002f9e <HAL_TIM_ConfigClockSource+0x66>
 8002f9c:	e088      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x178>
 8002f9e:	2280      	movs	r2, #128	; 0x80
 8002fa0:	0152      	lsls	r2, r2, #5
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d100      	bne.n	8002fa8 <HAL_TIM_ConfigClockSource+0x70>
 8002fa6:	e088      	b.n	80030ba <HAL_TIM_ConfigClockSource+0x182>
 8002fa8:	2280      	movs	r2, #128	; 0x80
 8002faa:	0152      	lsls	r2, r2, #5
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d900      	bls.n	8002fb2 <HAL_TIM_ConfigClockSource+0x7a>
 8002fb0:	e07e      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x178>
 8002fb2:	2b70      	cmp	r3, #112	; 0x70
 8002fb4:	d018      	beq.n	8002fe8 <HAL_TIM_ConfigClockSource+0xb0>
 8002fb6:	d900      	bls.n	8002fba <HAL_TIM_ConfigClockSource+0x82>
 8002fb8:	e07a      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x178>
 8002fba:	2b60      	cmp	r3, #96	; 0x60
 8002fbc:	d04f      	beq.n	800305e <HAL_TIM_ConfigClockSource+0x126>
 8002fbe:	d900      	bls.n	8002fc2 <HAL_TIM_ConfigClockSource+0x8a>
 8002fc0:	e076      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x178>
 8002fc2:	2b50      	cmp	r3, #80	; 0x50
 8002fc4:	d03b      	beq.n	800303e <HAL_TIM_ConfigClockSource+0x106>
 8002fc6:	d900      	bls.n	8002fca <HAL_TIM_ConfigClockSource+0x92>
 8002fc8:	e072      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x178>
 8002fca:	2b40      	cmp	r3, #64	; 0x40
 8002fcc:	d057      	beq.n	800307e <HAL_TIM_ConfigClockSource+0x146>
 8002fce:	d900      	bls.n	8002fd2 <HAL_TIM_ConfigClockSource+0x9a>
 8002fd0:	e06e      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x178>
 8002fd2:	2b30      	cmp	r3, #48	; 0x30
 8002fd4:	d063      	beq.n	800309e <HAL_TIM_ConfigClockSource+0x166>
 8002fd6:	d86b      	bhi.n	80030b0 <HAL_TIM_ConfigClockSource+0x178>
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	d060      	beq.n	800309e <HAL_TIM_ConfigClockSource+0x166>
 8002fdc:	d868      	bhi.n	80030b0 <HAL_TIM_ConfigClockSource+0x178>
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d05d      	beq.n	800309e <HAL_TIM_ConfigClockSource+0x166>
 8002fe2:	2b10      	cmp	r3, #16
 8002fe4:	d05b      	beq.n	800309e <HAL_TIM_ConfigClockSource+0x166>
 8002fe6:	e063      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6818      	ldr	r0, [r3, #0]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	6899      	ldr	r1, [r3, #8]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f000 fc54 	bl	80038a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2277      	movs	r2, #119	; 0x77
 8003008:	4313      	orrs	r3, r2
 800300a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	609a      	str	r2, [r3, #8]
      break;
 8003014:	e052      	b.n	80030bc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6818      	ldr	r0, [r3, #0]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	6899      	ldr	r1, [r3, #8]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f000 fc3d 	bl	80038a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2180      	movs	r1, #128	; 0x80
 8003036:	01c9      	lsls	r1, r1, #7
 8003038:	430a      	orrs	r2, r1
 800303a:	609a      	str	r2, [r3, #8]
      break;
 800303c:	e03e      	b.n	80030bc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6818      	ldr	r0, [r3, #0]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	6859      	ldr	r1, [r3, #4]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	001a      	movs	r2, r3
 800304c:	f000 fbae 	bl	80037ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2150      	movs	r1, #80	; 0x50
 8003056:	0018      	movs	r0, r3
 8003058:	f000 fc08 	bl	800386c <TIM_ITRx_SetConfig>
      break;
 800305c:	e02e      	b.n	80030bc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6818      	ldr	r0, [r3, #0]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	6859      	ldr	r1, [r3, #4]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	001a      	movs	r2, r3
 800306c:	f000 fbcc 	bl	8003808 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2160      	movs	r1, #96	; 0x60
 8003076:	0018      	movs	r0, r3
 8003078:	f000 fbf8 	bl	800386c <TIM_ITRx_SetConfig>
      break;
 800307c:	e01e      	b.n	80030bc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6818      	ldr	r0, [r3, #0]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	6859      	ldr	r1, [r3, #4]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	001a      	movs	r2, r3
 800308c:	f000 fb8e 	bl	80037ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2140      	movs	r1, #64	; 0x40
 8003096:	0018      	movs	r0, r3
 8003098:	f000 fbe8 	bl	800386c <TIM_ITRx_SetConfig>
      break;
 800309c:	e00e      	b.n	80030bc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	0019      	movs	r1, r3
 80030a8:	0010      	movs	r0, r2
 80030aa:	f000 fbdf 	bl	800386c <TIM_ITRx_SetConfig>
      break;
 80030ae:	e005      	b.n	80030bc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80030b0:	230f      	movs	r3, #15
 80030b2:	18fb      	adds	r3, r7, r3
 80030b4:	2201      	movs	r2, #1
 80030b6:	701a      	strb	r2, [r3, #0]
      break;
 80030b8:	e000      	b.n	80030bc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80030ba:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	223d      	movs	r2, #61	; 0x3d
 80030c0:	2101      	movs	r1, #1
 80030c2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	223c      	movs	r2, #60	; 0x3c
 80030c8:	2100      	movs	r1, #0
 80030ca:	5499      	strb	r1, [r3, r2]

  return status;
 80030cc:	230f      	movs	r3, #15
 80030ce:	18fb      	adds	r3, r7, r3
 80030d0:	781b      	ldrb	r3, [r3, #0]
}
 80030d2:	0018      	movs	r0, r3
 80030d4:	46bd      	mov	sp, r7
 80030d6:	b004      	add	sp, #16
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	ffceff88 	.word	0xffceff88
 80030e0:	ffff00ff 	.word	0xffff00ff

080030e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030ec:	46c0      	nop			; (mov r8, r8)
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b002      	add	sp, #8
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030fc:	46c0      	nop			; (mov r8, r8)
 80030fe:	46bd      	mov	sp, r7
 8003100:	b002      	add	sp, #8
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800310c:	46c0      	nop			; (mov r8, r8)
 800310e:	46bd      	mov	sp, r7
 8003110:	b002      	add	sp, #8
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800311c:	46c0      	nop			; (mov r8, r8)
 800311e:	46bd      	mov	sp, r7
 8003120:	b002      	add	sp, #8
 8003122:	bd80      	pop	{r7, pc}

08003124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a34      	ldr	r2, [pc, #208]	; (8003208 <TIM_Base_SetConfig+0xe4>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d008      	beq.n	800314e <TIM_Base_SetConfig+0x2a>
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	2380      	movs	r3, #128	; 0x80
 8003140:	05db      	lsls	r3, r3, #23
 8003142:	429a      	cmp	r2, r3
 8003144:	d003      	beq.n	800314e <TIM_Base_SetConfig+0x2a>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a30      	ldr	r2, [pc, #192]	; (800320c <TIM_Base_SetConfig+0xe8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d108      	bne.n	8003160 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2270      	movs	r2, #112	; 0x70
 8003152:	4393      	bics	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	4313      	orrs	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a29      	ldr	r2, [pc, #164]	; (8003208 <TIM_Base_SetConfig+0xe4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d018      	beq.n	800319a <TIM_Base_SetConfig+0x76>
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	2380      	movs	r3, #128	; 0x80
 800316c:	05db      	lsls	r3, r3, #23
 800316e:	429a      	cmp	r2, r3
 8003170:	d013      	beq.n	800319a <TIM_Base_SetConfig+0x76>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a25      	ldr	r2, [pc, #148]	; (800320c <TIM_Base_SetConfig+0xe8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d00f      	beq.n	800319a <TIM_Base_SetConfig+0x76>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a24      	ldr	r2, [pc, #144]	; (8003210 <TIM_Base_SetConfig+0xec>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00b      	beq.n	800319a <TIM_Base_SetConfig+0x76>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a23      	ldr	r2, [pc, #140]	; (8003214 <TIM_Base_SetConfig+0xf0>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d007      	beq.n	800319a <TIM_Base_SetConfig+0x76>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a22      	ldr	r2, [pc, #136]	; (8003218 <TIM_Base_SetConfig+0xf4>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d003      	beq.n	800319a <TIM_Base_SetConfig+0x76>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a21      	ldr	r2, [pc, #132]	; (800321c <TIM_Base_SetConfig+0xf8>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d108      	bne.n	80031ac <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4a20      	ldr	r2, [pc, #128]	; (8003220 <TIM_Base_SetConfig+0xfc>)
 800319e:	4013      	ands	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2280      	movs	r2, #128	; 0x80
 80031b0:	4393      	bics	r3, r2
 80031b2:	001a      	movs	r2, r3
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a0c      	ldr	r2, [pc, #48]	; (8003208 <TIM_Base_SetConfig+0xe4>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d00b      	beq.n	80031f2 <TIM_Base_SetConfig+0xce>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a0d      	ldr	r2, [pc, #52]	; (8003214 <TIM_Base_SetConfig+0xf0>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d007      	beq.n	80031f2 <TIM_Base_SetConfig+0xce>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a0c      	ldr	r2, [pc, #48]	; (8003218 <TIM_Base_SetConfig+0xf4>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d003      	beq.n	80031f2 <TIM_Base_SetConfig+0xce>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a0b      	ldr	r2, [pc, #44]	; (800321c <TIM_Base_SetConfig+0xf8>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d103      	bne.n	80031fa <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	691a      	ldr	r2, [r3, #16]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	615a      	str	r2, [r3, #20]
}
 8003200:	46c0      	nop			; (mov r8, r8)
 8003202:	46bd      	mov	sp, r7
 8003204:	b004      	add	sp, #16
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40012c00 	.word	0x40012c00
 800320c:	40000400 	.word	0x40000400
 8003210:	40002000 	.word	0x40002000
 8003214:	40014000 	.word	0x40014000
 8003218:	40014400 	.word	0x40014400
 800321c:	40014800 	.word	0x40014800
 8003220:	fffffcff 	.word	0xfffffcff

08003224 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	2201      	movs	r2, #1
 8003234:	4393      	bics	r3, r2
 8003236:	001a      	movs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	4a32      	ldr	r2, [pc, #200]	; (800331c <TIM_OC1_SetConfig+0xf8>)
 8003252:	4013      	ands	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2203      	movs	r2, #3
 800325a:	4393      	bics	r3, r2
 800325c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	4313      	orrs	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	2202      	movs	r2, #2
 800326c:	4393      	bics	r3, r2
 800326e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	4313      	orrs	r3, r2
 8003278:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a28      	ldr	r2, [pc, #160]	; (8003320 <TIM_OC1_SetConfig+0xfc>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d00b      	beq.n	800329a <TIM_OC1_SetConfig+0x76>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a27      	ldr	r2, [pc, #156]	; (8003324 <TIM_OC1_SetConfig+0x100>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d007      	beq.n	800329a <TIM_OC1_SetConfig+0x76>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a26      	ldr	r2, [pc, #152]	; (8003328 <TIM_OC1_SetConfig+0x104>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d003      	beq.n	800329a <TIM_OC1_SetConfig+0x76>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a25      	ldr	r2, [pc, #148]	; (800332c <TIM_OC1_SetConfig+0x108>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d10c      	bne.n	80032b4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2208      	movs	r2, #8
 800329e:	4393      	bics	r3, r2
 80032a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	2204      	movs	r2, #4
 80032b0:	4393      	bics	r3, r2
 80032b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a1a      	ldr	r2, [pc, #104]	; (8003320 <TIM_OC1_SetConfig+0xfc>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d00b      	beq.n	80032d4 <TIM_OC1_SetConfig+0xb0>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a19      	ldr	r2, [pc, #100]	; (8003324 <TIM_OC1_SetConfig+0x100>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d007      	beq.n	80032d4 <TIM_OC1_SetConfig+0xb0>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a18      	ldr	r2, [pc, #96]	; (8003328 <TIM_OC1_SetConfig+0x104>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d003      	beq.n	80032d4 <TIM_OC1_SetConfig+0xb0>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a17      	ldr	r2, [pc, #92]	; (800332c <TIM_OC1_SetConfig+0x108>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d111      	bne.n	80032f8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	4a16      	ldr	r2, [pc, #88]	; (8003330 <TIM_OC1_SetConfig+0x10c>)
 80032d8:	4013      	ands	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	4a15      	ldr	r2, [pc, #84]	; (8003334 <TIM_OC1_SetConfig+0x110>)
 80032e0:	4013      	ands	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	621a      	str	r2, [r3, #32]
}
 8003312:	46c0      	nop			; (mov r8, r8)
 8003314:	46bd      	mov	sp, r7
 8003316:	b006      	add	sp, #24
 8003318:	bd80      	pop	{r7, pc}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	fffeff8f 	.word	0xfffeff8f
 8003320:	40012c00 	.word	0x40012c00
 8003324:	40014000 	.word	0x40014000
 8003328:	40014400 	.word	0x40014400
 800332c:	40014800 	.word	0x40014800
 8003330:	fffffeff 	.word	0xfffffeff
 8003334:	fffffdff 	.word	0xfffffdff

08003338 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	2210      	movs	r2, #16
 8003348:	4393      	bics	r3, r2
 800334a:	001a      	movs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	4a2e      	ldr	r2, [pc, #184]	; (8003420 <TIM_OC2_SetConfig+0xe8>)
 8003366:	4013      	ands	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	4a2d      	ldr	r2, [pc, #180]	; (8003424 <TIM_OC2_SetConfig+0xec>)
 800336e:	4013      	ands	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	021b      	lsls	r3, r3, #8
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	4313      	orrs	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2220      	movs	r2, #32
 8003382:	4393      	bics	r3, r2
 8003384:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	4313      	orrs	r3, r2
 8003390:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a24      	ldr	r2, [pc, #144]	; (8003428 <TIM_OC2_SetConfig+0xf0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d10d      	bne.n	80033b6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2280      	movs	r2, #128	; 0x80
 800339e:	4393      	bics	r3, r2
 80033a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2240      	movs	r2, #64	; 0x40
 80033b2:	4393      	bics	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a1b      	ldr	r2, [pc, #108]	; (8003428 <TIM_OC2_SetConfig+0xf0>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d00b      	beq.n	80033d6 <TIM_OC2_SetConfig+0x9e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a1a      	ldr	r2, [pc, #104]	; (800342c <TIM_OC2_SetConfig+0xf4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d007      	beq.n	80033d6 <TIM_OC2_SetConfig+0x9e>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a19      	ldr	r2, [pc, #100]	; (8003430 <TIM_OC2_SetConfig+0xf8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d003      	beq.n	80033d6 <TIM_OC2_SetConfig+0x9e>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a18      	ldr	r2, [pc, #96]	; (8003434 <TIM_OC2_SetConfig+0xfc>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d113      	bne.n	80033fe <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	4a17      	ldr	r2, [pc, #92]	; (8003438 <TIM_OC2_SetConfig+0x100>)
 80033da:	4013      	ands	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4a16      	ldr	r2, [pc, #88]	; (800343c <TIM_OC2_SetConfig+0x104>)
 80033e2:	4013      	ands	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	621a      	str	r2, [r3, #32]
}
 8003418:	46c0      	nop			; (mov r8, r8)
 800341a:	46bd      	mov	sp, r7
 800341c:	b006      	add	sp, #24
 800341e:	bd80      	pop	{r7, pc}
 8003420:	feff8fff 	.word	0xfeff8fff
 8003424:	fffffcff 	.word	0xfffffcff
 8003428:	40012c00 	.word	0x40012c00
 800342c:	40014000 	.word	0x40014000
 8003430:	40014400 	.word	0x40014400
 8003434:	40014800 	.word	0x40014800
 8003438:	fffffbff 	.word	0xfffffbff
 800343c:	fffff7ff 	.word	0xfffff7ff

08003440 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	4a35      	ldr	r2, [pc, #212]	; (8003524 <TIM_OC3_SetConfig+0xe4>)
 8003450:	401a      	ands	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4a2f      	ldr	r2, [pc, #188]	; (8003528 <TIM_OC3_SetConfig+0xe8>)
 800346c:	4013      	ands	r3, r2
 800346e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2203      	movs	r2, #3
 8003474:	4393      	bics	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	4313      	orrs	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	4a29      	ldr	r2, [pc, #164]	; (800352c <TIM_OC3_SetConfig+0xec>)
 8003486:	4013      	ands	r3, r2
 8003488:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	021b      	lsls	r3, r3, #8
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	4313      	orrs	r3, r2
 8003494:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a25      	ldr	r2, [pc, #148]	; (8003530 <TIM_OC3_SetConfig+0xf0>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d10d      	bne.n	80034ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	4a24      	ldr	r2, [pc, #144]	; (8003534 <TIM_OC3_SetConfig+0xf4>)
 80034a2:	4013      	ands	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	021b      	lsls	r3, r3, #8
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	4a20      	ldr	r2, [pc, #128]	; (8003538 <TIM_OC3_SetConfig+0xf8>)
 80034b6:	4013      	ands	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a1c      	ldr	r2, [pc, #112]	; (8003530 <TIM_OC3_SetConfig+0xf0>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d00b      	beq.n	80034da <TIM_OC3_SetConfig+0x9a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a1d      	ldr	r2, [pc, #116]	; (800353c <TIM_OC3_SetConfig+0xfc>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d007      	beq.n	80034da <TIM_OC3_SetConfig+0x9a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a1c      	ldr	r2, [pc, #112]	; (8003540 <TIM_OC3_SetConfig+0x100>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d003      	beq.n	80034da <TIM_OC3_SetConfig+0x9a>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a1b      	ldr	r2, [pc, #108]	; (8003544 <TIM_OC3_SetConfig+0x104>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d113      	bne.n	8003502 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4a1a      	ldr	r2, [pc, #104]	; (8003548 <TIM_OC3_SetConfig+0x108>)
 80034de:	4013      	ands	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	4a19      	ldr	r2, [pc, #100]	; (800354c <TIM_OC3_SetConfig+0x10c>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4313      	orrs	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	621a      	str	r2, [r3, #32]
}
 800351c:	46c0      	nop			; (mov r8, r8)
 800351e:	46bd      	mov	sp, r7
 8003520:	b006      	add	sp, #24
 8003522:	bd80      	pop	{r7, pc}
 8003524:	fffffeff 	.word	0xfffffeff
 8003528:	fffeff8f 	.word	0xfffeff8f
 800352c:	fffffdff 	.word	0xfffffdff
 8003530:	40012c00 	.word	0x40012c00
 8003534:	fffff7ff 	.word	0xfffff7ff
 8003538:	fffffbff 	.word	0xfffffbff
 800353c:	40014000 	.word	0x40014000
 8003540:	40014400 	.word	0x40014400
 8003544:	40014800 	.word	0x40014800
 8003548:	ffffefff 	.word	0xffffefff
 800354c:	ffffdfff 	.word	0xffffdfff

08003550 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	4a28      	ldr	r2, [pc, #160]	; (8003600 <TIM_OC4_SetConfig+0xb0>)
 8003560:	401a      	ands	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	4a22      	ldr	r2, [pc, #136]	; (8003604 <TIM_OC4_SetConfig+0xb4>)
 800357c:	4013      	ands	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4a21      	ldr	r2, [pc, #132]	; (8003608 <TIM_OC4_SetConfig+0xb8>)
 8003584:	4013      	ands	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	021b      	lsls	r3, r3, #8
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4313      	orrs	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	4a1d      	ldr	r2, [pc, #116]	; (800360c <TIM_OC4_SetConfig+0xbc>)
 8003598:	4013      	ands	r3, r2
 800359a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	031b      	lsls	r3, r3, #12
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a19      	ldr	r2, [pc, #100]	; (8003610 <TIM_OC4_SetConfig+0xc0>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d00b      	beq.n	80035c8 <TIM_OC4_SetConfig+0x78>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a18      	ldr	r2, [pc, #96]	; (8003614 <TIM_OC4_SetConfig+0xc4>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d007      	beq.n	80035c8 <TIM_OC4_SetConfig+0x78>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a17      	ldr	r2, [pc, #92]	; (8003618 <TIM_OC4_SetConfig+0xc8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d003      	beq.n	80035c8 <TIM_OC4_SetConfig+0x78>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a16      	ldr	r2, [pc, #88]	; (800361c <TIM_OC4_SetConfig+0xcc>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d109      	bne.n	80035dc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	4a15      	ldr	r2, [pc, #84]	; (8003620 <TIM_OC4_SetConfig+0xd0>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	019b      	lsls	r3, r3, #6
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	4313      	orrs	r3, r2
 80035da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	621a      	str	r2, [r3, #32]
}
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	46bd      	mov	sp, r7
 80035fa:	b006      	add	sp, #24
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	ffffefff 	.word	0xffffefff
 8003604:	feff8fff 	.word	0xfeff8fff
 8003608:	fffffcff 	.word	0xfffffcff
 800360c:	ffffdfff 	.word	0xffffdfff
 8003610:	40012c00 	.word	0x40012c00
 8003614:	40014000 	.word	0x40014000
 8003618:	40014400 	.word	0x40014400
 800361c:	40014800 	.word	0x40014800
 8003620:	ffffbfff 	.word	0xffffbfff

08003624 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	4a25      	ldr	r2, [pc, #148]	; (80036c8 <TIM_OC5_SetConfig+0xa4>)
 8003634:	401a      	ands	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4a1f      	ldr	r2, [pc, #124]	; (80036cc <TIM_OC5_SetConfig+0xa8>)
 8003650:	4013      	ands	r3, r2
 8003652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	4313      	orrs	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	4a1b      	ldr	r2, [pc, #108]	; (80036d0 <TIM_OC5_SetConfig+0xac>)
 8003662:	4013      	ands	r3, r2
 8003664:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	041b      	lsls	r3, r3, #16
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a17      	ldr	r2, [pc, #92]	; (80036d4 <TIM_OC5_SetConfig+0xb0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d00b      	beq.n	8003692 <TIM_OC5_SetConfig+0x6e>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a16      	ldr	r2, [pc, #88]	; (80036d8 <TIM_OC5_SetConfig+0xb4>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d007      	beq.n	8003692 <TIM_OC5_SetConfig+0x6e>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a15      	ldr	r2, [pc, #84]	; (80036dc <TIM_OC5_SetConfig+0xb8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d003      	beq.n	8003692 <TIM_OC5_SetConfig+0x6e>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a14      	ldr	r2, [pc, #80]	; (80036e0 <TIM_OC5_SetConfig+0xbc>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d109      	bne.n	80036a6 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	4a0c      	ldr	r2, [pc, #48]	; (80036c8 <TIM_OC5_SetConfig+0xa4>)
 8003696:	4013      	ands	r3, r2
 8003698:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	021b      	lsls	r3, r3, #8
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	621a      	str	r2, [r3, #32]
}
 80036c0:	46c0      	nop			; (mov r8, r8)
 80036c2:	46bd      	mov	sp, r7
 80036c4:	b006      	add	sp, #24
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	fffeffff 	.word	0xfffeffff
 80036cc:	fffeff8f 	.word	0xfffeff8f
 80036d0:	fffdffff 	.word	0xfffdffff
 80036d4:	40012c00 	.word	0x40012c00
 80036d8:	40014000 	.word	0x40014000
 80036dc:	40014400 	.word	0x40014400
 80036e0:	40014800 	.word	0x40014800

080036e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	4a26      	ldr	r2, [pc, #152]	; (800378c <TIM_OC6_SetConfig+0xa8>)
 80036f4:	401a      	ands	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4a20      	ldr	r2, [pc, #128]	; (8003790 <TIM_OC6_SetConfig+0xac>)
 8003710:	4013      	ands	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	021b      	lsls	r3, r3, #8
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	4313      	orrs	r3, r2
 800371e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	4a1c      	ldr	r2, [pc, #112]	; (8003794 <TIM_OC6_SetConfig+0xb0>)
 8003724:	4013      	ands	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	051b      	lsls	r3, r3, #20
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	4313      	orrs	r3, r2
 8003732:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a18      	ldr	r2, [pc, #96]	; (8003798 <TIM_OC6_SetConfig+0xb4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d00b      	beq.n	8003754 <TIM_OC6_SetConfig+0x70>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a17      	ldr	r2, [pc, #92]	; (800379c <TIM_OC6_SetConfig+0xb8>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d007      	beq.n	8003754 <TIM_OC6_SetConfig+0x70>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a16      	ldr	r2, [pc, #88]	; (80037a0 <TIM_OC6_SetConfig+0xbc>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d003      	beq.n	8003754 <TIM_OC6_SetConfig+0x70>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a15      	ldr	r2, [pc, #84]	; (80037a4 <TIM_OC6_SetConfig+0xc0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d109      	bne.n	8003768 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	4a14      	ldr	r2, [pc, #80]	; (80037a8 <TIM_OC6_SetConfig+0xc4>)
 8003758:	4013      	ands	r3, r2
 800375a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	029b      	lsls	r3, r3, #10
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	4313      	orrs	r3, r2
 8003766:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	621a      	str	r2, [r3, #32]
}
 8003782:	46c0      	nop			; (mov r8, r8)
 8003784:	46bd      	mov	sp, r7
 8003786:	b006      	add	sp, #24
 8003788:	bd80      	pop	{r7, pc}
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	ffefffff 	.word	0xffefffff
 8003790:	feff8fff 	.word	0xfeff8fff
 8003794:	ffdfffff 	.word	0xffdfffff
 8003798:	40012c00 	.word	0x40012c00
 800379c:	40014000 	.word	0x40014000
 80037a0:	40014400 	.word	0x40014400
 80037a4:	40014800 	.word	0x40014800
 80037a8:	fffbffff 	.word	0xfffbffff

080037ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	2201      	movs	r2, #1
 80037c4:	4393      	bics	r3, r2
 80037c6:	001a      	movs	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	22f0      	movs	r2, #240	; 0xf0
 80037d6:	4393      	bics	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	011b      	lsls	r3, r3, #4
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	220a      	movs	r2, #10
 80037e8:	4393      	bics	r3, r2
 80037ea:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	621a      	str	r2, [r3, #32]
}
 8003800:	46c0      	nop			; (mov r8, r8)
 8003802:	46bd      	mov	sp, r7
 8003804:	b006      	add	sp, #24
 8003806:	bd80      	pop	{r7, pc}

08003808 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	2210      	movs	r2, #16
 800381a:	4393      	bics	r3, r2
 800381c:	001a      	movs	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	4a0d      	ldr	r2, [pc, #52]	; (8003868 <TIM_TI2_ConfigInputStage+0x60>)
 8003832:	4013      	ands	r3, r2
 8003834:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	031b      	lsls	r3, r3, #12
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	4313      	orrs	r3, r2
 800383e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	22a0      	movs	r2, #160	; 0xa0
 8003844:	4393      	bics	r3, r2
 8003846:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	4313      	orrs	r3, r2
 8003850:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	621a      	str	r2, [r3, #32]
}
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	46bd      	mov	sp, r7
 8003862:	b006      	add	sp, #24
 8003864:	bd80      	pop	{r7, pc}
 8003866:	46c0      	nop			; (mov r8, r8)
 8003868:	ffff0fff 	.word	0xffff0fff

0800386c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4a08      	ldr	r2, [pc, #32]	; (80038a0 <TIM_ITRx_SetConfig+0x34>)
 8003880:	4013      	ands	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	4313      	orrs	r3, r2
 800388a:	2207      	movs	r2, #7
 800388c:	4313      	orrs	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	609a      	str	r2, [r3, #8]
}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	46bd      	mov	sp, r7
 800389a:	b004      	add	sp, #16
 800389c:	bd80      	pop	{r7, pc}
 800389e:	46c0      	nop			; (mov r8, r8)
 80038a0:	ffcfff8f 	.word	0xffcfff8f

080038a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
 80038b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	4a09      	ldr	r2, [pc, #36]	; (80038e0 <TIM_ETR_SetConfig+0x3c>)
 80038bc:	4013      	ands	r3, r2
 80038be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	021a      	lsls	r2, r3, #8
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	431a      	orrs	r2, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	609a      	str	r2, [r3, #8]
}
 80038d8:	46c0      	nop			; (mov r8, r8)
 80038da:	46bd      	mov	sp, r7
 80038dc:	b006      	add	sp, #24
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	ffff00ff 	.word	0xffff00ff

080038e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	221f      	movs	r2, #31
 80038f4:	4013      	ands	r3, r2
 80038f6:	2201      	movs	r2, #1
 80038f8:	409a      	lsls	r2, r3
 80038fa:	0013      	movs	r3, r2
 80038fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	43d2      	mvns	r2, r2
 8003906:	401a      	ands	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6a1a      	ldr	r2, [r3, #32]
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	211f      	movs	r1, #31
 8003914:	400b      	ands	r3, r1
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	4099      	lsls	r1, r3
 800391a:	000b      	movs	r3, r1
 800391c:	431a      	orrs	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	621a      	str	r2, [r3, #32]
}
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	46bd      	mov	sp, r7
 8003926:	b006      	add	sp, #24
 8003928:	bd80      	pop	{r7, pc}
	...

0800392c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	223c      	movs	r2, #60	; 0x3c
 800393a:	5c9b      	ldrb	r3, [r3, r2]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d101      	bne.n	8003944 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003940:	2302      	movs	r3, #2
 8003942:	e055      	b.n	80039f0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	223c      	movs	r2, #60	; 0x3c
 8003948:	2101      	movs	r1, #1
 800394a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	223d      	movs	r2, #61	; 0x3d
 8003950:	2102      	movs	r1, #2
 8003952:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a23      	ldr	r2, [pc, #140]	; (80039f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d108      	bne.n	8003980 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	4a22      	ldr	r2, [pc, #136]	; (80039fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003972:	4013      	ands	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	4313      	orrs	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2270      	movs	r2, #112	; 0x70
 8003984:	4393      	bics	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a16      	ldr	r2, [pc, #88]	; (80039f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d00f      	beq.n	80039c4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	2380      	movs	r3, #128	; 0x80
 80039aa:	05db      	lsls	r3, r3, #23
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d009      	beq.n	80039c4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a12      	ldr	r2, [pc, #72]	; (8003a00 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d004      	beq.n	80039c4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a11      	ldr	r2, [pc, #68]	; (8003a04 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d10c      	bne.n	80039de <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2280      	movs	r2, #128	; 0x80
 80039c8:	4393      	bics	r3, r2
 80039ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	223d      	movs	r2, #61	; 0x3d
 80039e2:	2101      	movs	r1, #1
 80039e4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	223c      	movs	r2, #60	; 0x3c
 80039ea:	2100      	movs	r1, #0
 80039ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	0018      	movs	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b004      	add	sp, #16
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40012c00 	.word	0x40012c00
 80039fc:	ff0fffff 	.word	0xff0fffff
 8003a00:	40000400 	.word	0x40000400
 8003a04:	40014000 	.word	0x40014000

08003a08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	223c      	movs	r2, #60	; 0x3c
 8003a1a:	5c9b      	ldrb	r3, [r3, r2]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d101      	bne.n	8003a24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003a20:	2302      	movs	r3, #2
 8003a22:	e079      	b.n	8003b18 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	223c      	movs	r2, #60	; 0x3c
 8003a28:	2101      	movs	r1, #1
 8003a2a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	22ff      	movs	r2, #255	; 0xff
 8003a30:	4393      	bics	r3, r2
 8003a32:	001a      	movs	r2, r3
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4a38      	ldr	r2, [pc, #224]	; (8003b20 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003a40:	401a      	ands	r2, r3
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4a35      	ldr	r2, [pc, #212]	; (8003b24 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003a4e:	401a      	ands	r2, r3
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4a33      	ldr	r2, [pc, #204]	; (8003b28 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003a5c:	401a      	ands	r2, r3
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4a30      	ldr	r2, [pc, #192]	; (8003b2c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003a6a:	401a      	ands	r2, r3
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4a2e      	ldr	r2, [pc, #184]	; (8003b30 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003a78:	401a      	ands	r2, r3
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	4a2b      	ldr	r2, [pc, #172]	; (8003b34 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003a86:	401a      	ands	r2, r3
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4a29      	ldr	r2, [pc, #164]	; (8003b38 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003a94:	401a      	ands	r2, r3
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	041b      	lsls	r3, r3, #16
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a25      	ldr	r2, [pc, #148]	; (8003b3c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d106      	bne.n	8003ab8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4a24      	ldr	r2, [pc, #144]	; (8003b40 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8003aae:	401a      	ands	r2, r3
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a1f      	ldr	r2, [pc, #124]	; (8003b3c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d121      	bne.n	8003b06 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	4a1f      	ldr	r2, [pc, #124]	; (8003b44 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003ac6:	401a      	ands	r2, r3
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003acc:	051b      	lsls	r3, r3, #20
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4a1c      	ldr	r2, [pc, #112]	; (8003b48 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8003ad6:	401a      	ands	r2, r3
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4a1a      	ldr	r2, [pc, #104]	; (8003b4c <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8003ae4:	401a      	ands	r2, r3
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	4313      	orrs	r3, r2
 8003aec:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a12      	ldr	r2, [pc, #72]	; (8003b3c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d106      	bne.n	8003b06 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4a15      	ldr	r2, [pc, #84]	; (8003b50 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8003afc:	401a      	ands	r2, r3
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	223c      	movs	r2, #60	; 0x3c
 8003b12:	2100      	movs	r1, #0
 8003b14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	0018      	movs	r0, r3
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	b004      	add	sp, #16
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	fffffcff 	.word	0xfffffcff
 8003b24:	fffffbff 	.word	0xfffffbff
 8003b28:	fffff7ff 	.word	0xfffff7ff
 8003b2c:	ffffefff 	.word	0xffffefff
 8003b30:	ffffdfff 	.word	0xffffdfff
 8003b34:	ffffbfff 	.word	0xffffbfff
 8003b38:	fff0ffff 	.word	0xfff0ffff
 8003b3c:	40012c00 	.word	0x40012c00
 8003b40:	efffffff 	.word	0xefffffff
 8003b44:	ff0fffff 	.word	0xff0fffff
 8003b48:	feffffff 	.word	0xfeffffff
 8003b4c:	fdffffff 	.word	0xfdffffff
 8003b50:	dfffffff 	.word	0xdfffffff

08003b54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b5c:	46c0      	nop			; (mov r8, r8)
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	b002      	add	sp, #8
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b6c:	46c0      	nop			; (mov r8, r8)
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	b002      	add	sp, #8
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b7c:	46c0      	nop			; (mov r8, r8)
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	b002      	add	sp, #8
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e046      	b.n	8003c24 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2288      	movs	r2, #136	; 0x88
 8003b9a:	589b      	ldr	r3, [r3, r2]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d107      	bne.n	8003bb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2284      	movs	r2, #132	; 0x84
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	0018      	movs	r0, r3
 8003bac:	f7fd fa66 	bl	800107c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2288      	movs	r2, #136	; 0x88
 8003bb4:	2124      	movs	r1, #36	; 0x24
 8003bb6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	438a      	bics	r2, r1
 8003bc6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f000 f830 	bl	8003c30 <UART_SetConfig>
 8003bd0:	0003      	movs	r3, r0
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d101      	bne.n	8003bda <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e024      	b.n	8003c24 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	0018      	movs	r0, r3
 8003be6:	f000 fae1 	bl	80041ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	490d      	ldr	r1, [pc, #52]	; (8003c2c <HAL_UART_Init+0xa8>)
 8003bf6:	400a      	ands	r2, r1
 8003bf8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	212a      	movs	r1, #42	; 0x2a
 8003c06:	438a      	bics	r2, r1
 8003c08:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2101      	movs	r1, #1
 8003c16:	430a      	orrs	r2, r1
 8003c18:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	f000 fb79 	bl	8004314 <UART_CheckIdleState>
 8003c22:	0003      	movs	r3, r0
}
 8003c24:	0018      	movs	r0, r3
 8003c26:	46bd      	mov	sp, r7
 8003c28:	b002      	add	sp, #8
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	ffffb7ff 	.word	0xffffb7ff

08003c30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c30:	b5b0      	push	{r4, r5, r7, lr}
 8003c32:	b090      	sub	sp, #64	; 0x40
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c38:	231a      	movs	r3, #26
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	189b      	adds	r3, r3, r2
 8003c3e:	19db      	adds	r3, r3, r7
 8003c40:	2200      	movs	r2, #0
 8003c42:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	431a      	orrs	r2, r3
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4aaf      	ldr	r2, [pc, #700]	; (8003f20 <UART_SetConfig+0x2f0>)
 8003c64:	4013      	ands	r3, r2
 8003c66:	0019      	movs	r1, r3
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c6e:	430b      	orrs	r3, r1
 8003c70:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	4aaa      	ldr	r2, [pc, #680]	; (8003f24 <UART_SetConfig+0x2f4>)
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	68d9      	ldr	r1, [r3, #12]
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	0003      	movs	r3, r0
 8003c88:	430b      	orrs	r3, r1
 8003c8a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4aa4      	ldr	r2, [pc, #656]	; (8003f28 <UART_SetConfig+0x2f8>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d004      	beq.n	8003ca6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	4a9f      	ldr	r2, [pc, #636]	; (8003f2c <UART_SetConfig+0x2fc>)
 8003cae:	4013      	ands	r3, r2
 8003cb0:	0019      	movs	r1, r3
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	220f      	movs	r2, #15
 8003cc4:	4393      	bics	r3, r2
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	0003      	movs	r3, r0
 8003cd2:	430b      	orrs	r3, r1
 8003cd4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a95      	ldr	r2, [pc, #596]	; (8003f30 <UART_SetConfig+0x300>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d131      	bne.n	8003d44 <UART_SetConfig+0x114>
 8003ce0:	4b94      	ldr	r3, [pc, #592]	; (8003f34 <UART_SetConfig+0x304>)
 8003ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce4:	2203      	movs	r2, #3
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	2b03      	cmp	r3, #3
 8003cea:	d01d      	beq.n	8003d28 <UART_SetConfig+0xf8>
 8003cec:	d823      	bhi.n	8003d36 <UART_SetConfig+0x106>
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d00c      	beq.n	8003d0c <UART_SetConfig+0xdc>
 8003cf2:	d820      	bhi.n	8003d36 <UART_SetConfig+0x106>
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d002      	beq.n	8003cfe <UART_SetConfig+0xce>
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d00e      	beq.n	8003d1a <UART_SetConfig+0xea>
 8003cfc:	e01b      	b.n	8003d36 <UART_SetConfig+0x106>
 8003cfe:	231b      	movs	r3, #27
 8003d00:	2220      	movs	r2, #32
 8003d02:	189b      	adds	r3, r3, r2
 8003d04:	19db      	adds	r3, r3, r7
 8003d06:	2200      	movs	r2, #0
 8003d08:	701a      	strb	r2, [r3, #0]
 8003d0a:	e0b4      	b.n	8003e76 <UART_SetConfig+0x246>
 8003d0c:	231b      	movs	r3, #27
 8003d0e:	2220      	movs	r2, #32
 8003d10:	189b      	adds	r3, r3, r2
 8003d12:	19db      	adds	r3, r3, r7
 8003d14:	2202      	movs	r2, #2
 8003d16:	701a      	strb	r2, [r3, #0]
 8003d18:	e0ad      	b.n	8003e76 <UART_SetConfig+0x246>
 8003d1a:	231b      	movs	r3, #27
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	189b      	adds	r3, r3, r2
 8003d20:	19db      	adds	r3, r3, r7
 8003d22:	2204      	movs	r2, #4
 8003d24:	701a      	strb	r2, [r3, #0]
 8003d26:	e0a6      	b.n	8003e76 <UART_SetConfig+0x246>
 8003d28:	231b      	movs	r3, #27
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	189b      	adds	r3, r3, r2
 8003d2e:	19db      	adds	r3, r3, r7
 8003d30:	2208      	movs	r2, #8
 8003d32:	701a      	strb	r2, [r3, #0]
 8003d34:	e09f      	b.n	8003e76 <UART_SetConfig+0x246>
 8003d36:	231b      	movs	r3, #27
 8003d38:	2220      	movs	r2, #32
 8003d3a:	189b      	adds	r3, r3, r2
 8003d3c:	19db      	adds	r3, r3, r7
 8003d3e:	2210      	movs	r2, #16
 8003d40:	701a      	strb	r2, [r3, #0]
 8003d42:	e098      	b.n	8003e76 <UART_SetConfig+0x246>
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a7b      	ldr	r2, [pc, #492]	; (8003f38 <UART_SetConfig+0x308>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d131      	bne.n	8003db2 <UART_SetConfig+0x182>
 8003d4e:	4b79      	ldr	r3, [pc, #484]	; (8003f34 <UART_SetConfig+0x304>)
 8003d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d52:	220c      	movs	r2, #12
 8003d54:	4013      	ands	r3, r2
 8003d56:	2b0c      	cmp	r3, #12
 8003d58:	d01d      	beq.n	8003d96 <UART_SetConfig+0x166>
 8003d5a:	d823      	bhi.n	8003da4 <UART_SetConfig+0x174>
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	d00c      	beq.n	8003d7a <UART_SetConfig+0x14a>
 8003d60:	d820      	bhi.n	8003da4 <UART_SetConfig+0x174>
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <UART_SetConfig+0x13c>
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d00e      	beq.n	8003d88 <UART_SetConfig+0x158>
 8003d6a:	e01b      	b.n	8003da4 <UART_SetConfig+0x174>
 8003d6c:	231b      	movs	r3, #27
 8003d6e:	2220      	movs	r2, #32
 8003d70:	189b      	adds	r3, r3, r2
 8003d72:	19db      	adds	r3, r3, r7
 8003d74:	2200      	movs	r2, #0
 8003d76:	701a      	strb	r2, [r3, #0]
 8003d78:	e07d      	b.n	8003e76 <UART_SetConfig+0x246>
 8003d7a:	231b      	movs	r3, #27
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	189b      	adds	r3, r3, r2
 8003d80:	19db      	adds	r3, r3, r7
 8003d82:	2202      	movs	r2, #2
 8003d84:	701a      	strb	r2, [r3, #0]
 8003d86:	e076      	b.n	8003e76 <UART_SetConfig+0x246>
 8003d88:	231b      	movs	r3, #27
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	189b      	adds	r3, r3, r2
 8003d8e:	19db      	adds	r3, r3, r7
 8003d90:	2204      	movs	r2, #4
 8003d92:	701a      	strb	r2, [r3, #0]
 8003d94:	e06f      	b.n	8003e76 <UART_SetConfig+0x246>
 8003d96:	231b      	movs	r3, #27
 8003d98:	2220      	movs	r2, #32
 8003d9a:	189b      	adds	r3, r3, r2
 8003d9c:	19db      	adds	r3, r3, r7
 8003d9e:	2208      	movs	r2, #8
 8003da0:	701a      	strb	r2, [r3, #0]
 8003da2:	e068      	b.n	8003e76 <UART_SetConfig+0x246>
 8003da4:	231b      	movs	r3, #27
 8003da6:	2220      	movs	r2, #32
 8003da8:	189b      	adds	r3, r3, r2
 8003daa:	19db      	adds	r3, r3, r7
 8003dac:	2210      	movs	r2, #16
 8003dae:	701a      	strb	r2, [r3, #0]
 8003db0:	e061      	b.n	8003e76 <UART_SetConfig+0x246>
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a61      	ldr	r2, [pc, #388]	; (8003f3c <UART_SetConfig+0x30c>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d106      	bne.n	8003dca <UART_SetConfig+0x19a>
 8003dbc:	231b      	movs	r3, #27
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	189b      	adds	r3, r3, r2
 8003dc2:	19db      	adds	r3, r3, r7
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	701a      	strb	r2, [r3, #0]
 8003dc8:	e055      	b.n	8003e76 <UART_SetConfig+0x246>
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a5c      	ldr	r2, [pc, #368]	; (8003f40 <UART_SetConfig+0x310>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d106      	bne.n	8003de2 <UART_SetConfig+0x1b2>
 8003dd4:	231b      	movs	r3, #27
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	189b      	adds	r3, r3, r2
 8003dda:	19db      	adds	r3, r3, r7
 8003ddc:	2200      	movs	r2, #0
 8003dde:	701a      	strb	r2, [r3, #0]
 8003de0:	e049      	b.n	8003e76 <UART_SetConfig+0x246>
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a50      	ldr	r2, [pc, #320]	; (8003f28 <UART_SetConfig+0x2f8>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d13e      	bne.n	8003e6a <UART_SetConfig+0x23a>
 8003dec:	4b51      	ldr	r3, [pc, #324]	; (8003f34 <UART_SetConfig+0x304>)
 8003dee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003df0:	23c0      	movs	r3, #192	; 0xc0
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	4013      	ands	r3, r2
 8003df6:	22c0      	movs	r2, #192	; 0xc0
 8003df8:	0112      	lsls	r2, r2, #4
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d027      	beq.n	8003e4e <UART_SetConfig+0x21e>
 8003dfe:	22c0      	movs	r2, #192	; 0xc0
 8003e00:	0112      	lsls	r2, r2, #4
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d82a      	bhi.n	8003e5c <UART_SetConfig+0x22c>
 8003e06:	2280      	movs	r2, #128	; 0x80
 8003e08:	0112      	lsls	r2, r2, #4
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d011      	beq.n	8003e32 <UART_SetConfig+0x202>
 8003e0e:	2280      	movs	r2, #128	; 0x80
 8003e10:	0112      	lsls	r2, r2, #4
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d822      	bhi.n	8003e5c <UART_SetConfig+0x22c>
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d004      	beq.n	8003e24 <UART_SetConfig+0x1f4>
 8003e1a:	2280      	movs	r2, #128	; 0x80
 8003e1c:	00d2      	lsls	r2, r2, #3
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d00e      	beq.n	8003e40 <UART_SetConfig+0x210>
 8003e22:	e01b      	b.n	8003e5c <UART_SetConfig+0x22c>
 8003e24:	231b      	movs	r3, #27
 8003e26:	2220      	movs	r2, #32
 8003e28:	189b      	adds	r3, r3, r2
 8003e2a:	19db      	adds	r3, r3, r7
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	701a      	strb	r2, [r3, #0]
 8003e30:	e021      	b.n	8003e76 <UART_SetConfig+0x246>
 8003e32:	231b      	movs	r3, #27
 8003e34:	2220      	movs	r2, #32
 8003e36:	189b      	adds	r3, r3, r2
 8003e38:	19db      	adds	r3, r3, r7
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	701a      	strb	r2, [r3, #0]
 8003e3e:	e01a      	b.n	8003e76 <UART_SetConfig+0x246>
 8003e40:	231b      	movs	r3, #27
 8003e42:	2220      	movs	r2, #32
 8003e44:	189b      	adds	r3, r3, r2
 8003e46:	19db      	adds	r3, r3, r7
 8003e48:	2204      	movs	r2, #4
 8003e4a:	701a      	strb	r2, [r3, #0]
 8003e4c:	e013      	b.n	8003e76 <UART_SetConfig+0x246>
 8003e4e:	231b      	movs	r3, #27
 8003e50:	2220      	movs	r2, #32
 8003e52:	189b      	adds	r3, r3, r2
 8003e54:	19db      	adds	r3, r3, r7
 8003e56:	2208      	movs	r2, #8
 8003e58:	701a      	strb	r2, [r3, #0]
 8003e5a:	e00c      	b.n	8003e76 <UART_SetConfig+0x246>
 8003e5c:	231b      	movs	r3, #27
 8003e5e:	2220      	movs	r2, #32
 8003e60:	189b      	adds	r3, r3, r2
 8003e62:	19db      	adds	r3, r3, r7
 8003e64:	2210      	movs	r2, #16
 8003e66:	701a      	strb	r2, [r3, #0]
 8003e68:	e005      	b.n	8003e76 <UART_SetConfig+0x246>
 8003e6a:	231b      	movs	r3, #27
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	189b      	adds	r3, r3, r2
 8003e70:	19db      	adds	r3, r3, r7
 8003e72:	2210      	movs	r2, #16
 8003e74:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a2b      	ldr	r2, [pc, #172]	; (8003f28 <UART_SetConfig+0x2f8>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d000      	beq.n	8003e82 <UART_SetConfig+0x252>
 8003e80:	e0a9      	b.n	8003fd6 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e82:	231b      	movs	r3, #27
 8003e84:	2220      	movs	r2, #32
 8003e86:	189b      	adds	r3, r3, r2
 8003e88:	19db      	adds	r3, r3, r7
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d015      	beq.n	8003ebc <UART_SetConfig+0x28c>
 8003e90:	dc18      	bgt.n	8003ec4 <UART_SetConfig+0x294>
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d00d      	beq.n	8003eb2 <UART_SetConfig+0x282>
 8003e96:	dc15      	bgt.n	8003ec4 <UART_SetConfig+0x294>
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <UART_SetConfig+0x272>
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d005      	beq.n	8003eac <UART_SetConfig+0x27c>
 8003ea0:	e010      	b.n	8003ec4 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ea2:	f7fe f9bf 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
 8003ea6:	0003      	movs	r3, r0
 8003ea8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003eaa:	e014      	b.n	8003ed6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003eac:	4b25      	ldr	r3, [pc, #148]	; (8003f44 <UART_SetConfig+0x314>)
 8003eae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003eb0:	e011      	b.n	8003ed6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eb2:	f7fe f92b 	bl	800210c <HAL_RCC_GetSysClockFreq>
 8003eb6:	0003      	movs	r3, r0
 8003eb8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003eba:	e00c      	b.n	8003ed6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ebc:	2380      	movs	r3, #128	; 0x80
 8003ebe:	021b      	lsls	r3, r3, #8
 8003ec0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ec2:	e008      	b.n	8003ed6 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003ec8:	231a      	movs	r3, #26
 8003eca:	2220      	movs	r2, #32
 8003ecc:	189b      	adds	r3, r3, r2
 8003ece:	19db      	adds	r3, r3, r7
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	701a      	strb	r2, [r3, #0]
        break;
 8003ed4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d100      	bne.n	8003ede <UART_SetConfig+0x2ae>
 8003edc:	e14b      	b.n	8004176 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ee2:	4b19      	ldr	r3, [pc, #100]	; (8003f48 <UART_SetConfig+0x318>)
 8003ee4:	0052      	lsls	r2, r2, #1
 8003ee6:	5ad3      	ldrh	r3, [r2, r3]
 8003ee8:	0019      	movs	r1, r3
 8003eea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003eec:	f7fc f90a 	bl	8000104 <__udivsi3>
 8003ef0:	0003      	movs	r3, r0
 8003ef2:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	0013      	movs	r3, r2
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	189b      	adds	r3, r3, r2
 8003efe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d305      	bcc.n	8003f10 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d91d      	bls.n	8003f4c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003f10:	231a      	movs	r3, #26
 8003f12:	2220      	movs	r2, #32
 8003f14:	189b      	adds	r3, r3, r2
 8003f16:	19db      	adds	r3, r3, r7
 8003f18:	2201      	movs	r2, #1
 8003f1a:	701a      	strb	r2, [r3, #0]
 8003f1c:	e12b      	b.n	8004176 <UART_SetConfig+0x546>
 8003f1e:	46c0      	nop			; (mov r8, r8)
 8003f20:	cfff69f3 	.word	0xcfff69f3
 8003f24:	ffffcfff 	.word	0xffffcfff
 8003f28:	40008000 	.word	0x40008000
 8003f2c:	11fff4ff 	.word	0x11fff4ff
 8003f30:	40013800 	.word	0x40013800
 8003f34:	40021000 	.word	0x40021000
 8003f38:	40004400 	.word	0x40004400
 8003f3c:	40004800 	.word	0x40004800
 8003f40:	40004c00 	.word	0x40004c00
 8003f44:	00f42400 	.word	0x00f42400
 8003f48:	08004898 	.word	0x08004898
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f4e:	61bb      	str	r3, [r7, #24]
 8003f50:	2300      	movs	r3, #0
 8003f52:	61fb      	str	r3, [r7, #28]
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f58:	4b92      	ldr	r3, [pc, #584]	; (80041a4 <UART_SetConfig+0x574>)
 8003f5a:	0052      	lsls	r2, r2, #1
 8003f5c:	5ad3      	ldrh	r3, [r2, r3]
 8003f5e:	613b      	str	r3, [r7, #16]
 8003f60:	2300      	movs	r3, #0
 8003f62:	617b      	str	r3, [r7, #20]
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	69b8      	ldr	r0, [r7, #24]
 8003f6a:	69f9      	ldr	r1, [r7, #28]
 8003f6c:	f7fc fa40 	bl	80003f0 <__aeabi_uldivmod>
 8003f70:	0002      	movs	r2, r0
 8003f72:	000b      	movs	r3, r1
 8003f74:	0e11      	lsrs	r1, r2, #24
 8003f76:	021d      	lsls	r5, r3, #8
 8003f78:	430d      	orrs	r5, r1
 8003f7a:	0214      	lsls	r4, r2, #8
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	085b      	lsrs	r3, r3, #1
 8003f82:	60bb      	str	r3, [r7, #8]
 8003f84:	2300      	movs	r3, #0
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	68b8      	ldr	r0, [r7, #8]
 8003f8a:	68f9      	ldr	r1, [r7, #12]
 8003f8c:	1900      	adds	r0, r0, r4
 8003f8e:	4169      	adcs	r1, r5
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	603b      	str	r3, [r7, #0]
 8003f96:	2300      	movs	r3, #0
 8003f98:	607b      	str	r3, [r7, #4]
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f7fc fa27 	bl	80003f0 <__aeabi_uldivmod>
 8003fa2:	0002      	movs	r2, r0
 8003fa4:	000b      	movs	r3, r1
 8003fa6:	0013      	movs	r3, r2
 8003fa8:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003faa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fac:	23c0      	movs	r3, #192	; 0xc0
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d309      	bcc.n	8003fc8 <UART_SetConfig+0x398>
 8003fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fb6:	2380      	movs	r3, #128	; 0x80
 8003fb8:	035b      	lsls	r3, r3, #13
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d204      	bcs.n	8003fc8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fc4:	60da      	str	r2, [r3, #12]
 8003fc6:	e0d6      	b.n	8004176 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003fc8:	231a      	movs	r3, #26
 8003fca:	2220      	movs	r2, #32
 8003fcc:	189b      	adds	r3, r3, r2
 8003fce:	19db      	adds	r3, r3, r7
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	701a      	strb	r2, [r3, #0]
 8003fd4:	e0cf      	b.n	8004176 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	69da      	ldr	r2, [r3, #28]
 8003fda:	2380      	movs	r3, #128	; 0x80
 8003fdc:	021b      	lsls	r3, r3, #8
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d000      	beq.n	8003fe4 <UART_SetConfig+0x3b4>
 8003fe2:	e070      	b.n	80040c6 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8003fe4:	231b      	movs	r3, #27
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	189b      	adds	r3, r3, r2
 8003fea:	19db      	adds	r3, r3, r7
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d015      	beq.n	800401e <UART_SetConfig+0x3ee>
 8003ff2:	dc18      	bgt.n	8004026 <UART_SetConfig+0x3f6>
 8003ff4:	2b04      	cmp	r3, #4
 8003ff6:	d00d      	beq.n	8004014 <UART_SetConfig+0x3e4>
 8003ff8:	dc15      	bgt.n	8004026 <UART_SetConfig+0x3f6>
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d002      	beq.n	8004004 <UART_SetConfig+0x3d4>
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d005      	beq.n	800400e <UART_SetConfig+0x3de>
 8004002:	e010      	b.n	8004026 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004004:	f7fe f90e 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
 8004008:	0003      	movs	r3, r0
 800400a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800400c:	e014      	b.n	8004038 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800400e:	4b66      	ldr	r3, [pc, #408]	; (80041a8 <UART_SetConfig+0x578>)
 8004010:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004012:	e011      	b.n	8004038 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004014:	f7fe f87a 	bl	800210c <HAL_RCC_GetSysClockFreq>
 8004018:	0003      	movs	r3, r0
 800401a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800401c:	e00c      	b.n	8004038 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800401e:	2380      	movs	r3, #128	; 0x80
 8004020:	021b      	lsls	r3, r3, #8
 8004022:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004024:	e008      	b.n	8004038 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004026:	2300      	movs	r3, #0
 8004028:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800402a:	231a      	movs	r3, #26
 800402c:	2220      	movs	r2, #32
 800402e:	189b      	adds	r3, r3, r2
 8004030:	19db      	adds	r3, r3, r7
 8004032:	2201      	movs	r2, #1
 8004034:	701a      	strb	r2, [r3, #0]
        break;
 8004036:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800403a:	2b00      	cmp	r3, #0
 800403c:	d100      	bne.n	8004040 <UART_SetConfig+0x410>
 800403e:	e09a      	b.n	8004176 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004042:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004044:	4b57      	ldr	r3, [pc, #348]	; (80041a4 <UART_SetConfig+0x574>)
 8004046:	0052      	lsls	r2, r2, #1
 8004048:	5ad3      	ldrh	r3, [r2, r3]
 800404a:	0019      	movs	r1, r3
 800404c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800404e:	f7fc f859 	bl	8000104 <__udivsi3>
 8004052:	0003      	movs	r3, r0
 8004054:	005a      	lsls	r2, r3, #1
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	085b      	lsrs	r3, r3, #1
 800405c:	18d2      	adds	r2, r2, r3
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	0019      	movs	r1, r3
 8004064:	0010      	movs	r0, r2
 8004066:	f7fc f84d 	bl	8000104 <__udivsi3>
 800406a:	0003      	movs	r3, r0
 800406c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800406e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004070:	2b0f      	cmp	r3, #15
 8004072:	d921      	bls.n	80040b8 <UART_SetConfig+0x488>
 8004074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004076:	2380      	movs	r3, #128	; 0x80
 8004078:	025b      	lsls	r3, r3, #9
 800407a:	429a      	cmp	r2, r3
 800407c:	d21c      	bcs.n	80040b8 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800407e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004080:	b29a      	uxth	r2, r3
 8004082:	200e      	movs	r0, #14
 8004084:	2420      	movs	r4, #32
 8004086:	1903      	adds	r3, r0, r4
 8004088:	19db      	adds	r3, r3, r7
 800408a:	210f      	movs	r1, #15
 800408c:	438a      	bics	r2, r1
 800408e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004092:	085b      	lsrs	r3, r3, #1
 8004094:	b29b      	uxth	r3, r3
 8004096:	2207      	movs	r2, #7
 8004098:	4013      	ands	r3, r2
 800409a:	b299      	uxth	r1, r3
 800409c:	1903      	adds	r3, r0, r4
 800409e:	19db      	adds	r3, r3, r7
 80040a0:	1902      	adds	r2, r0, r4
 80040a2:	19d2      	adds	r2, r2, r7
 80040a4:	8812      	ldrh	r2, [r2, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	1902      	adds	r2, r0, r4
 80040b0:	19d2      	adds	r2, r2, r7
 80040b2:	8812      	ldrh	r2, [r2, #0]
 80040b4:	60da      	str	r2, [r3, #12]
 80040b6:	e05e      	b.n	8004176 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80040b8:	231a      	movs	r3, #26
 80040ba:	2220      	movs	r2, #32
 80040bc:	189b      	adds	r3, r3, r2
 80040be:	19db      	adds	r3, r3, r7
 80040c0:	2201      	movs	r2, #1
 80040c2:	701a      	strb	r2, [r3, #0]
 80040c4:	e057      	b.n	8004176 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040c6:	231b      	movs	r3, #27
 80040c8:	2220      	movs	r2, #32
 80040ca:	189b      	adds	r3, r3, r2
 80040cc:	19db      	adds	r3, r3, r7
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b08      	cmp	r3, #8
 80040d2:	d015      	beq.n	8004100 <UART_SetConfig+0x4d0>
 80040d4:	dc18      	bgt.n	8004108 <UART_SetConfig+0x4d8>
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	d00d      	beq.n	80040f6 <UART_SetConfig+0x4c6>
 80040da:	dc15      	bgt.n	8004108 <UART_SetConfig+0x4d8>
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <UART_SetConfig+0x4b6>
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d005      	beq.n	80040f0 <UART_SetConfig+0x4c0>
 80040e4:	e010      	b.n	8004108 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040e6:	f7fe f89d 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
 80040ea:	0003      	movs	r3, r0
 80040ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040ee:	e014      	b.n	800411a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040f0:	4b2d      	ldr	r3, [pc, #180]	; (80041a8 <UART_SetConfig+0x578>)
 80040f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040f4:	e011      	b.n	800411a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040f6:	f7fe f809 	bl	800210c <HAL_RCC_GetSysClockFreq>
 80040fa:	0003      	movs	r3, r0
 80040fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040fe:	e00c      	b.n	800411a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004100:	2380      	movs	r3, #128	; 0x80
 8004102:	021b      	lsls	r3, r3, #8
 8004104:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004106:	e008      	b.n	800411a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800410c:	231a      	movs	r3, #26
 800410e:	2220      	movs	r2, #32
 8004110:	189b      	adds	r3, r3, r2
 8004112:	19db      	adds	r3, r3, r7
 8004114:	2201      	movs	r2, #1
 8004116:	701a      	strb	r2, [r3, #0]
        break;
 8004118:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800411a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800411c:	2b00      	cmp	r3, #0
 800411e:	d02a      	beq.n	8004176 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004124:	4b1f      	ldr	r3, [pc, #124]	; (80041a4 <UART_SetConfig+0x574>)
 8004126:	0052      	lsls	r2, r2, #1
 8004128:	5ad3      	ldrh	r3, [r2, r3]
 800412a:	0019      	movs	r1, r3
 800412c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800412e:	f7fb ffe9 	bl	8000104 <__udivsi3>
 8004132:	0003      	movs	r3, r0
 8004134:	001a      	movs	r2, r3
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	085b      	lsrs	r3, r3, #1
 800413c:	18d2      	adds	r2, r2, r3
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	0019      	movs	r1, r3
 8004144:	0010      	movs	r0, r2
 8004146:	f7fb ffdd 	bl	8000104 <__udivsi3>
 800414a:	0003      	movs	r3, r0
 800414c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800414e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004150:	2b0f      	cmp	r3, #15
 8004152:	d90a      	bls.n	800416a <UART_SetConfig+0x53a>
 8004154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004156:	2380      	movs	r3, #128	; 0x80
 8004158:	025b      	lsls	r3, r3, #9
 800415a:	429a      	cmp	r2, r3
 800415c:	d205      	bcs.n	800416a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800415e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004160:	b29a      	uxth	r2, r3
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	60da      	str	r2, [r3, #12]
 8004168:	e005      	b.n	8004176 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800416a:	231a      	movs	r3, #26
 800416c:	2220      	movs	r2, #32
 800416e:	189b      	adds	r3, r3, r2
 8004170:	19db      	adds	r3, r3, r7
 8004172:	2201      	movs	r2, #1
 8004174:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	226a      	movs	r2, #106	; 0x6a
 800417a:	2101      	movs	r1, #1
 800417c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	2268      	movs	r2, #104	; 0x68
 8004182:	2101      	movs	r1, #1
 8004184:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	2200      	movs	r2, #0
 800418a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	2200      	movs	r2, #0
 8004190:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004192:	231a      	movs	r3, #26
 8004194:	2220      	movs	r2, #32
 8004196:	189b      	adds	r3, r3, r2
 8004198:	19db      	adds	r3, r3, r7
 800419a:	781b      	ldrb	r3, [r3, #0]
}
 800419c:	0018      	movs	r0, r3
 800419e:	46bd      	mov	sp, r7
 80041a0:	b010      	add	sp, #64	; 0x40
 80041a2:	bdb0      	pop	{r4, r5, r7, pc}
 80041a4:	08004898 	.word	0x08004898
 80041a8:	00f42400 	.word	0x00f42400

080041ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b8:	2201      	movs	r2, #1
 80041ba:	4013      	ands	r3, r2
 80041bc:	d00b      	beq.n	80041d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	4a4a      	ldr	r2, [pc, #296]	; (80042f0 <UART_AdvFeatureConfig+0x144>)
 80041c6:	4013      	ands	r3, r2
 80041c8:	0019      	movs	r1, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041da:	2202      	movs	r2, #2
 80041dc:	4013      	ands	r3, r2
 80041de:	d00b      	beq.n	80041f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	4a43      	ldr	r2, [pc, #268]	; (80042f4 <UART_AdvFeatureConfig+0x148>)
 80041e8:	4013      	ands	r3, r2
 80041ea:	0019      	movs	r1, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fc:	2204      	movs	r2, #4
 80041fe:	4013      	ands	r3, r2
 8004200:	d00b      	beq.n	800421a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	4a3b      	ldr	r2, [pc, #236]	; (80042f8 <UART_AdvFeatureConfig+0x14c>)
 800420a:	4013      	ands	r3, r2
 800420c:	0019      	movs	r1, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421e:	2208      	movs	r2, #8
 8004220:	4013      	ands	r3, r2
 8004222:	d00b      	beq.n	800423c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	4a34      	ldr	r2, [pc, #208]	; (80042fc <UART_AdvFeatureConfig+0x150>)
 800422c:	4013      	ands	r3, r2
 800422e:	0019      	movs	r1, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004240:	2210      	movs	r2, #16
 8004242:	4013      	ands	r3, r2
 8004244:	d00b      	beq.n	800425e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	4a2c      	ldr	r2, [pc, #176]	; (8004300 <UART_AdvFeatureConfig+0x154>)
 800424e:	4013      	ands	r3, r2
 8004250:	0019      	movs	r1, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004262:	2220      	movs	r2, #32
 8004264:	4013      	ands	r3, r2
 8004266:	d00b      	beq.n	8004280 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	4a25      	ldr	r2, [pc, #148]	; (8004304 <UART_AdvFeatureConfig+0x158>)
 8004270:	4013      	ands	r3, r2
 8004272:	0019      	movs	r1, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004284:	2240      	movs	r2, #64	; 0x40
 8004286:	4013      	ands	r3, r2
 8004288:	d01d      	beq.n	80042c6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	4a1d      	ldr	r2, [pc, #116]	; (8004308 <UART_AdvFeatureConfig+0x15c>)
 8004292:	4013      	ands	r3, r2
 8004294:	0019      	movs	r1, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042a6:	2380      	movs	r3, #128	; 0x80
 80042a8:	035b      	lsls	r3, r3, #13
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d10b      	bne.n	80042c6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	4a15      	ldr	r2, [pc, #84]	; (800430c <UART_AdvFeatureConfig+0x160>)
 80042b6:	4013      	ands	r3, r2
 80042b8:	0019      	movs	r1, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ca:	2280      	movs	r2, #128	; 0x80
 80042cc:	4013      	ands	r3, r2
 80042ce:	d00b      	beq.n	80042e8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	4a0e      	ldr	r2, [pc, #56]	; (8004310 <UART_AdvFeatureConfig+0x164>)
 80042d8:	4013      	ands	r3, r2
 80042da:	0019      	movs	r1, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	605a      	str	r2, [r3, #4]
  }
}
 80042e8:	46c0      	nop			; (mov r8, r8)
 80042ea:	46bd      	mov	sp, r7
 80042ec:	b002      	add	sp, #8
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	fffdffff 	.word	0xfffdffff
 80042f4:	fffeffff 	.word	0xfffeffff
 80042f8:	fffbffff 	.word	0xfffbffff
 80042fc:	ffff7fff 	.word	0xffff7fff
 8004300:	ffffefff 	.word	0xffffefff
 8004304:	ffffdfff 	.word	0xffffdfff
 8004308:	ffefffff 	.word	0xffefffff
 800430c:	ff9fffff 	.word	0xff9fffff
 8004310:	fff7ffff 	.word	0xfff7ffff

08004314 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af02      	add	r7, sp, #8
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2290      	movs	r2, #144	; 0x90
 8004320:	2100      	movs	r1, #0
 8004322:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004324:	f7fc ffda 	bl	80012dc <HAL_GetTick>
 8004328:	0003      	movs	r3, r0
 800432a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2208      	movs	r2, #8
 8004334:	4013      	ands	r3, r2
 8004336:	2b08      	cmp	r3, #8
 8004338:	d10c      	bne.n	8004354 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2280      	movs	r2, #128	; 0x80
 800433e:	0391      	lsls	r1, r2, #14
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	4a1a      	ldr	r2, [pc, #104]	; (80043ac <UART_CheckIdleState+0x98>)
 8004344:	9200      	str	r2, [sp, #0]
 8004346:	2200      	movs	r2, #0
 8004348:	f000 f832 	bl	80043b0 <UART_WaitOnFlagUntilTimeout>
 800434c:	1e03      	subs	r3, r0, #0
 800434e:	d001      	beq.n	8004354 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e026      	b.n	80043a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2204      	movs	r2, #4
 800435c:	4013      	ands	r3, r2
 800435e:	2b04      	cmp	r3, #4
 8004360:	d10c      	bne.n	800437c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2280      	movs	r2, #128	; 0x80
 8004366:	03d1      	lsls	r1, r2, #15
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	4a10      	ldr	r2, [pc, #64]	; (80043ac <UART_CheckIdleState+0x98>)
 800436c:	9200      	str	r2, [sp, #0]
 800436e:	2200      	movs	r2, #0
 8004370:	f000 f81e 	bl	80043b0 <UART_WaitOnFlagUntilTimeout>
 8004374:	1e03      	subs	r3, r0, #0
 8004376:	d001      	beq.n	800437c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e012      	b.n	80043a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2288      	movs	r2, #136	; 0x88
 8004380:	2120      	movs	r1, #32
 8004382:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	228c      	movs	r2, #140	; 0x8c
 8004388:	2120      	movs	r1, #32
 800438a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2284      	movs	r2, #132	; 0x84
 800439c:	2100      	movs	r1, #0
 800439e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	0018      	movs	r0, r3
 80043a4:	46bd      	mov	sp, r7
 80043a6:	b004      	add	sp, #16
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	46c0      	nop			; (mov r8, r8)
 80043ac:	01ffffff 	.word	0x01ffffff

080043b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b094      	sub	sp, #80	; 0x50
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	603b      	str	r3, [r7, #0]
 80043bc:	1dfb      	adds	r3, r7, #7
 80043be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043c0:	e0a7      	b.n	8004512 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043c4:	3301      	adds	r3, #1
 80043c6:	d100      	bne.n	80043ca <UART_WaitOnFlagUntilTimeout+0x1a>
 80043c8:	e0a3      	b.n	8004512 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ca:	f7fc ff87 	bl	80012dc <HAL_GetTick>
 80043ce:	0002      	movs	r2, r0
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d302      	bcc.n	80043e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80043da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d13f      	bne.n	8004460 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043e0:	f3ef 8310 	mrs	r3, PRIMASK
 80043e4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80043e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80043e8:	647b      	str	r3, [r7, #68]	; 0x44
 80043ea:	2301      	movs	r3, #1
 80043ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f0:	f383 8810 	msr	PRIMASK, r3
}
 80043f4:	46c0      	nop			; (mov r8, r8)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	494e      	ldr	r1, [pc, #312]	; (800453c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004402:	400a      	ands	r2, r1
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004408:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800440a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440c:	f383 8810 	msr	PRIMASK, r3
}
 8004410:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004412:	f3ef 8310 	mrs	r3, PRIMASK
 8004416:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800441a:	643b      	str	r3, [r7, #64]	; 0x40
 800441c:	2301      	movs	r3, #1
 800441e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004422:	f383 8810 	msr	PRIMASK, r3
}
 8004426:	46c0      	nop			; (mov r8, r8)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2101      	movs	r1, #1
 8004434:	438a      	bics	r2, r1
 8004436:	609a      	str	r2, [r3, #8]
 8004438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800443a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800443c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800443e:	f383 8810 	msr	PRIMASK, r3
}
 8004442:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2288      	movs	r2, #136	; 0x88
 8004448:	2120      	movs	r1, #32
 800444a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	228c      	movs	r2, #140	; 0x8c
 8004450:	2120      	movs	r1, #32
 8004452:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2284      	movs	r2, #132	; 0x84
 8004458:	2100      	movs	r1, #0
 800445a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e069      	b.n	8004534 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2204      	movs	r2, #4
 8004468:	4013      	ands	r3, r2
 800446a:	d052      	beq.n	8004512 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	69da      	ldr	r2, [r3, #28]
 8004472:	2380      	movs	r3, #128	; 0x80
 8004474:	011b      	lsls	r3, r3, #4
 8004476:	401a      	ands	r2, r3
 8004478:	2380      	movs	r3, #128	; 0x80
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	429a      	cmp	r2, r3
 800447e:	d148      	bne.n	8004512 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2280      	movs	r2, #128	; 0x80
 8004486:	0112      	lsls	r2, r2, #4
 8004488:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800448a:	f3ef 8310 	mrs	r3, PRIMASK
 800448e:	613b      	str	r3, [r7, #16]
  return(result);
 8004490:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004492:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004494:	2301      	movs	r3, #1
 8004496:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f383 8810 	msr	PRIMASK, r3
}
 800449e:	46c0      	nop			; (mov r8, r8)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4924      	ldr	r1, [pc, #144]	; (800453c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80044ac:	400a      	ands	r2, r1
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	f383 8810 	msr	PRIMASK, r3
}
 80044ba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044bc:	f3ef 8310 	mrs	r3, PRIMASK
 80044c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80044c2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80044c6:	2301      	movs	r3, #1
 80044c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	f383 8810 	msr	PRIMASK, r3
}
 80044d0:	46c0      	nop			; (mov r8, r8)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2101      	movs	r1, #1
 80044de:	438a      	bics	r2, r1
 80044e0:	609a      	str	r2, [r3, #8]
 80044e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	f383 8810 	msr	PRIMASK, r3
}
 80044ec:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2288      	movs	r2, #136	; 0x88
 80044f2:	2120      	movs	r1, #32
 80044f4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	228c      	movs	r2, #140	; 0x8c
 80044fa:	2120      	movs	r1, #32
 80044fc:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2290      	movs	r2, #144	; 0x90
 8004502:	2120      	movs	r1, #32
 8004504:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2284      	movs	r2, #132	; 0x84
 800450a:	2100      	movs	r1, #0
 800450c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e010      	b.n	8004534 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	4013      	ands	r3, r2
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	425a      	negs	r2, r3
 8004522:	4153      	adcs	r3, r2
 8004524:	b2db      	uxtb	r3, r3
 8004526:	001a      	movs	r2, r3
 8004528:	1dfb      	adds	r3, r7, #7
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	429a      	cmp	r2, r3
 800452e:	d100      	bne.n	8004532 <UART_WaitOnFlagUntilTimeout+0x182>
 8004530:	e747      	b.n	80043c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	0018      	movs	r0, r3
 8004536:	46bd      	mov	sp, r7
 8004538:	b014      	add	sp, #80	; 0x50
 800453a:	bd80      	pop	{r7, pc}
 800453c:	fffffe5f 	.word	0xfffffe5f

08004540 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2284      	movs	r2, #132	; 0x84
 800454c:	5c9b      	ldrb	r3, [r3, r2]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d101      	bne.n	8004556 <HAL_UARTEx_DisableFifoMode+0x16>
 8004552:	2302      	movs	r3, #2
 8004554:	e027      	b.n	80045a6 <HAL_UARTEx_DisableFifoMode+0x66>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2284      	movs	r2, #132	; 0x84
 800455a:	2101      	movs	r1, #1
 800455c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2288      	movs	r2, #136	; 0x88
 8004562:	2124      	movs	r1, #36	; 0x24
 8004564:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2101      	movs	r1, #1
 800457a:	438a      	bics	r2, r1
 800457c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	4a0b      	ldr	r2, [pc, #44]	; (80045b0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004582:	4013      	ands	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2288      	movs	r2, #136	; 0x88
 8004598:	2120      	movs	r1, #32
 800459a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2284      	movs	r2, #132	; 0x84
 80045a0:	2100      	movs	r1, #0
 80045a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	0018      	movs	r0, r3
 80045a8:	46bd      	mov	sp, r7
 80045aa:	b004      	add	sp, #16
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	46c0      	nop			; (mov r8, r8)
 80045b0:	dfffffff 	.word	0xdfffffff

080045b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2284      	movs	r2, #132	; 0x84
 80045c2:	5c9b      	ldrb	r3, [r3, r2]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d101      	bne.n	80045cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80045c8:	2302      	movs	r3, #2
 80045ca:	e02e      	b.n	800462a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2284      	movs	r2, #132	; 0x84
 80045d0:	2101      	movs	r1, #1
 80045d2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2288      	movs	r2, #136	; 0x88
 80045d8:	2124      	movs	r1, #36	; 0x24
 80045da:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2101      	movs	r1, #1
 80045f0:	438a      	bics	r2, r1
 80045f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	08d9      	lsrs	r1, r3, #3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	0018      	movs	r0, r3
 800460c:	f000 f854 	bl	80046b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2288      	movs	r2, #136	; 0x88
 800461c:	2120      	movs	r1, #32
 800461e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2284      	movs	r2, #132	; 0x84
 8004624:	2100      	movs	r1, #0
 8004626:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	0018      	movs	r0, r3
 800462c:	46bd      	mov	sp, r7
 800462e:	b004      	add	sp, #16
 8004630:	bd80      	pop	{r7, pc}
	...

08004634 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2284      	movs	r2, #132	; 0x84
 8004642:	5c9b      	ldrb	r3, [r3, r2]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d101      	bne.n	800464c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004648:	2302      	movs	r3, #2
 800464a:	e02f      	b.n	80046ac <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2284      	movs	r2, #132	; 0x84
 8004650:	2101      	movs	r1, #1
 8004652:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2288      	movs	r2, #136	; 0x88
 8004658:	2124      	movs	r1, #36	; 0x24
 800465a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2101      	movs	r1, #1
 8004670:	438a      	bics	r2, r1
 8004672:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	4a0e      	ldr	r2, [pc, #56]	; (80046b4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800467c:	4013      	ands	r3, r2
 800467e:	0019      	movs	r1, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	0018      	movs	r0, r3
 800468e:	f000 f813 	bl	80046b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2288      	movs	r2, #136	; 0x88
 800469e:	2120      	movs	r1, #32
 80046a0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2284      	movs	r2, #132	; 0x84
 80046a6:	2100      	movs	r1, #0
 80046a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	0018      	movs	r0, r3
 80046ae:	46bd      	mov	sp, r7
 80046b0:	b004      	add	sp, #16
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	f1ffffff 	.word	0xf1ffffff

080046b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80046b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d108      	bne.n	80046da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	226a      	movs	r2, #106	; 0x6a
 80046cc:	2101      	movs	r1, #1
 80046ce:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2268      	movs	r2, #104	; 0x68
 80046d4:	2101      	movs	r1, #1
 80046d6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80046d8:	e043      	b.n	8004762 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80046da:	260f      	movs	r6, #15
 80046dc:	19bb      	adds	r3, r7, r6
 80046de:	2208      	movs	r2, #8
 80046e0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80046e2:	200e      	movs	r0, #14
 80046e4:	183b      	adds	r3, r7, r0
 80046e6:	2208      	movs	r2, #8
 80046e8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	0e5b      	lsrs	r3, r3, #25
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	240d      	movs	r4, #13
 80046f6:	193b      	adds	r3, r7, r4
 80046f8:	2107      	movs	r1, #7
 80046fa:	400a      	ands	r2, r1
 80046fc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	0f5b      	lsrs	r3, r3, #29
 8004706:	b2da      	uxtb	r2, r3
 8004708:	250c      	movs	r5, #12
 800470a:	197b      	adds	r3, r7, r5
 800470c:	2107      	movs	r1, #7
 800470e:	400a      	ands	r2, r1
 8004710:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004712:	183b      	adds	r3, r7, r0
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	197a      	adds	r2, r7, r5
 8004718:	7812      	ldrb	r2, [r2, #0]
 800471a:	4914      	ldr	r1, [pc, #80]	; (800476c <UARTEx_SetNbDataToProcess+0xb4>)
 800471c:	5c8a      	ldrb	r2, [r1, r2]
 800471e:	435a      	muls	r2, r3
 8004720:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004722:	197b      	adds	r3, r7, r5
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	4a12      	ldr	r2, [pc, #72]	; (8004770 <UARTEx_SetNbDataToProcess+0xb8>)
 8004728:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800472a:	0019      	movs	r1, r3
 800472c:	f7fb fd74 	bl	8000218 <__divsi3>
 8004730:	0003      	movs	r3, r0
 8004732:	b299      	uxth	r1, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	226a      	movs	r2, #106	; 0x6a
 8004738:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800473a:	19bb      	adds	r3, r7, r6
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	193a      	adds	r2, r7, r4
 8004740:	7812      	ldrb	r2, [r2, #0]
 8004742:	490a      	ldr	r1, [pc, #40]	; (800476c <UARTEx_SetNbDataToProcess+0xb4>)
 8004744:	5c8a      	ldrb	r2, [r1, r2]
 8004746:	435a      	muls	r2, r3
 8004748:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800474a:	193b      	adds	r3, r7, r4
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	4a08      	ldr	r2, [pc, #32]	; (8004770 <UARTEx_SetNbDataToProcess+0xb8>)
 8004750:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004752:	0019      	movs	r1, r3
 8004754:	f7fb fd60 	bl	8000218 <__divsi3>
 8004758:	0003      	movs	r3, r0
 800475a:	b299      	uxth	r1, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2268      	movs	r2, #104	; 0x68
 8004760:	5299      	strh	r1, [r3, r2]
}
 8004762:	46c0      	nop			; (mov r8, r8)
 8004764:	46bd      	mov	sp, r7
 8004766:	b005      	add	sp, #20
 8004768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800476a:	46c0      	nop			; (mov r8, r8)
 800476c:	080048b0 	.word	0x080048b0
 8004770:	080048b8 	.word	0x080048b8

08004774 <__libc_init_array>:
 8004774:	b570      	push	{r4, r5, r6, lr}
 8004776:	2600      	movs	r6, #0
 8004778:	4d0c      	ldr	r5, [pc, #48]	; (80047ac <__libc_init_array+0x38>)
 800477a:	4c0d      	ldr	r4, [pc, #52]	; (80047b0 <__libc_init_array+0x3c>)
 800477c:	1b64      	subs	r4, r4, r5
 800477e:	10a4      	asrs	r4, r4, #2
 8004780:	42a6      	cmp	r6, r4
 8004782:	d109      	bne.n	8004798 <__libc_init_array+0x24>
 8004784:	2600      	movs	r6, #0
 8004786:	f000 f821 	bl	80047cc <_init>
 800478a:	4d0a      	ldr	r5, [pc, #40]	; (80047b4 <__libc_init_array+0x40>)
 800478c:	4c0a      	ldr	r4, [pc, #40]	; (80047b8 <__libc_init_array+0x44>)
 800478e:	1b64      	subs	r4, r4, r5
 8004790:	10a4      	asrs	r4, r4, #2
 8004792:	42a6      	cmp	r6, r4
 8004794:	d105      	bne.n	80047a2 <__libc_init_array+0x2e>
 8004796:	bd70      	pop	{r4, r5, r6, pc}
 8004798:	00b3      	lsls	r3, r6, #2
 800479a:	58eb      	ldr	r3, [r5, r3]
 800479c:	4798      	blx	r3
 800479e:	3601      	adds	r6, #1
 80047a0:	e7ee      	b.n	8004780 <__libc_init_array+0xc>
 80047a2:	00b3      	lsls	r3, r6, #2
 80047a4:	58eb      	ldr	r3, [r5, r3]
 80047a6:	4798      	blx	r3
 80047a8:	3601      	adds	r6, #1
 80047aa:	e7f2      	b.n	8004792 <__libc_init_array+0x1e>
 80047ac:	080048c8 	.word	0x080048c8
 80047b0:	080048c8 	.word	0x080048c8
 80047b4:	080048c8 	.word	0x080048c8
 80047b8:	080048cc 	.word	0x080048cc

080047bc <memset>:
 80047bc:	0003      	movs	r3, r0
 80047be:	1882      	adds	r2, r0, r2
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d100      	bne.n	80047c6 <memset+0xa>
 80047c4:	4770      	bx	lr
 80047c6:	7019      	strb	r1, [r3, #0]
 80047c8:	3301      	adds	r3, #1
 80047ca:	e7f9      	b.n	80047c0 <memset+0x4>

080047cc <_init>:
 80047cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ce:	46c0      	nop			; (mov r8, r8)
 80047d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047d2:	bc08      	pop	{r3}
 80047d4:	469e      	mov	lr, r3
 80047d6:	4770      	bx	lr

080047d8 <_fini>:
 80047d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047da:	46c0      	nop			; (mov r8, r8)
 80047dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047de:	bc08      	pop	{r3}
 80047e0:	469e      	mov	lr, r3
 80047e2:	4770      	bx	lr
