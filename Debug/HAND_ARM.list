
HAND_ARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043ec  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080044a8  080044a8  000144a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004584  08004584  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004584  08004584  00014584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800458c  0800458c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800458c  0800458c  0001458c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004590  08004590  00014590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000010  080045a4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  080045a4  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010cd3  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020da  00000000  00000000  00030d0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00032de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d58  00000000  00000000  00033bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e55  00000000  00000000  00034930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001040e  00000000  00000000  0004c785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d097  00000000  00000000  0005cb93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f9c2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032bc  00000000  00000000  000f9c7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004490 	.word	0x08004490

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08004490 	.word	0x08004490

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fcf2 	bl	8001008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f850 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 fa14 	bl	8000a54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062c:	f000 f9c4 	bl	80009b8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000630:	f000 f8a8 	bl	8000784 <MX_TIM3_Init>
  MX_TIM15_Init();
 8000634:	f000 f8fc 	bl	8000830 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  // Start timer
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000638:	4b20      	ldr	r3, [pc, #128]	; (80006bc <main+0xa0>)
 800063a:	2100      	movs	r1, #0
 800063c:	0018      	movs	r0, r3
 800063e:	f001 ffc1 	bl	80025c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000642:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <main+0xa0>)
 8000644:	2104      	movs	r1, #4
 8000646:	0018      	movs	r0, r3
 8000648:	f001 ffbc 	bl	80025c4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 800064c:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <main+0xa4>)
 800064e:	0018      	movs	r0, r3
 8000650:	f001 fefc 	bl	800244c <HAL_TIM_Base_Start_IT>
	  HAL_Delay(1000);
	  SERVOS(1, 0);
	  HAL_Delay(1000);
	  SERVOS(1, 1);
	  HAL_Delay(1000);*/
	  ESTADO_SIGUIENTE = FUN_ESTADO_INICIO();
 8000654:	f000 fac6 	bl	8000be4 <FUN_ESTADO_INICIO>
 8000658:	0003      	movs	r3, r0
 800065a:	001a      	movs	r2, r3
 800065c:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <main+0xa8>)
 800065e:	801a      	strh	r2, [r3, #0]

	  for(;;)
	  {
		//HAL_Delay(100);
	    if(ESTADO_SIGUIENTE==ESTADO_ABIERTO)
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <main+0xa8>)
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d106      	bne.n	8000676 <main+0x5a>
	    {
	      ESTADO_SIGUIENTE=FUN_ESTADO_ABIERTO();
 8000668:	f000 fad4 	bl	8000c14 <FUN_ESTADO_ABIERTO>
 800066c:	0003      	movs	r3, r0
 800066e:	001a      	movs	r2, r3
 8000670:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <main+0xa8>)
 8000672:	801a      	strh	r2, [r3, #0]
 8000674:	e7f4      	b.n	8000660 <main+0x44>
	    }
	    else if(ESTADO_SIGUIENTE==ESTADO_SEMICERRADO)
 8000676:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <main+0xa8>)
 8000678:	881b      	ldrh	r3, [r3, #0]
 800067a:	2b02      	cmp	r3, #2
 800067c:	d106      	bne.n	800068c <main+0x70>
	    {
	      ESTADO_SIGUIENTE=FUN_ESTADO_SEMICERRADO();
 800067e:	f000 faf7 	bl	8000c70 <FUN_ESTADO_SEMICERRADO>
 8000682:	0003      	movs	r3, r0
 8000684:	001a      	movs	r2, r3
 8000686:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <main+0xa8>)
 8000688:	801a      	strh	r2, [r3, #0]
 800068a:	e7e9      	b.n	8000660 <main+0x44>
	    }
	    else if(ESTADO_SIGUIENTE==ESTADO_CERRADO)
 800068c:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <main+0xa8>)
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	2b03      	cmp	r3, #3
 8000692:	d106      	bne.n	80006a2 <main+0x86>
	    {
	      ESTADO_SIGUIENTE=FUN_ESTADO_CERRADO();
 8000694:	f000 fb1a 	bl	8000ccc <FUN_ESTADO_CERRADO>
 8000698:	0003      	movs	r3, r0
 800069a:	001a      	movs	r2, r3
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <main+0xa8>)
 800069e:	801a      	strh	r2, [r3, #0]
 80006a0:	e7de      	b.n	8000660 <main+0x44>
	    }
	    else if(ESTADO_SIGUIENTE==ESTADO_INICIO)
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <main+0xa8>)
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d106      	bne.n	80006b8 <main+0x9c>
	    {
	      ESTADO_SIGUIENTE=FUN_ESTADO_INICIO();
 80006aa:	f000 fa9b 	bl	8000be4 <FUN_ESTADO_INICIO>
 80006ae:	0003      	movs	r3, r0
 80006b0:	001a      	movs	r2, r3
 80006b2:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <main+0xa8>)
 80006b4:	801a      	strh	r2, [r3, #0]
	    if(ESTADO_SIGUIENTE==ESTADO_ABIERTO)
 80006b6:	e7d3      	b.n	8000660 <main+0x44>
	    }
	    else {break;}
 80006b8:	46c0      	nop			; (mov r8, r8)
	  ESTADO_SIGUIENTE = FUN_ESTADO_INICIO();
 80006ba:	e7cb      	b.n	8000654 <main+0x38>
 80006bc:	20000080 	.word	0x20000080
 80006c0:	20000034 	.word	0x20000034
 80006c4:	2000002c 	.word	0x2000002c

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b093      	sub	sp, #76	; 0x4c
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	2410      	movs	r4, #16
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	0018      	movs	r0, r3
 80006d4:	2338      	movs	r3, #56	; 0x38
 80006d6:	001a      	movs	r2, r3
 80006d8:	2100      	movs	r1, #0
 80006da:	f003 fed1 	bl	8004480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006de:	003b      	movs	r3, r7
 80006e0:	0018      	movs	r0, r3
 80006e2:	2310      	movs	r3, #16
 80006e4:	001a      	movs	r2, r3
 80006e6:	2100      	movs	r1, #0
 80006e8:	f003 feca 	bl	8004480 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ec:	2380      	movs	r3, #128	; 0x80
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	0018      	movs	r0, r3
 80006f2:	f000 ff8b 	bl	800160c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	2202      	movs	r2, #2
 80006fa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	2280      	movs	r2, #128	; 0x80
 8000700:	0052      	lsls	r2, r2, #1
 8000702:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000704:	0021      	movs	r1, r4
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2240      	movs	r2, #64	; 0x40
 8000710:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2202      	movs	r2, #2
 8000716:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2202      	movs	r2, #2
 800071c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2200      	movs	r2, #0
 8000722:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2208      	movs	r2, #8
 8000728:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2280      	movs	r2, #128	; 0x80
 800072e:	0292      	lsls	r2, r2, #10
 8000730:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2280      	movs	r2, #128	; 0x80
 8000736:	0492      	lsls	r2, r2, #18
 8000738:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2280      	movs	r2, #128	; 0x80
 800073e:	0592      	lsls	r2, r2, #22
 8000740:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000742:	187b      	adds	r3, r7, r1
 8000744:	0018      	movs	r0, r3
 8000746:	f000 ffad 	bl	80016a4 <HAL_RCC_OscConfig>
 800074a:	1e03      	subs	r3, r0, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800074e:	f000 faeb 	bl	8000d28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000752:	003b      	movs	r3, r7
 8000754:	2207      	movs	r2, #7
 8000756:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000758:	003b      	movs	r3, r7
 800075a:	2202      	movs	r2, #2
 800075c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075e:	003b      	movs	r3, r7
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000764:	003b      	movs	r3, r7
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800076a:	003b      	movs	r3, r7
 800076c:	2102      	movs	r1, #2
 800076e:	0018      	movs	r0, r3
 8000770:	f001 fab2 	bl	8001cd8 <HAL_RCC_ClockConfig>
 8000774:	1e03      	subs	r3, r0, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000778:	f000 fad6 	bl	8000d28 <Error_Handler>
  }
}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	b013      	add	sp, #76	; 0x4c
 8000782:	bd90      	pop	{r4, r7, pc}

08000784 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b088      	sub	sp, #32
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078a:	2310      	movs	r3, #16
 800078c:	18fb      	adds	r3, r7, r3
 800078e:	0018      	movs	r0, r3
 8000790:	2310      	movs	r3, #16
 8000792:	001a      	movs	r2, r3
 8000794:	2100      	movs	r1, #0
 8000796:	f003 fe73 	bl	8004480 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	0018      	movs	r0, r3
 800079e:	230c      	movs	r3, #12
 80007a0:	001a      	movs	r2, r3
 80007a2:	2100      	movs	r1, #0
 80007a4:	f003 fe6c 	bl	8004480 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007a8:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <MX_TIM3_Init+0xa0>)
 80007aa:	4a1f      	ldr	r2, [pc, #124]	; (8000828 <MX_TIM3_Init+0xa4>)
 80007ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 80007ae:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <MX_TIM3_Init+0xa0>)
 80007b0:	221f      	movs	r2, #31
 80007b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b4:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <MX_TIM3_Init+0xa0>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80007ba:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <MX_TIM3_Init+0xa0>)
 80007bc:	4a1b      	ldr	r2, [pc, #108]	; (800082c <MX_TIM3_Init+0xa8>)
 80007be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c0:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_TIM3_Init+0xa0>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <MX_TIM3_Init+0xa0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_TIM3_Init+0xa0>)
 80007ce:	0018      	movs	r0, r3
 80007d0:	f001 fde4 	bl	800239c <HAL_TIM_Base_Init>
 80007d4:	1e03      	subs	r3, r0, #0
 80007d6:	d001      	beq.n	80007dc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80007d8:	f000 faa6 	bl	8000d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007dc:	2110      	movs	r1, #16
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	2280      	movs	r2, #128	; 0x80
 80007e2:	0152      	lsls	r2, r2, #5
 80007e4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007e6:	187a      	adds	r2, r7, r1
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_TIM3_Init+0xa0>)
 80007ea:	0011      	movs	r1, r2
 80007ec:	0018      	movs	r0, r3
 80007ee:	f002 fa05 	bl	8002bfc <HAL_TIM_ConfigClockSource>
 80007f2:	1e03      	subs	r3, r0, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80007f6:	f000 fa97 	bl	8000d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000806:	1d3a      	adds	r2, r7, #4
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_TIM3_Init+0xa0>)
 800080a:	0011      	movs	r1, r2
 800080c:	0018      	movs	r0, r3
 800080e:	f002 feef 	bl	80035f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000812:	1e03      	subs	r3, r0, #0
 8000814:	d001      	beq.n	800081a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000816:	f000 fa87 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	46bd      	mov	sp, r7
 800081e:	b008      	add	sp, #32
 8000820:	bd80      	pop	{r7, pc}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	20000034 	.word	0x20000034
 8000828:	40000400 	.word	0x40000400
 800082c:	0000270f 	.word	0x0000270f

08000830 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b09c      	sub	sp, #112	; 0x70
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000836:	2360      	movs	r3, #96	; 0x60
 8000838:	18fb      	adds	r3, r7, r3
 800083a:	0018      	movs	r0, r3
 800083c:	2310      	movs	r3, #16
 800083e:	001a      	movs	r2, r3
 8000840:	2100      	movs	r1, #0
 8000842:	f003 fe1d 	bl	8004480 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000846:	2354      	movs	r3, #84	; 0x54
 8000848:	18fb      	adds	r3, r7, r3
 800084a:	0018      	movs	r0, r3
 800084c:	230c      	movs	r3, #12
 800084e:	001a      	movs	r2, r3
 8000850:	2100      	movs	r1, #0
 8000852:	f003 fe15 	bl	8004480 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000856:	2338      	movs	r3, #56	; 0x38
 8000858:	18fb      	adds	r3, r7, r3
 800085a:	0018      	movs	r0, r3
 800085c:	231c      	movs	r3, #28
 800085e:	001a      	movs	r2, r3
 8000860:	2100      	movs	r1, #0
 8000862:	f003 fe0d 	bl	8004480 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	0018      	movs	r0, r3
 800086a:	2334      	movs	r3, #52	; 0x34
 800086c:	001a      	movs	r2, r3
 800086e:	2100      	movs	r1, #0
 8000870:	f003 fe06 	bl	8004480 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000874:	4b4d      	ldr	r3, [pc, #308]	; (80009ac <MX_TIM15_Init+0x17c>)
 8000876:	4a4e      	ldr	r2, [pc, #312]	; (80009b0 <MX_TIM15_Init+0x180>)
 8000878:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 64-1;
 800087a:	4b4c      	ldr	r3, [pc, #304]	; (80009ac <MX_TIM15_Init+0x17c>)
 800087c:	223f      	movs	r2, #63	; 0x3f
 800087e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000880:	4b4a      	ldr	r3, [pc, #296]	; (80009ac <MX_TIM15_Init+0x17c>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 8000886:	4b49      	ldr	r3, [pc, #292]	; (80009ac <MX_TIM15_Init+0x17c>)
 8000888:	4a4a      	ldr	r2, [pc, #296]	; (80009b4 <MX_TIM15_Init+0x184>)
 800088a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088c:	4b47      	ldr	r3, [pc, #284]	; (80009ac <MX_TIM15_Init+0x17c>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000892:	4b46      	ldr	r3, [pc, #280]	; (80009ac <MX_TIM15_Init+0x17c>)
 8000894:	2200      	movs	r2, #0
 8000896:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000898:	4b44      	ldr	r3, [pc, #272]	; (80009ac <MX_TIM15_Init+0x17c>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800089e:	4b43      	ldr	r3, [pc, #268]	; (80009ac <MX_TIM15_Init+0x17c>)
 80008a0:	0018      	movs	r0, r3
 80008a2:	f001 fd7b 	bl	800239c <HAL_TIM_Base_Init>
 80008a6:	1e03      	subs	r3, r0, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 80008aa:	f000 fa3d 	bl	8000d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ae:	2160      	movs	r1, #96	; 0x60
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2280      	movs	r2, #128	; 0x80
 80008b4:	0152      	lsls	r2, r2, #5
 80008b6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80008b8:	187a      	adds	r2, r7, r1
 80008ba:	4b3c      	ldr	r3, [pc, #240]	; (80009ac <MX_TIM15_Init+0x17c>)
 80008bc:	0011      	movs	r1, r2
 80008be:	0018      	movs	r0, r3
 80008c0:	f002 f99c 	bl	8002bfc <HAL_TIM_ConfigClockSource>
 80008c4:	1e03      	subs	r3, r0, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 80008c8:	f000 fa2e 	bl	8000d28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80008cc:	4b37      	ldr	r3, [pc, #220]	; (80009ac <MX_TIM15_Init+0x17c>)
 80008ce:	0018      	movs	r0, r3
 80008d0:	f001 fe18 	bl	8002504 <HAL_TIM_PWM_Init>
 80008d4:	1e03      	subs	r3, r0, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 80008d8:	f000 fa26 	bl	8000d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008dc:	2154      	movs	r1, #84	; 0x54
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80008ea:	187a      	adds	r2, r7, r1
 80008ec:	4b2f      	ldr	r3, [pc, #188]	; (80009ac <MX_TIM15_Init+0x17c>)
 80008ee:	0011      	movs	r1, r2
 80008f0:	0018      	movs	r0, r3
 80008f2:	f002 fe7d 	bl	80035f0 <HAL_TIMEx_MasterConfigSynchronization>
 80008f6:	1e03      	subs	r3, r0, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 80008fa:	f000 fa15 	bl	8000d28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008fe:	2138      	movs	r1, #56	; 0x38
 8000900:	187b      	adds	r3, r7, r1
 8000902:	2260      	movs	r2, #96	; 0x60
 8000904:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 8000906:	187b      	adds	r3, r7, r1
 8000908:	22fa      	movs	r2, #250	; 0xfa
 800090a:	0052      	lsls	r2, r2, #1
 800090c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2200      	movs	r2, #0
 8000924:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000926:	187b      	adds	r3, r7, r1
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800092c:	1879      	adds	r1, r7, r1
 800092e:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <MX_TIM15_Init+0x17c>)
 8000930:	2200      	movs	r2, #0
 8000932:	0018      	movs	r0, r3
 8000934:	f002 f862 	bl	80029fc <HAL_TIM_PWM_ConfigChannel>
 8000938:	1e03      	subs	r3, r0, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM15_Init+0x110>
  {
    Error_Handler();
 800093c:	f000 f9f4 	bl	8000d28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000940:	2338      	movs	r3, #56	; 0x38
 8000942:	18f9      	adds	r1, r7, r3
 8000944:	4b19      	ldr	r3, [pc, #100]	; (80009ac <MX_TIM15_Init+0x17c>)
 8000946:	2204      	movs	r2, #4
 8000948:	0018      	movs	r0, r3
 800094a:	f002 f857 	bl	80029fc <HAL_TIM_PWM_ConfigChannel>
 800094e:	1e03      	subs	r3, r0, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM15_Init+0x126>
  {
    Error_Handler();
 8000952:	f000 f9e9 	bl	8000d28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2200      	movs	r2, #0
 8000960:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	2280      	movs	r2, #128	; 0x80
 8000978:	0192      	lsls	r2, r2, #6
 800097a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	2200      	movs	r2, #0
 8000986:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000988:	1d3a      	adds	r2, r7, #4
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <MX_TIM15_Init+0x17c>)
 800098c:	0011      	movs	r1, r2
 800098e:	0018      	movs	r0, r3
 8000990:	f002 fe9c 	bl	80036cc <HAL_TIMEx_ConfigBreakDeadTime>
 8000994:	1e03      	subs	r3, r0, #0
 8000996:	d001      	beq.n	800099c <MX_TIM15_Init+0x16c>
  {
    Error_Handler();
 8000998:	f000 f9c6 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <MX_TIM15_Init+0x17c>)
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 fa40 	bl	8000e24 <HAL_TIM_MspPostInit>

}
 80009a4:	46c0      	nop			; (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b01c      	add	sp, #112	; 0x70
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000080 	.word	0x20000080
 80009b0:	40014000 	.word	0x40014000
 80009b4:	00004e1f 	.word	0x00004e1f

080009b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009bc:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <MX_USART2_UART_Init+0x94>)
 80009be:	4a24      	ldr	r2, [pc, #144]	; (8000a50 <MX_USART2_UART_Init+0x98>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009c2:	4b22      	ldr	r3, [pc, #136]	; (8000a4c <MX_USART2_UART_Init+0x94>)
 80009c4:	22e1      	movs	r2, #225	; 0xe1
 80009c6:	0252      	lsls	r2, r2, #9
 80009c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <MX_USART2_UART_Init+0x94>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <MX_USART2_UART_Init+0x94>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <MX_USART2_UART_Init+0x94>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <MX_USART2_UART_Init+0x94>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_USART2_UART_Init+0x94>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <MX_USART2_UART_Init+0x94>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <MX_USART2_UART_Init+0x94>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_USART2_UART_Init+0x94>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_USART2_UART_Init+0x94>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <MX_USART2_UART_Init+0x94>)
 8000a02:	0018      	movs	r0, r3
 8000a04:	f002 ff20 	bl	8003848 <HAL_UART_Init>
 8000a08:	1e03      	subs	r3, r0, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a0c:	f000 f98c 	bl	8000d28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a10:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_USART2_UART_Init+0x94>)
 8000a12:	2100      	movs	r1, #0
 8000a14:	0018      	movs	r0, r3
 8000a16:	f003 fc2f 	bl	8004278 <HAL_UARTEx_SetTxFifoThreshold>
 8000a1a:	1e03      	subs	r3, r0, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a1e:	f000 f983 	bl	8000d28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a22:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <MX_USART2_UART_Init+0x94>)
 8000a24:	2100      	movs	r1, #0
 8000a26:	0018      	movs	r0, r3
 8000a28:	f003 fc66 	bl	80042f8 <HAL_UARTEx_SetRxFifoThreshold>
 8000a2c:	1e03      	subs	r3, r0, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a30:	f000 f97a 	bl	8000d28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <MX_USART2_UART_Init+0x94>)
 8000a36:	0018      	movs	r0, r3
 8000a38:	f003 fbe4 	bl	8004204 <HAL_UARTEx_DisableFifoMode>
 8000a3c:	1e03      	subs	r3, r0, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a40:	f000 f972 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a44:	46c0      	nop			; (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	200000cc 	.word	0x200000cc
 8000a50:	40004400 	.word	0x40004400

08000a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b089      	sub	sp, #36	; 0x24
 8000a58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5a:	240c      	movs	r4, #12
 8000a5c:	193b      	adds	r3, r7, r4
 8000a5e:	0018      	movs	r0, r3
 8000a60:	2314      	movs	r3, #20
 8000a62:	001a      	movs	r2, r3
 8000a64:	2100      	movs	r1, #0
 8000a66:	f003 fd0b 	bl	8004480 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6a:	4b29      	ldr	r3, [pc, #164]	; (8000b10 <MX_GPIO_Init+0xbc>)
 8000a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a6e:	4b28      	ldr	r3, [pc, #160]	; (8000b10 <MX_GPIO_Init+0xbc>)
 8000a70:	2104      	movs	r1, #4
 8000a72:	430a      	orrs	r2, r1
 8000a74:	635a      	str	r2, [r3, #52]	; 0x34
 8000a76:	4b26      	ldr	r3, [pc, #152]	; (8000b10 <MX_GPIO_Init+0xbc>)
 8000a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a7a:	2204      	movs	r2, #4
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a82:	4b23      	ldr	r3, [pc, #140]	; (8000b10 <MX_GPIO_Init+0xbc>)
 8000a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a86:	4b22      	ldr	r3, [pc, #136]	; (8000b10 <MX_GPIO_Init+0xbc>)
 8000a88:	2120      	movs	r1, #32
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a8e:	4b20      	ldr	r3, [pc, #128]	; (8000b10 <MX_GPIO_Init+0xbc>)
 8000a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a92:	2220      	movs	r2, #32
 8000a94:	4013      	ands	r3, r2
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <MX_GPIO_Init+0xbc>)
 8000a9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <MX_GPIO_Init+0xbc>)
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	635a      	str	r2, [r3, #52]	; 0x34
 8000aa6:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <MX_GPIO_Init+0xbc>)
 8000aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4013      	ands	r3, r2
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000ab2:	23a0      	movs	r3, #160	; 0xa0
 8000ab4:	05db      	lsls	r3, r3, #23
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2123      	movs	r1, #35	; 0x23
 8000aba:	0018      	movs	r0, r3
 8000abc:	f000 fd89 	bl	80015d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 LED_GREEN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LED_GREEN_Pin;
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	2223      	movs	r2, #35	; 0x23
 8000ac4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	193b      	adds	r3, r7, r4
 8000ac8:	2201      	movs	r2, #1
 8000aca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	193b      	adds	r3, r7, r4
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad2:	193b      	adds	r3, r7, r4
 8000ad4:	2202      	movs	r2, #2
 8000ad6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	193a      	adds	r2, r7, r4
 8000ada:	23a0      	movs	r3, #160	; 0xa0
 8000adc:	05db      	lsls	r3, r3, #23
 8000ade:	0011      	movs	r1, r2
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f000 fbf5 	bl	80012d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ae6:	193b      	adds	r3, r7, r4
 8000ae8:	2210      	movs	r2, #16
 8000aea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aec:	193b      	adds	r3, r7, r4
 8000aee:	2200      	movs	r2, #0
 8000af0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	193b      	adds	r3, r7, r4
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	193a      	adds	r2, r7, r4
 8000afa:	23a0      	movs	r3, #160	; 0xa0
 8000afc:	05db      	lsls	r3, r3, #23
 8000afe:	0011      	movs	r1, r2
 8000b00:	0018      	movs	r0, r3
 8000b02:	f000 fbe5 	bl	80012d0 <HAL_GPIO_Init>

}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	b009      	add	sp, #36	; 0x24
 8000b0c:	bd90      	pop	{r4, r7, pc}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	40021000 	.word	0x40021000

08000b14 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	//ESTA INTERRUPCION ENTRA CADA 0.01s
	  if (htim == &htim3)
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	4b2b      	ldr	r3, [pc, #172]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d14f      	bne.n	8000bc4 <HAL_TIM_PeriodElapsedCallback+0xb0>
	  static unsigned int Cont_Button_active = 0;	//Hace el conteo para el filtro en el flanco alto
	  static unsigned int Cont_Button_unactive = 0; //Hace el conteo para el filtro en el flanco bajo
	  static uint16_t Pulso=0;	//Lo que hace es avisar que tuvo un pulso alto para pasar al siguiente pulso
	  static uint16_t CAMBIO=0;	//ES USADO PARA DAR UN TIEMPO DE ESPERA ENTRE CADA PULSO

	  	if (HAL_GPIO_ReadPin(GPIOA,BUTTON_IN)==0)
 8000b24:	23a0      	movs	r3, #160	; 0xa0
 8000b26:	05db      	lsls	r3, r3, #23
 8000b28:	2110      	movs	r1, #16
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f000 fd34 	bl	8001598 <HAL_GPIO_ReadPin>
 8000b30:	1e03      	subs	r3, r0, #0
 8000b32:	d12d      	bne.n	8000b90 <HAL_TIM_PeriodElapsedCallback+0x7c>
	    {
	    /* Entrara aqui cuando se precione el push button
	     * El contador comenzara a contar, cuando pase el tiempo de HUMBRAL_TIME
	     * se considerara al push button como activo, cuando se deje de pulsar
	     * el contador se reiniciara*/
	    	SENAL_STATE=0;
 8000b34:	4b26      	ldr	r3, [pc, #152]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	801a      	strh	r2, [r3, #0]
	    	Cont_Button_active++;
 8000b3a:	4b26      	ldr	r3, [pc, #152]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	1c5a      	adds	r2, r3, #1
 8000b40:	4b24      	ldr	r3, [pc, #144]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000b42:	601a      	str	r2, [r3, #0]
	    	if(Cont_Button_active >= HUMBRAL_TIME)
 8000b44:	4b23      	ldr	r3, [pc, #140]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b1b      	cmp	r3, #27
 8000b4a:	d93b      	bls.n	8000bc4 <HAL_TIM_PeriodElapsedCallback+0xb0>
	    	{
				if((Cont_Button_unactive>=10)&&(Cont_Button_unactive<=100))
 8000b4c:	4b22      	ldr	r3, [pc, #136]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b09      	cmp	r3, #9
 8000b52:	d910      	bls.n	8000b76 <HAL_TIM_PeriodElapsedCallback+0x62>
 8000b54:	4b20      	ldr	r3, [pc, #128]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b64      	cmp	r3, #100	; 0x64
 8000b5a:	d80c      	bhi.n	8000b76 <HAL_TIM_PeriodElapsedCallback+0x62>
				{
		/* Cuando se precione por segunda vez el push button y que tenga un tiempo
		 * en el esto bajo mayor a 20 y menor a 100, entonces entrara aqui
		 * y devolvienod
		 * */
					CAMBIO=2;
 8000b5c:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000b5e:	2202      	movs	r2, #2
 8000b60:	801a      	strh	r2, [r3, #0]
					Pulso=HIGH;
 8000b62:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	801a      	strh	r2, [r3, #0]
					Cont_Button_active = 0;
 8000b68:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
					Cont_Button_unactive=0;
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
					Pulso=LOW;
					Cont_Button_unactive=0;
				}
			}
	 }
}
 8000b74:	e026      	b.n	8000bc4 <HAL_TIM_PeriodElapsedCallback+0xb0>
					CAMBIO=1;
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	801a      	strh	r2, [r3, #0]
					Pulso=HIGH;
 8000b7c:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	801a      	strh	r2, [r3, #0]
					Cont_Button_active = 0;
 8000b82:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
					Cont_Button_unactive=0;
 8000b88:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
}
 8000b8e:	e019      	b.n	8000bc4 <HAL_TIM_PeriodElapsedCallback+0xb0>
	    }else if(Pulso==HIGH){
 8000b90:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d115      	bne.n	8000bc4 <HAL_TIM_PeriodElapsedCallback+0xb0>
	    		Cont_Button_active = 0;
 8000b98:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
	    		Cont_Button_unactive++;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	1c5a      	adds	r2, r3, #1
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000ba6:	601a      	str	r2, [r3, #0]
	    		if(Cont_Button_unactive>130)
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b82      	cmp	r3, #130	; 0x82
 8000bae:	d909      	bls.n	8000bc4 <HAL_TIM_PeriodElapsedCallback+0xb0>
	    			SENAL_STATE=CAMBIO;
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000bb2:	881a      	ldrh	r2, [r3, #0]
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000bb6:	801a      	strh	r2, [r3, #0]
					Pulso=LOW;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	801a      	strh	r2, [r3, #0]
					Cont_Button_unactive=0;
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
}
 8000bc4:	46c0      	nop			; (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	b002      	add	sp, #8
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000034 	.word	0x20000034
 8000bd0:	20000032 	.word	0x20000032
 8000bd4:	20000160 	.word	0x20000160
 8000bd8:	20000164 	.word	0x20000164
 8000bdc:	20000168 	.word	0x20000168
 8000be0:	2000016a 	.word	0x2000016a

08000be4 <FUN_ESTADO_INICIO>:

//----------------------------------------Maquina de estado---------------------------------------------------//
uint16_t FUN_ESTADO_INICIO (void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
   ESTADO_ANTERIOR=ESTADO_ACTUAL;
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <FUN_ESTADO_INICIO+0x24>)
 8000bea:	881a      	ldrh	r2, [r3, #0]
 8000bec:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <FUN_ESTADO_INICIO+0x28>)
 8000bee:	801a      	strh	r2, [r3, #0]
   ESTADO_ACTUAL=ESTADO_INICIO;
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <FUN_ESTADO_INICIO+0x24>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	801a      	strh	r2, [r3, #0]
        digitalWrite(LED, LOW);
        digitalWrite(LED1, HIGH);
        delay(500);
      }*/

    if(INICIO_STATE==TRUE)
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <FUN_ESTADO_INICIO+0x2c>)
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d1fb      	bne.n	8000bf6 <FUN_ESTADO_INICIO+0x12>
    {
      return ESTADO_ABIERTO;
 8000bfe:	2301      	movs	r3, #1
    }

    //HAL_Delay(10);

   }
}
 8000c00:	0018      	movs	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	2000002e 	.word	0x2000002e
 8000c0c:	20000030 	.word	0x20000030
 8000c10:	20000000 	.word	0x20000000

08000c14 <FUN_ESTADO_ABIERTO>:

uint16_t FUN_ESTADO_ABIERTO (void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
   ESTADO_ANTERIOR=ESTADO_ACTUAL;
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <FUN_ESTADO_ABIERTO+0x50>)
 8000c1a:	881a      	ldrh	r2, [r3, #0]
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <FUN_ESTADO_ABIERTO+0x54>)
 8000c1e:	801a      	strh	r2, [r3, #0]
   ESTADO_ACTUAL=ESTADO_ABIERTO;
 8000c20:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <FUN_ESTADO_ABIERTO+0x50>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	801a      	strh	r2, [r3, #0]
   //realizan las funciones de estado abierto
/*   servo1.write(0); // Meñique, Anular y Medio
   servo2.write(180); //Servo de arriba */

   SENAL_STATE=0;
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <FUN_ESTADO_ABIERTO+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	801a      	strh	r2, [r3, #0]
   HAL_GPIO_WritePin(GPIOA,BLUE_LED,LOW);
 8000c2c:	23a0      	movs	r3, #160	; 0xa0
 8000c2e:	05db      	lsls	r3, r3, #23
 8000c30:	2200      	movs	r2, #0
 8000c32:	2102      	movs	r1, #2
 8000c34:	0018      	movs	r0, r3
 8000c36:	f000 fccc 	bl	80015d2 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOA,RED_LED,LOW);
 8000c3a:	23a0      	movs	r3, #160	; 0xa0
 8000c3c:	05db      	lsls	r3, r3, #23
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2101      	movs	r1, #1
 8000c42:	0018      	movs	r0, r3
 8000c44:	f000 fcc5 	bl	80015d2 <HAL_GPIO_WritePin>
for(;;){
    //retorno a semicerrado
     if(SENAL_STATE==1)
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <FUN_ESTADO_ABIERTO+0x58>)
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d101      	bne.n	8000c54 <FUN_ESTADO_ABIERTO+0x40>
     {
      return ESTADO_SEMICERRADO;
 8000c50:	2302      	movs	r3, #2
 8000c52:	e004      	b.n	8000c5e <FUN_ESTADO_ABIERTO+0x4a>
     }
     //retorno cerrado
     if(SENAL_STATE==2)
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <FUN_ESTADO_ABIERTO+0x58>)
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d1f5      	bne.n	8000c48 <FUN_ESTADO_ABIERTO+0x34>
     {
      return ESTADO_CERRADO;
 8000c5c:	2303      	movs	r3, #3
     }
     //HAL_Delay(10);
  }
}
 8000c5e:	0018      	movs	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	2000002e 	.word	0x2000002e
 8000c68:	20000030 	.word	0x20000030
 8000c6c:	20000032 	.word	0x20000032

08000c70 <FUN_ESTADO_SEMICERRADO>:

uint16_t FUN_ESTADO_SEMICERRADO (void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
   ESTADO_ANTERIOR=ESTADO_ACTUAL;
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <FUN_ESTADO_SEMICERRADO+0x50>)
 8000c76:	881a      	ldrh	r2, [r3, #0]
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <FUN_ESTADO_SEMICERRADO+0x54>)
 8000c7a:	801a      	strh	r2, [r3, #0]
   ESTADO_ACTUAL=ESTADO_SEMICERRADO;
 8000c7c:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <FUN_ESTADO_SEMICERRADO+0x50>)
 8000c7e:	2202      	movs	r2, #2
 8000c80:	801a      	strh	r2, [r3, #0]
  //realizan las funciones de estado semicerrado
  /* servo1.write(0); // Meñique, Anular y Medio
   servo2.write(0); // Indice y Pulgar*/
   SENAL_STATE=0;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <FUN_ESTADO_SEMICERRADO+0x58>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	801a      	strh	r2, [r3, #0]
   HAL_GPIO_WritePin(GPIOA,BLUE_LED,LOW);
 8000c88:	23a0      	movs	r3, #160	; 0xa0
 8000c8a:	05db      	lsls	r3, r3, #23
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2102      	movs	r1, #2
 8000c90:	0018      	movs	r0, r3
 8000c92:	f000 fc9e 	bl	80015d2 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOA,RED_LED,HIGH);
 8000c96:	23a0      	movs	r3, #160	; 0xa0
 8000c98:	05db      	lsls	r3, r3, #23
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f000 fc97 	bl	80015d2 <HAL_GPIO_WritePin>
for(;;){
//cierre
    //retorno a ABIERTO
     if(SENAL_STATE==1)
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <FUN_ESTADO_SEMICERRADO+0x58>)
 8000ca6:	881b      	ldrh	r3, [r3, #0]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d101      	bne.n	8000cb0 <FUN_ESTADO_SEMICERRADO+0x40>
     {
      return ESTADO_ABIERTO;
 8000cac:	2301      	movs	r3, #1
 8000cae:	e004      	b.n	8000cba <FUN_ESTADO_SEMICERRADO+0x4a>
     }
     //retorno cerrado
     if(SENAL_STATE==2)
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <FUN_ESTADO_SEMICERRADO+0x58>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d1f5      	bne.n	8000ca4 <FUN_ESTADO_SEMICERRADO+0x34>
     {
      return ESTADO_CERRADO;
 8000cb8:	2303      	movs	r3, #3
     }
     //HAL_Delay(10);
   }
}
 8000cba:	0018      	movs	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	2000002e 	.word	0x2000002e
 8000cc4:	20000030 	.word	0x20000030
 8000cc8:	20000032 	.word	0x20000032

08000ccc <FUN_ESTADO_CERRADO>:

uint16_t FUN_ESTADO_CERRADO (void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
   ESTADO_ANTERIOR=ESTADO_ACTUAL;
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <FUN_ESTADO_CERRADO+0x50>)
 8000cd2:	881a      	ldrh	r2, [r3, #0]
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <FUN_ESTADO_CERRADO+0x54>)
 8000cd6:	801a      	strh	r2, [r3, #0]
   ESTADO_ACTUAL=ESTADO_CERRADO;
 8000cd8:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <FUN_ESTADO_CERRADO+0x50>)
 8000cda:	2203      	movs	r2, #3
 8000cdc:	801a      	strh	r2, [r3, #0]
  //realizan las funciones de estado semicerrado
  /* servo1.write(180); // Meñique, Anular y Medio
   servo2.write(0); // Indice y Pulgar*/

   SENAL_STATE=0;
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <FUN_ESTADO_CERRADO+0x58>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	801a      	strh	r2, [r3, #0]
   HAL_GPIO_WritePin(GPIOA,BLUE_LED,HIGH);
 8000ce4:	23a0      	movs	r3, #160	; 0xa0
 8000ce6:	05db      	lsls	r3, r3, #23
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2102      	movs	r1, #2
 8000cec:	0018      	movs	r0, r3
 8000cee:	f000 fc70 	bl	80015d2 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOA,RED_LED,LOW);
 8000cf2:	23a0      	movs	r3, #160	; 0xa0
 8000cf4:	05db      	lsls	r3, r3, #23
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f000 fc69 	bl	80015d2 <HAL_GPIO_WritePin>
for(;;){

    //retorno a ABIERTO
     if(SENAL_STATE==1)
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <FUN_ESTADO_CERRADO+0x58>)
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d101      	bne.n	8000d0c <FUN_ESTADO_CERRADO+0x40>
     {
      return ESTADO_ABIERTO;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e004      	b.n	8000d16 <FUN_ESTADO_CERRADO+0x4a>
     }
     //retorno a SEMICERRADO
     if(SENAL_STATE==2)
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <FUN_ESTADO_CERRADO+0x58>)
 8000d0e:	881b      	ldrh	r3, [r3, #0]
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d1f5      	bne.n	8000d00 <FUN_ESTADO_CERRADO+0x34>
     {
      return ESTADO_SEMICERRADO;
 8000d14:	2302      	movs	r3, #2
     }

     //HAL_Delay(10);
  }
}
 8000d16:	0018      	movs	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	2000002e 	.word	0x2000002e
 8000d20:	20000030 	.word	0x20000030
 8000d24:	20000032 	.word	0x20000032

08000d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d2c:	b672      	cpsid	i
}
 8000d2e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <Error_Handler+0x8>
	...

08000d34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3a:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <HAL_MspInit+0x44>)
 8000d3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <HAL_MspInit+0x44>)
 8000d40:	2101      	movs	r1, #1
 8000d42:	430a      	orrs	r2, r1
 8000d44:	641a      	str	r2, [r3, #64]	; 0x40
 8000d46:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <HAL_MspInit+0x44>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <HAL_MspInit+0x44>)
 8000d54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d56:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HAL_MspInit+0x44>)
 8000d58:	2180      	movs	r1, #128	; 0x80
 8000d5a:	0549      	lsls	r1, r1, #21
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <HAL_MspInit+0x44>)
 8000d62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d64:	2380      	movs	r3, #128	; 0x80
 8000d66:	055b      	lsls	r3, r3, #21
 8000d68:	4013      	ands	r3, r2
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	46bd      	mov	sp, r7
 8000d72:	b002      	add	sp, #8
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	40021000 	.word	0x40021000

08000d7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b092      	sub	sp, #72	; 0x48
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d84:	2314      	movs	r3, #20
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	0018      	movs	r0, r3
 8000d8a:	2334      	movs	r3, #52	; 0x34
 8000d8c:	001a      	movs	r2, r3
 8000d8e:	2100      	movs	r1, #0
 8000d90:	f003 fb76 	bl	8004480 <memset>
  if(htim_base->Instance==TIM3)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a1f      	ldr	r2, [pc, #124]	; (8000e18 <HAL_TIM_Base_MspInit+0x9c>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d114      	bne.n	8000dc8 <HAL_TIM_Base_MspInit+0x4c>
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d9e:	4b1f      	ldr	r3, [pc, #124]	; (8000e1c <HAL_TIM_Base_MspInit+0xa0>)
 8000da0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000da2:	4b1e      	ldr	r3, [pc, #120]	; (8000e1c <HAL_TIM_Base_MspInit+0xa0>)
 8000da4:	2102      	movs	r1, #2
 8000da6:	430a      	orrs	r2, r1
 8000da8:	63da      	str	r2, [r3, #60]	; 0x3c
 8000daa:	4b1c      	ldr	r3, [pc, #112]	; (8000e1c <HAL_TIM_Base_MspInit+0xa0>)
 8000dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dae:	2202      	movs	r2, #2
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2100      	movs	r1, #0
 8000dba:	2010      	movs	r0, #16
 8000dbc:	f000 fa56 	bl	800126c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000dc0:	2010      	movs	r0, #16
 8000dc2:	f000 fa68 	bl	8001296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000dc6:	e022      	b.n	8000e0e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM15)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a14      	ldr	r2, [pc, #80]	; (8000e20 <HAL_TIM_Base_MspInit+0xa4>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d11d      	bne.n	8000e0e <HAL_TIM_Base_MspInit+0x92>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM15;
 8000dd2:	2114      	movs	r1, #20
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2280      	movs	r2, #128	; 0x80
 8000dd8:	03d2      	lsls	r2, r2, #15
 8000dda:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLKSOURCE_PCLK1;
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	2200      	movs	r2, #0
 8000de0:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	0018      	movs	r0, r3
 8000de6:	f001 f921 	bl	800202c <HAL_RCCEx_PeriphCLKConfig>
 8000dea:	1e03      	subs	r3, r0, #0
 8000dec:	d001      	beq.n	8000df2 <HAL_TIM_Base_MspInit+0x76>
      Error_Handler();
 8000dee:	f7ff ff9b 	bl	8000d28 <Error_Handler>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <HAL_TIM_Base_MspInit+0xa0>)
 8000df4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <HAL_TIM_Base_MspInit+0xa0>)
 8000df8:	2180      	movs	r1, #128	; 0x80
 8000dfa:	0249      	lsls	r1, r1, #9
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	641a      	str	r2, [r3, #64]	; 0x40
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_TIM_Base_MspInit+0xa0>)
 8000e02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e04:	2380      	movs	r3, #128	; 0x80
 8000e06:	025b      	lsls	r3, r3, #9
 8000e08:	4013      	ands	r3, r2
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b012      	add	sp, #72	; 0x48
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	40000400 	.word	0x40000400
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	40014000 	.word	0x40014000

08000e24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e24:	b590      	push	{r4, r7, lr}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	240c      	movs	r4, #12
 8000e2e:	193b      	adds	r3, r7, r4
 8000e30:	0018      	movs	r0, r3
 8000e32:	2314      	movs	r3, #20
 8000e34:	001a      	movs	r2, r3
 8000e36:	2100      	movs	r1, #0
 8000e38:	f003 fb22 	bl	8004480 <memset>
  if(htim->Instance==TIM15)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a14      	ldr	r2, [pc, #80]	; (8000e94 <HAL_TIM_MspPostInit+0x70>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d121      	bne.n	8000e8a <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e46:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <HAL_TIM_MspPostInit+0x74>)
 8000e48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <HAL_TIM_MspPostInit+0x74>)
 8000e4c:	2104      	movs	r1, #4
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	635a      	str	r2, [r3, #52]	; 0x34
 8000e52:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <HAL_TIM_MspPostInit+0x74>)
 8000e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e56:	2204      	movs	r2, #4
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PC1     ------> TIM15_CH1
    PC2     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000e5e:	0021      	movs	r1, r4
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	2206      	movs	r2, #6
 8000e64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	187b      	adds	r3, r7, r1
 8000e68:	2202      	movs	r2, #2
 8000e6a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	187b      	adds	r3, r7, r1
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	187b      	adds	r3, r7, r1
 8000e74:	2200      	movs	r2, #0
 8000e76:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM15;
 8000e78:	187b      	adds	r3, r7, r1
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7e:	187b      	adds	r3, r7, r1
 8000e80:	4a06      	ldr	r2, [pc, #24]	; (8000e9c <HAL_TIM_MspPostInit+0x78>)
 8000e82:	0019      	movs	r1, r3
 8000e84:	0010      	movs	r0, r2
 8000e86:	f000 fa23 	bl	80012d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	b009      	add	sp, #36	; 0x24
 8000e90:	bd90      	pop	{r4, r7, pc}
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	40014000 	.word	0x40014000
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	50000800 	.word	0x50000800

08000ea0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b097      	sub	sp, #92	; 0x5c
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	2344      	movs	r3, #68	; 0x44
 8000eaa:	18fb      	adds	r3, r7, r3
 8000eac:	0018      	movs	r0, r3
 8000eae:	2314      	movs	r3, #20
 8000eb0:	001a      	movs	r2, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	f003 fae4 	bl	8004480 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eb8:	2410      	movs	r4, #16
 8000eba:	193b      	adds	r3, r7, r4
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	2334      	movs	r3, #52	; 0x34
 8000ec0:	001a      	movs	r2, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	f003 fadc 	bl	8004480 <memset>
  if(huart->Instance==USART2)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a22      	ldr	r2, [pc, #136]	; (8000f58 <HAL_UART_MspInit+0xb8>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d13e      	bne.n	8000f50 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ed2:	193b      	adds	r3, r7, r4
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ed8:	193b      	adds	r3, r7, r4
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ede:	193b      	adds	r3, r7, r4
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f001 f8a3 	bl	800202c <HAL_RCCEx_PeriphCLKConfig>
 8000ee6:	1e03      	subs	r3, r0, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000eea:	f7ff ff1d 	bl	8000d28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eee:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <HAL_UART_MspInit+0xbc>)
 8000ef0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <HAL_UART_MspInit+0xbc>)
 8000ef4:	2180      	movs	r1, #128	; 0x80
 8000ef6:	0289      	lsls	r1, r1, #10
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	63da      	str	r2, [r3, #60]	; 0x3c
 8000efc:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <HAL_UART_MspInit+0xbc>)
 8000efe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f00:	2380      	movs	r3, #128	; 0x80
 8000f02:	029b      	lsls	r3, r3, #10
 8000f04:	4013      	ands	r3, r2
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <HAL_UART_MspInit+0xbc>)
 8000f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f0e:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <HAL_UART_MspInit+0xbc>)
 8000f10:	2101      	movs	r1, #1
 8000f12:	430a      	orrs	r2, r1
 8000f14:	635a      	str	r2, [r3, #52]	; 0x34
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <HAL_UART_MspInit+0xbc>)
 8000f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000f22:	2144      	movs	r1, #68	; 0x44
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	220c      	movs	r2, #12
 8000f28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	187b      	adds	r3, r7, r1
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f30:	187b      	adds	r3, r7, r1
 8000f32:	2201      	movs	r2, #1
 8000f34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	187b      	adds	r3, r7, r1
 8000f38:	2200      	movs	r2, #0
 8000f3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000f3c:	187b      	adds	r3, r7, r1
 8000f3e:	2201      	movs	r2, #1
 8000f40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	187a      	adds	r2, r7, r1
 8000f44:	23a0      	movs	r3, #160	; 0xa0
 8000f46:	05db      	lsls	r3, r3, #23
 8000f48:	0011      	movs	r1, r2
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f000 f9c0 	bl	80012d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f50:	46c0      	nop			; (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	b017      	add	sp, #92	; 0x5c
 8000f56:	bd90      	pop	{r4, r7, pc}
 8000f58:	40004400 	.word	0x40004400
 8000f5c:	40021000 	.word	0x40021000

08000f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <NMI_Handler+0x4>

08000f66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <HardFault_Handler+0x4>

08000f6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f70:	46c0      	nop			; (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f84:	f000 f8aa 	bl	80010dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f88:	46c0      	nop			; (mov r8, r8)
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <TIM3_IRQHandler+0x14>)
 8000f96:	0018      	movs	r0, r3
 8000f98:	f001 fbfe 	bl	8002798 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f9c:	46c0      	nop			; (mov r8, r8)
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	20000034 	.word	0x20000034

08000fa8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fac:	46c0      	nop			; (mov r8, r8)
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fb4:	480d      	ldr	r0, [pc, #52]	; (8000fec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fb6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fb8:	f7ff fff6 	bl	8000fa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fbc:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fbe:	490d      	ldr	r1, [pc, #52]	; (8000ff4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <LoopForever+0xe>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fd4:	4c0a      	ldr	r4, [pc, #40]	; (8001000 <LoopForever+0x16>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fe2:	f003 fa29 	bl	8004438 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000fe6:	f7ff fb19 	bl	800061c <main>

08000fea <LoopForever>:

LoopForever:
  b LoopForever
 8000fea:	e7fe      	b.n	8000fea <LoopForever>
  ldr   r0, =_estack
 8000fec:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ff8:	08004594 	.word	0x08004594
  ldr r2, =_sbss
 8000ffc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001000:	20000170 	.word	0x20000170

08001004 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC1_COMP_IRQHandler>
	...

08001008 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800100e:	1dfb      	adds	r3, r7, #7
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001014:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <HAL_Init+0x3c>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <HAL_Init+0x3c>)
 800101a:	2180      	movs	r1, #128	; 0x80
 800101c:	0049      	lsls	r1, r1, #1
 800101e:	430a      	orrs	r2, r1
 8001020:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001022:	2000      	movs	r0, #0
 8001024:	f000 f810 	bl	8001048 <HAL_InitTick>
 8001028:	1e03      	subs	r3, r0, #0
 800102a:	d003      	beq.n	8001034 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800102c:	1dfb      	adds	r3, r7, #7
 800102e:	2201      	movs	r2, #1
 8001030:	701a      	strb	r2, [r3, #0]
 8001032:	e001      	b.n	8001038 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001034:	f7ff fe7e 	bl	8000d34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001038:	1dfb      	adds	r3, r7, #7
 800103a:	781b      	ldrb	r3, [r3, #0]
}
 800103c:	0018      	movs	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	b002      	add	sp, #8
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40022000 	.word	0x40022000

08001048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001050:	230f      	movs	r3, #15
 8001052:	18fb      	adds	r3, r7, r3
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001058:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <HAL_InitTick+0x88>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d02b      	beq.n	80010b8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001060:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <HAL_InitTick+0x8c>)
 8001062:	681c      	ldr	r4, [r3, #0]
 8001064:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <HAL_InitTick+0x88>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	0019      	movs	r1, r3
 800106a:	23fa      	movs	r3, #250	; 0xfa
 800106c:	0098      	lsls	r0, r3, #2
 800106e:	f7ff f849 	bl	8000104 <__udivsi3>
 8001072:	0003      	movs	r3, r0
 8001074:	0019      	movs	r1, r3
 8001076:	0020      	movs	r0, r4
 8001078:	f7ff f844 	bl	8000104 <__udivsi3>
 800107c:	0003      	movs	r3, r0
 800107e:	0018      	movs	r0, r3
 8001080:	f000 f919 	bl	80012b6 <HAL_SYSTICK_Config>
 8001084:	1e03      	subs	r3, r0, #0
 8001086:	d112      	bne.n	80010ae <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b03      	cmp	r3, #3
 800108c:	d80a      	bhi.n	80010a4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	2301      	movs	r3, #1
 8001092:	425b      	negs	r3, r3
 8001094:	2200      	movs	r2, #0
 8001096:	0018      	movs	r0, r3
 8001098:	f000 f8e8 	bl	800126c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800109c:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <HAL_InitTick+0x90>)
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	e00d      	b.n	80010c0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80010a4:	230f      	movs	r3, #15
 80010a6:	18fb      	adds	r3, r7, r3
 80010a8:	2201      	movs	r2, #1
 80010aa:	701a      	strb	r2, [r3, #0]
 80010ac:	e008      	b.n	80010c0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010ae:	230f      	movs	r3, #15
 80010b0:	18fb      	adds	r3, r7, r3
 80010b2:	2201      	movs	r2, #1
 80010b4:	701a      	strb	r2, [r3, #0]
 80010b6:	e003      	b.n	80010c0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010b8:	230f      	movs	r3, #15
 80010ba:	18fb      	adds	r3, r7, r3
 80010bc:	2201      	movs	r2, #1
 80010be:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80010c0:	230f      	movs	r3, #15
 80010c2:	18fb      	adds	r3, r7, r3
 80010c4:	781b      	ldrb	r3, [r3, #0]
}
 80010c6:	0018      	movs	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	b005      	add	sp, #20
 80010cc:	bd90      	pop	{r4, r7, pc}
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	2000000c 	.word	0x2000000c
 80010d4:	20000004 	.word	0x20000004
 80010d8:	20000008 	.word	0x20000008

080010dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <HAL_IncTick+0x1c>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	001a      	movs	r2, r3
 80010e6:	4b05      	ldr	r3, [pc, #20]	; (80010fc <HAL_IncTick+0x20>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	18d2      	adds	r2, r2, r3
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <HAL_IncTick+0x20>)
 80010ee:	601a      	str	r2, [r3, #0]
}
 80010f0:	46c0      	nop			; (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	2000000c 	.word	0x2000000c
 80010fc:	2000016c 	.word	0x2000016c

08001100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  return uwTick;
 8001104:	4b02      	ldr	r3, [pc, #8]	; (8001110 <HAL_GetTick+0x10>)
 8001106:	681b      	ldr	r3, [r3, #0]
}
 8001108:	0018      	movs	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	2000016c 	.word	0x2000016c

08001114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	0002      	movs	r2, r0
 800111c:	1dfb      	adds	r3, r7, #7
 800111e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001120:	1dfb      	adds	r3, r7, #7
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b7f      	cmp	r3, #127	; 0x7f
 8001126:	d809      	bhi.n	800113c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001128:	1dfb      	adds	r3, r7, #7
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	001a      	movs	r2, r3
 800112e:	231f      	movs	r3, #31
 8001130:	401a      	ands	r2, r3
 8001132:	4b04      	ldr	r3, [pc, #16]	; (8001144 <__NVIC_EnableIRQ+0x30>)
 8001134:	2101      	movs	r1, #1
 8001136:	4091      	lsls	r1, r2
 8001138:	000a      	movs	r2, r1
 800113a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800113c:	46c0      	nop			; (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	b002      	add	sp, #8
 8001142:	bd80      	pop	{r7, pc}
 8001144:	e000e100 	.word	0xe000e100

08001148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001148:	b590      	push	{r4, r7, lr}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	0002      	movs	r2, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	1dfb      	adds	r3, r7, #7
 8001154:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001156:	1dfb      	adds	r3, r7, #7
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b7f      	cmp	r3, #127	; 0x7f
 800115c:	d828      	bhi.n	80011b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800115e:	4a2f      	ldr	r2, [pc, #188]	; (800121c <__NVIC_SetPriority+0xd4>)
 8001160:	1dfb      	adds	r3, r7, #7
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	b25b      	sxtb	r3, r3
 8001166:	089b      	lsrs	r3, r3, #2
 8001168:	33c0      	adds	r3, #192	; 0xc0
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	589b      	ldr	r3, [r3, r2]
 800116e:	1dfa      	adds	r2, r7, #7
 8001170:	7812      	ldrb	r2, [r2, #0]
 8001172:	0011      	movs	r1, r2
 8001174:	2203      	movs	r2, #3
 8001176:	400a      	ands	r2, r1
 8001178:	00d2      	lsls	r2, r2, #3
 800117a:	21ff      	movs	r1, #255	; 0xff
 800117c:	4091      	lsls	r1, r2
 800117e:	000a      	movs	r2, r1
 8001180:	43d2      	mvns	r2, r2
 8001182:	401a      	ands	r2, r3
 8001184:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	019b      	lsls	r3, r3, #6
 800118a:	22ff      	movs	r2, #255	; 0xff
 800118c:	401a      	ands	r2, r3
 800118e:	1dfb      	adds	r3, r7, #7
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	0018      	movs	r0, r3
 8001194:	2303      	movs	r3, #3
 8001196:	4003      	ands	r3, r0
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800119c:	481f      	ldr	r0, [pc, #124]	; (800121c <__NVIC_SetPriority+0xd4>)
 800119e:	1dfb      	adds	r3, r7, #7
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	b25b      	sxtb	r3, r3
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	430a      	orrs	r2, r1
 80011a8:	33c0      	adds	r3, #192	; 0xc0
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011ae:	e031      	b.n	8001214 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011b0:	4a1b      	ldr	r2, [pc, #108]	; (8001220 <__NVIC_SetPriority+0xd8>)
 80011b2:	1dfb      	adds	r3, r7, #7
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	0019      	movs	r1, r3
 80011b8:	230f      	movs	r3, #15
 80011ba:	400b      	ands	r3, r1
 80011bc:	3b08      	subs	r3, #8
 80011be:	089b      	lsrs	r3, r3, #2
 80011c0:	3306      	adds	r3, #6
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	18d3      	adds	r3, r2, r3
 80011c6:	3304      	adds	r3, #4
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	1dfa      	adds	r2, r7, #7
 80011cc:	7812      	ldrb	r2, [r2, #0]
 80011ce:	0011      	movs	r1, r2
 80011d0:	2203      	movs	r2, #3
 80011d2:	400a      	ands	r2, r1
 80011d4:	00d2      	lsls	r2, r2, #3
 80011d6:	21ff      	movs	r1, #255	; 0xff
 80011d8:	4091      	lsls	r1, r2
 80011da:	000a      	movs	r2, r1
 80011dc:	43d2      	mvns	r2, r2
 80011de:	401a      	ands	r2, r3
 80011e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	019b      	lsls	r3, r3, #6
 80011e6:	22ff      	movs	r2, #255	; 0xff
 80011e8:	401a      	ands	r2, r3
 80011ea:	1dfb      	adds	r3, r7, #7
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	0018      	movs	r0, r3
 80011f0:	2303      	movs	r3, #3
 80011f2:	4003      	ands	r3, r0
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011f8:	4809      	ldr	r0, [pc, #36]	; (8001220 <__NVIC_SetPriority+0xd8>)
 80011fa:	1dfb      	adds	r3, r7, #7
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	001c      	movs	r4, r3
 8001200:	230f      	movs	r3, #15
 8001202:	4023      	ands	r3, r4
 8001204:	3b08      	subs	r3, #8
 8001206:	089b      	lsrs	r3, r3, #2
 8001208:	430a      	orrs	r2, r1
 800120a:	3306      	adds	r3, #6
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	18c3      	adds	r3, r0, r3
 8001210:	3304      	adds	r3, #4
 8001212:	601a      	str	r2, [r3, #0]
}
 8001214:	46c0      	nop			; (mov r8, r8)
 8001216:	46bd      	mov	sp, r7
 8001218:	b003      	add	sp, #12
 800121a:	bd90      	pop	{r4, r7, pc}
 800121c:	e000e100 	.word	0xe000e100
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	1e5a      	subs	r2, r3, #1
 8001230:	2380      	movs	r3, #128	; 0x80
 8001232:	045b      	lsls	r3, r3, #17
 8001234:	429a      	cmp	r2, r3
 8001236:	d301      	bcc.n	800123c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001238:	2301      	movs	r3, #1
 800123a:	e010      	b.n	800125e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123c:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <SysTick_Config+0x44>)
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	3a01      	subs	r2, #1
 8001242:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001244:	2301      	movs	r3, #1
 8001246:	425b      	negs	r3, r3
 8001248:	2103      	movs	r1, #3
 800124a:	0018      	movs	r0, r3
 800124c:	f7ff ff7c 	bl	8001148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <SysTick_Config+0x44>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <SysTick_Config+0x44>)
 8001258:	2207      	movs	r2, #7
 800125a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800125c:	2300      	movs	r3, #0
}
 800125e:	0018      	movs	r0, r3
 8001260:	46bd      	mov	sp, r7
 8001262:	b002      	add	sp, #8
 8001264:	bd80      	pop	{r7, pc}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	e000e010 	.word	0xe000e010

0800126c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	60b9      	str	r1, [r7, #8]
 8001274:	607a      	str	r2, [r7, #4]
 8001276:	210f      	movs	r1, #15
 8001278:	187b      	adds	r3, r7, r1
 800127a:	1c02      	adds	r2, r0, #0
 800127c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	187b      	adds	r3, r7, r1
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	b25b      	sxtb	r3, r3
 8001286:	0011      	movs	r1, r2
 8001288:	0018      	movs	r0, r3
 800128a:	f7ff ff5d 	bl	8001148 <__NVIC_SetPriority>
}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	46bd      	mov	sp, r7
 8001292:	b004      	add	sp, #16
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	0002      	movs	r2, r0
 800129e:	1dfb      	adds	r3, r7, #7
 80012a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a2:	1dfb      	adds	r3, r7, #7
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	b25b      	sxtb	r3, r3
 80012a8:	0018      	movs	r0, r3
 80012aa:	f7ff ff33 	bl	8001114 <__NVIC_EnableIRQ>
}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b002      	add	sp, #8
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	0018      	movs	r0, r3
 80012c2:	f7ff ffaf 	bl	8001224 <SysTick_Config>
 80012c6:	0003      	movs	r3, r0
}
 80012c8:	0018      	movs	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	b002      	add	sp, #8
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012de:	e147      	b.n	8001570 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2101      	movs	r1, #1
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	4091      	lsls	r1, r2
 80012ea:	000a      	movs	r2, r1
 80012ec:	4013      	ands	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d100      	bne.n	80012f8 <HAL_GPIO_Init+0x28>
 80012f6:	e138      	b.n	800156a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2203      	movs	r2, #3
 80012fe:	4013      	ands	r3, r2
 8001300:	2b01      	cmp	r3, #1
 8001302:	d005      	beq.n	8001310 <HAL_GPIO_Init+0x40>
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2203      	movs	r2, #3
 800130a:	4013      	ands	r3, r2
 800130c:	2b02      	cmp	r3, #2
 800130e:	d130      	bne.n	8001372 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	2203      	movs	r2, #3
 800131c:	409a      	lsls	r2, r3
 800131e:	0013      	movs	r3, r2
 8001320:	43da      	mvns	r2, r3
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	68da      	ldr	r2, [r3, #12]
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	409a      	lsls	r2, r3
 8001332:	0013      	movs	r3, r2
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001346:	2201      	movs	r2, #1
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	409a      	lsls	r2, r3
 800134c:	0013      	movs	r3, r2
 800134e:	43da      	mvns	r2, r3
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4013      	ands	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	091b      	lsrs	r3, r3, #4
 800135c:	2201      	movs	r2, #1
 800135e:	401a      	ands	r2, r3
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	409a      	lsls	r2, r3
 8001364:	0013      	movs	r3, r2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2203      	movs	r2, #3
 8001378:	4013      	ands	r3, r2
 800137a:	2b03      	cmp	r3, #3
 800137c:	d017      	beq.n	80013ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	2203      	movs	r2, #3
 800138a:	409a      	lsls	r2, r3
 800138c:	0013      	movs	r3, r2
 800138e:	43da      	mvns	r2, r3
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	4013      	ands	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	689a      	ldr	r2, [r3, #8]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	409a      	lsls	r2, r3
 80013a0:	0013      	movs	r3, r2
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2203      	movs	r2, #3
 80013b4:	4013      	ands	r3, r2
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d123      	bne.n	8001402 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	08da      	lsrs	r2, r3, #3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3208      	adds	r2, #8
 80013c2:	0092      	lsls	r2, r2, #2
 80013c4:	58d3      	ldr	r3, [r2, r3]
 80013c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	2207      	movs	r2, #7
 80013cc:	4013      	ands	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	220f      	movs	r2, #15
 80013d2:	409a      	lsls	r2, r3
 80013d4:	0013      	movs	r3, r2
 80013d6:	43da      	mvns	r2, r3
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	691a      	ldr	r2, [r3, #16]
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	2107      	movs	r1, #7
 80013e6:	400b      	ands	r3, r1
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	409a      	lsls	r2, r3
 80013ec:	0013      	movs	r3, r2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	08da      	lsrs	r2, r3, #3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3208      	adds	r2, #8
 80013fc:	0092      	lsls	r2, r2, #2
 80013fe:	6939      	ldr	r1, [r7, #16]
 8001400:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	2203      	movs	r2, #3
 800140e:	409a      	lsls	r2, r3
 8001410:	0013      	movs	r3, r2
 8001412:	43da      	mvns	r2, r3
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	4013      	ands	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2203      	movs	r2, #3
 8001420:	401a      	ands	r2, r3
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	409a      	lsls	r2, r3
 8001428:	0013      	movs	r3, r2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	23c0      	movs	r3, #192	; 0xc0
 800143c:	029b      	lsls	r3, r3, #10
 800143e:	4013      	ands	r3, r2
 8001440:	d100      	bne.n	8001444 <HAL_GPIO_Init+0x174>
 8001442:	e092      	b.n	800156a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001444:	4a50      	ldr	r2, [pc, #320]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	089b      	lsrs	r3, r3, #2
 800144a:	3318      	adds	r3, #24
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	589b      	ldr	r3, [r3, r2]
 8001450:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	2203      	movs	r2, #3
 8001456:	4013      	ands	r3, r2
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	220f      	movs	r2, #15
 800145c:	409a      	lsls	r2, r3
 800145e:	0013      	movs	r3, r2
 8001460:	43da      	mvns	r2, r3
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	4013      	ands	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	23a0      	movs	r3, #160	; 0xa0
 800146c:	05db      	lsls	r3, r3, #23
 800146e:	429a      	cmp	r2, r3
 8001470:	d013      	beq.n	800149a <HAL_GPIO_Init+0x1ca>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a45      	ldr	r2, [pc, #276]	; (800158c <HAL_GPIO_Init+0x2bc>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d00d      	beq.n	8001496 <HAL_GPIO_Init+0x1c6>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a44      	ldr	r2, [pc, #272]	; (8001590 <HAL_GPIO_Init+0x2c0>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d007      	beq.n	8001492 <HAL_GPIO_Init+0x1c2>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a43      	ldr	r2, [pc, #268]	; (8001594 <HAL_GPIO_Init+0x2c4>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d101      	bne.n	800148e <HAL_GPIO_Init+0x1be>
 800148a:	2303      	movs	r3, #3
 800148c:	e006      	b.n	800149c <HAL_GPIO_Init+0x1cc>
 800148e:	2305      	movs	r3, #5
 8001490:	e004      	b.n	800149c <HAL_GPIO_Init+0x1cc>
 8001492:	2302      	movs	r3, #2
 8001494:	e002      	b.n	800149c <HAL_GPIO_Init+0x1cc>
 8001496:	2301      	movs	r3, #1
 8001498:	e000      	b.n	800149c <HAL_GPIO_Init+0x1cc>
 800149a:	2300      	movs	r3, #0
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	2103      	movs	r1, #3
 80014a0:	400a      	ands	r2, r1
 80014a2:	00d2      	lsls	r2, r2, #3
 80014a4:	4093      	lsls	r3, r2
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80014ac:	4936      	ldr	r1, [pc, #216]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	089b      	lsrs	r3, r3, #2
 80014b2:	3318      	adds	r3, #24
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014ba:	4b33      	ldr	r3, [pc, #204]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	43da      	mvns	r2, r3
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	4013      	ands	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	2380      	movs	r3, #128	; 0x80
 80014d0:	035b      	lsls	r3, r3, #13
 80014d2:	4013      	ands	r3, r2
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4313      	orrs	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014de:	4b2a      	ldr	r3, [pc, #168]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80014e4:	4b28      	ldr	r3, [pc, #160]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	43da      	mvns	r2, r3
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	4013      	ands	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	2380      	movs	r3, #128	; 0x80
 80014fa:	039b      	lsls	r3, r3, #14
 80014fc:	4013      	ands	r3, r2
 80014fe:	d003      	beq.n	8001508 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001508:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800150e:	4a1e      	ldr	r2, [pc, #120]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 8001510:	2384      	movs	r3, #132	; 0x84
 8001512:	58d3      	ldr	r3, [r2, r3]
 8001514:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	43da      	mvns	r2, r3
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	2380      	movs	r3, #128	; 0x80
 8001526:	029b      	lsls	r3, r3, #10
 8001528:	4013      	ands	r3, r2
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4313      	orrs	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001534:	4914      	ldr	r1, [pc, #80]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 8001536:	2284      	movs	r2, #132	; 0x84
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800153c:	4a12      	ldr	r2, [pc, #72]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 800153e:	2380      	movs	r3, #128	; 0x80
 8001540:	58d3      	ldr	r3, [r2, r3]
 8001542:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	43da      	mvns	r2, r3
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	4013      	ands	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	2380      	movs	r3, #128	; 0x80
 8001554:	025b      	lsls	r3, r3, #9
 8001556:	4013      	ands	r3, r2
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4313      	orrs	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001562:	4909      	ldr	r1, [pc, #36]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 8001564:	2280      	movs	r2, #128	; 0x80
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	3301      	adds	r3, #1
 800156e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	40da      	lsrs	r2, r3
 8001578:	1e13      	subs	r3, r2, #0
 800157a:	d000      	beq.n	800157e <HAL_GPIO_Init+0x2ae>
 800157c:	e6b0      	b.n	80012e0 <HAL_GPIO_Init+0x10>
  }
}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	46c0      	nop			; (mov r8, r8)
 8001582:	46bd      	mov	sp, r7
 8001584:	b006      	add	sp, #24
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40021800 	.word	0x40021800
 800158c:	50000400 	.word	0x50000400
 8001590:	50000800 	.word	0x50000800
 8001594:	50000c00 	.word	0x50000c00

08001598 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	000a      	movs	r2, r1
 80015a2:	1cbb      	adds	r3, r7, #2
 80015a4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	1cba      	adds	r2, r7, #2
 80015ac:	8812      	ldrh	r2, [r2, #0]
 80015ae:	4013      	ands	r3, r2
 80015b0:	d004      	beq.n	80015bc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80015b2:	230f      	movs	r3, #15
 80015b4:	18fb      	adds	r3, r7, r3
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]
 80015ba:	e003      	b.n	80015c4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015bc:	230f      	movs	r3, #15
 80015be:	18fb      	adds	r3, r7, r3
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80015c4:	230f      	movs	r3, #15
 80015c6:	18fb      	adds	r3, r7, r3
 80015c8:	781b      	ldrb	r3, [r3, #0]
}
 80015ca:	0018      	movs	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	b004      	add	sp, #16
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	0008      	movs	r0, r1
 80015dc:	0011      	movs	r1, r2
 80015de:	1cbb      	adds	r3, r7, #2
 80015e0:	1c02      	adds	r2, r0, #0
 80015e2:	801a      	strh	r2, [r3, #0]
 80015e4:	1c7b      	adds	r3, r7, #1
 80015e6:	1c0a      	adds	r2, r1, #0
 80015e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015ea:	1c7b      	adds	r3, r7, #1
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d004      	beq.n	80015fc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015f2:	1cbb      	adds	r3, r7, #2
 80015f4:	881a      	ldrh	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015fa:	e003      	b.n	8001604 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015fc:	1cbb      	adds	r3, r7, #2
 80015fe:	881a      	ldrh	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001604:	46c0      	nop			; (mov r8, r8)
 8001606:	46bd      	mov	sp, r7
 8001608:	b002      	add	sp, #8
 800160a:	bd80      	pop	{r7, pc}

0800160c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001614:	4b19      	ldr	r3, [pc, #100]	; (800167c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a19      	ldr	r2, [pc, #100]	; (8001680 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800161a:	4013      	ands	r3, r2
 800161c:	0019      	movs	r1, r3
 800161e:	4b17      	ldr	r3, [pc, #92]	; (800167c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	430a      	orrs	r2, r1
 8001624:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	429a      	cmp	r2, r3
 800162e:	d11f      	bne.n	8001670 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001630:	4b14      	ldr	r3, [pc, #80]	; (8001684 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	0013      	movs	r3, r2
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	189b      	adds	r3, r3, r2
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	4912      	ldr	r1, [pc, #72]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800163e:	0018      	movs	r0, r3
 8001640:	f7fe fd60 	bl	8000104 <__udivsi3>
 8001644:	0003      	movs	r3, r0
 8001646:	3301      	adds	r3, #1
 8001648:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800164a:	e008      	b.n	800165e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	3b01      	subs	r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	e001      	b.n	800165e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e009      	b.n	8001672 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800165e:	4b07      	ldr	r3, [pc, #28]	; (800167c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001660:	695a      	ldr	r2, [r3, #20]
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	401a      	ands	r2, r3
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	429a      	cmp	r2, r3
 800166e:	d0ed      	beq.n	800164c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	0018      	movs	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	b004      	add	sp, #16
 8001678:	bd80      	pop	{r7, pc}
 800167a:	46c0      	nop			; (mov r8, r8)
 800167c:	40007000 	.word	0x40007000
 8001680:	fffff9ff 	.word	0xfffff9ff
 8001684:	20000004 	.word	0x20000004
 8001688:	000f4240 	.word	0x000f4240

0800168c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001690:	4b03      	ldr	r3, [pc, #12]	; (80016a0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	23e0      	movs	r3, #224	; 0xe0
 8001696:	01db      	lsls	r3, r3, #7
 8001698:	4013      	ands	r3, r2
}
 800169a:	0018      	movs	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40021000 	.word	0x40021000

080016a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e2fe      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2201      	movs	r2, #1
 80016bc:	4013      	ands	r3, r2
 80016be:	d100      	bne.n	80016c2 <HAL_RCC_OscConfig+0x1e>
 80016c0:	e07c      	b.n	80017bc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016c2:	4bc3      	ldr	r3, [pc, #780]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2238      	movs	r2, #56	; 0x38
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016cc:	4bc0      	ldr	r3, [pc, #768]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	2203      	movs	r2, #3
 80016d2:	4013      	ands	r3, r2
 80016d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	2b10      	cmp	r3, #16
 80016da:	d102      	bne.n	80016e2 <HAL_RCC_OscConfig+0x3e>
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d002      	beq.n	80016e8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	d10b      	bne.n	8001700 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e8:	4bb9      	ldr	r3, [pc, #740]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	2380      	movs	r3, #128	; 0x80
 80016ee:	029b      	lsls	r3, r3, #10
 80016f0:	4013      	ands	r3, r2
 80016f2:	d062      	beq.n	80017ba <HAL_RCC_OscConfig+0x116>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d15e      	bne.n	80017ba <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e2d9      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	025b      	lsls	r3, r3, #9
 8001708:	429a      	cmp	r2, r3
 800170a:	d107      	bne.n	800171c <HAL_RCC_OscConfig+0x78>
 800170c:	4bb0      	ldr	r3, [pc, #704]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4baf      	ldr	r3, [pc, #700]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 8001712:	2180      	movs	r1, #128	; 0x80
 8001714:	0249      	lsls	r1, r1, #9
 8001716:	430a      	orrs	r2, r1
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	e020      	b.n	800175e <HAL_RCC_OscConfig+0xba>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	23a0      	movs	r3, #160	; 0xa0
 8001722:	02db      	lsls	r3, r3, #11
 8001724:	429a      	cmp	r2, r3
 8001726:	d10e      	bne.n	8001746 <HAL_RCC_OscConfig+0xa2>
 8001728:	4ba9      	ldr	r3, [pc, #676]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4ba8      	ldr	r3, [pc, #672]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 800172e:	2180      	movs	r1, #128	; 0x80
 8001730:	02c9      	lsls	r1, r1, #11
 8001732:	430a      	orrs	r2, r1
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	4ba6      	ldr	r3, [pc, #664]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	4ba5      	ldr	r3, [pc, #660]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 800173c:	2180      	movs	r1, #128	; 0x80
 800173e:	0249      	lsls	r1, r1, #9
 8001740:	430a      	orrs	r2, r1
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	e00b      	b.n	800175e <HAL_RCC_OscConfig+0xba>
 8001746:	4ba2      	ldr	r3, [pc, #648]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	4ba1      	ldr	r3, [pc, #644]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 800174c:	49a1      	ldr	r1, [pc, #644]	; (80019d4 <HAL_RCC_OscConfig+0x330>)
 800174e:	400a      	ands	r2, r1
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	4b9f      	ldr	r3, [pc, #636]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	4b9e      	ldr	r3, [pc, #632]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 8001758:	499f      	ldr	r1, [pc, #636]	; (80019d8 <HAL_RCC_OscConfig+0x334>)
 800175a:	400a      	ands	r2, r1
 800175c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d014      	beq.n	8001790 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001766:	f7ff fccb 	bl	8001100 <HAL_GetTick>
 800176a:	0003      	movs	r3, r0
 800176c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001770:	f7ff fcc6 	bl	8001100 <HAL_GetTick>
 8001774:	0002      	movs	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b64      	cmp	r3, #100	; 0x64
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e298      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001782:	4b93      	ldr	r3, [pc, #588]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	2380      	movs	r3, #128	; 0x80
 8001788:	029b      	lsls	r3, r3, #10
 800178a:	4013      	ands	r3, r2
 800178c:	d0f0      	beq.n	8001770 <HAL_RCC_OscConfig+0xcc>
 800178e:	e015      	b.n	80017bc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001790:	f7ff fcb6 	bl	8001100 <HAL_GetTick>
 8001794:	0003      	movs	r3, r0
 8001796:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800179a:	f7ff fcb1 	bl	8001100 <HAL_GetTick>
 800179e:	0002      	movs	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b64      	cmp	r3, #100	; 0x64
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e283      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ac:	4b88      	ldr	r3, [pc, #544]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	2380      	movs	r3, #128	; 0x80
 80017b2:	029b      	lsls	r3, r3, #10
 80017b4:	4013      	ands	r3, r2
 80017b6:	d1f0      	bne.n	800179a <HAL_RCC_OscConfig+0xf6>
 80017b8:	e000      	b.n	80017bc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ba:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2202      	movs	r2, #2
 80017c2:	4013      	ands	r3, r2
 80017c4:	d100      	bne.n	80017c8 <HAL_RCC_OscConfig+0x124>
 80017c6:	e099      	b.n	80018fc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017c8:	4b81      	ldr	r3, [pc, #516]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2238      	movs	r2, #56	; 0x38
 80017ce:	4013      	ands	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017d2:	4b7f      	ldr	r3, [pc, #508]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	2203      	movs	r2, #3
 80017d8:	4013      	ands	r3, r2
 80017da:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	2b10      	cmp	r3, #16
 80017e0:	d102      	bne.n	80017e8 <HAL_RCC_OscConfig+0x144>
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d002      	beq.n	80017ee <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d135      	bne.n	800185a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017ee:	4b78      	ldr	r3, [pc, #480]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	2380      	movs	r3, #128	; 0x80
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	4013      	ands	r3, r2
 80017f8:	d005      	beq.n	8001806 <HAL_RCC_OscConfig+0x162>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e256      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001806:	4b72      	ldr	r3, [pc, #456]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	4a74      	ldr	r2, [pc, #464]	; (80019dc <HAL_RCC_OscConfig+0x338>)
 800180c:	4013      	ands	r3, r2
 800180e:	0019      	movs	r1, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	021a      	lsls	r2, r3, #8
 8001816:	4b6e      	ldr	r3, [pc, #440]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 8001818:	430a      	orrs	r2, r1
 800181a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d112      	bne.n	8001848 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001822:	4b6b      	ldr	r3, [pc, #428]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a6e      	ldr	r2, [pc, #440]	; (80019e0 <HAL_RCC_OscConfig+0x33c>)
 8001828:	4013      	ands	r3, r2
 800182a:	0019      	movs	r1, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691a      	ldr	r2, [r3, #16]
 8001830:	4b67      	ldr	r3, [pc, #412]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 8001832:	430a      	orrs	r2, r1
 8001834:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001836:	4b66      	ldr	r3, [pc, #408]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	0adb      	lsrs	r3, r3, #11
 800183c:	2207      	movs	r2, #7
 800183e:	4013      	ands	r3, r2
 8001840:	4a68      	ldr	r2, [pc, #416]	; (80019e4 <HAL_RCC_OscConfig+0x340>)
 8001842:	40da      	lsrs	r2, r3
 8001844:	4b68      	ldr	r3, [pc, #416]	; (80019e8 <HAL_RCC_OscConfig+0x344>)
 8001846:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001848:	4b68      	ldr	r3, [pc, #416]	; (80019ec <HAL_RCC_OscConfig+0x348>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	0018      	movs	r0, r3
 800184e:	f7ff fbfb 	bl	8001048 <HAL_InitTick>
 8001852:	1e03      	subs	r3, r0, #0
 8001854:	d051      	beq.n	80018fa <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e22c      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d030      	beq.n	80018c4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001862:	4b5b      	ldr	r3, [pc, #364]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a5e      	ldr	r2, [pc, #376]	; (80019e0 <HAL_RCC_OscConfig+0x33c>)
 8001868:	4013      	ands	r3, r2
 800186a:	0019      	movs	r1, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	691a      	ldr	r2, [r3, #16]
 8001870:	4b57      	ldr	r3, [pc, #348]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 8001872:	430a      	orrs	r2, r1
 8001874:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001876:	4b56      	ldr	r3, [pc, #344]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	4b55      	ldr	r3, [pc, #340]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 800187c:	2180      	movs	r1, #128	; 0x80
 800187e:	0049      	lsls	r1, r1, #1
 8001880:	430a      	orrs	r2, r1
 8001882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001884:	f7ff fc3c 	bl	8001100 <HAL_GetTick>
 8001888:	0003      	movs	r3, r0
 800188a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800188e:	f7ff fc37 	bl	8001100 <HAL_GetTick>
 8001892:	0002      	movs	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e209      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018a0:	4b4b      	ldr	r3, [pc, #300]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	4013      	ands	r3, r2
 80018aa:	d0f0      	beq.n	800188e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ac:	4b48      	ldr	r3, [pc, #288]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	4a4a      	ldr	r2, [pc, #296]	; (80019dc <HAL_RCC_OscConfig+0x338>)
 80018b2:	4013      	ands	r3, r2
 80018b4:	0019      	movs	r1, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	021a      	lsls	r2, r3, #8
 80018bc:	4b44      	ldr	r3, [pc, #272]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 80018be:	430a      	orrs	r2, r1
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	e01b      	b.n	80018fc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80018c4:	4b42      	ldr	r3, [pc, #264]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b41      	ldr	r3, [pc, #260]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 80018ca:	4949      	ldr	r1, [pc, #292]	; (80019f0 <HAL_RCC_OscConfig+0x34c>)
 80018cc:	400a      	ands	r2, r1
 80018ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d0:	f7ff fc16 	bl	8001100 <HAL_GetTick>
 80018d4:	0003      	movs	r3, r0
 80018d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018da:	f7ff fc11 	bl	8001100 <HAL_GetTick>
 80018de:	0002      	movs	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e1e3      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018ec:	4b38      	ldr	r3, [pc, #224]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	4013      	ands	r3, r2
 80018f6:	d1f0      	bne.n	80018da <HAL_RCC_OscConfig+0x236>
 80018f8:	e000      	b.n	80018fc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018fa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2208      	movs	r2, #8
 8001902:	4013      	ands	r3, r2
 8001904:	d047      	beq.n	8001996 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001906:	4b32      	ldr	r3, [pc, #200]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	2238      	movs	r2, #56	; 0x38
 800190c:	4013      	ands	r3, r2
 800190e:	2b18      	cmp	r3, #24
 8001910:	d10a      	bne.n	8001928 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001912:	4b2f      	ldr	r3, [pc, #188]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 8001914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001916:	2202      	movs	r2, #2
 8001918:	4013      	ands	r3, r2
 800191a:	d03c      	beq.n	8001996 <HAL_RCC_OscConfig+0x2f2>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d138      	bne.n	8001996 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e1c5      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d019      	beq.n	8001964 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001930:	4b27      	ldr	r3, [pc, #156]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 8001932:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001934:	4b26      	ldr	r3, [pc, #152]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 8001936:	2101      	movs	r1, #1
 8001938:	430a      	orrs	r2, r1
 800193a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193c:	f7ff fbe0 	bl	8001100 <HAL_GetTick>
 8001940:	0003      	movs	r3, r0
 8001942:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001946:	f7ff fbdb 	bl	8001100 <HAL_GetTick>
 800194a:	0002      	movs	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e1ad      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001958:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 800195a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195c:	2202      	movs	r2, #2
 800195e:	4013      	ands	r3, r2
 8001960:	d0f1      	beq.n	8001946 <HAL_RCC_OscConfig+0x2a2>
 8001962:	e018      	b.n	8001996 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001964:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 8001966:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001968:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 800196a:	2101      	movs	r1, #1
 800196c:	438a      	bics	r2, r1
 800196e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001970:	f7ff fbc6 	bl	8001100 <HAL_GetTick>
 8001974:	0003      	movs	r3, r0
 8001976:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800197a:	f7ff fbc1 	bl	8001100 <HAL_GetTick>
 800197e:	0002      	movs	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e193      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800198c:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 800198e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001990:	2202      	movs	r2, #2
 8001992:	4013      	ands	r3, r2
 8001994:	d1f1      	bne.n	800197a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2204      	movs	r2, #4
 800199c:	4013      	ands	r3, r2
 800199e:	d100      	bne.n	80019a2 <HAL_RCC_OscConfig+0x2fe>
 80019a0:	e0c6      	b.n	8001b30 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019a2:	231f      	movs	r3, #31
 80019a4:	18fb      	adds	r3, r7, r3
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	2238      	movs	r2, #56	; 0x38
 80019b0:	4013      	ands	r3, r2
 80019b2:	2b20      	cmp	r3, #32
 80019b4:	d11e      	bne.n	80019f4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <HAL_RCC_OscConfig+0x32c>)
 80019b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ba:	2202      	movs	r2, #2
 80019bc:	4013      	ands	r3, r2
 80019be:	d100      	bne.n	80019c2 <HAL_RCC_OscConfig+0x31e>
 80019c0:	e0b6      	b.n	8001b30 <HAL_RCC_OscConfig+0x48c>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d000      	beq.n	80019cc <HAL_RCC_OscConfig+0x328>
 80019ca:	e0b1      	b.n	8001b30 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e171      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
 80019d0:	40021000 	.word	0x40021000
 80019d4:	fffeffff 	.word	0xfffeffff
 80019d8:	fffbffff 	.word	0xfffbffff
 80019dc:	ffff80ff 	.word	0xffff80ff
 80019e0:	ffffc7ff 	.word	0xffffc7ff
 80019e4:	00f42400 	.word	0x00f42400
 80019e8:	20000004 	.word	0x20000004
 80019ec:	20000008 	.word	0x20000008
 80019f0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019f4:	4bb1      	ldr	r3, [pc, #708]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 80019f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	055b      	lsls	r3, r3, #21
 80019fc:	4013      	ands	r3, r2
 80019fe:	d101      	bne.n	8001a04 <HAL_RCC_OscConfig+0x360>
 8001a00:	2301      	movs	r3, #1
 8001a02:	e000      	b.n	8001a06 <HAL_RCC_OscConfig+0x362>
 8001a04:	2300      	movs	r3, #0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d011      	beq.n	8001a2e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	4bac      	ldr	r3, [pc, #688]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001a0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a0e:	4bab      	ldr	r3, [pc, #684]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001a10:	2180      	movs	r1, #128	; 0x80
 8001a12:	0549      	lsls	r1, r1, #21
 8001a14:	430a      	orrs	r2, r1
 8001a16:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a18:	4ba8      	ldr	r3, [pc, #672]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001a1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	055b      	lsls	r3, r3, #21
 8001a20:	4013      	ands	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001a26:	231f      	movs	r3, #31
 8001a28:	18fb      	adds	r3, r7, r3
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a2e:	4ba4      	ldr	r3, [pc, #656]	; (8001cc0 <HAL_RCC_OscConfig+0x61c>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	2380      	movs	r3, #128	; 0x80
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	4013      	ands	r3, r2
 8001a38:	d11a      	bne.n	8001a70 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a3a:	4ba1      	ldr	r3, [pc, #644]	; (8001cc0 <HAL_RCC_OscConfig+0x61c>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	4ba0      	ldr	r3, [pc, #640]	; (8001cc0 <HAL_RCC_OscConfig+0x61c>)
 8001a40:	2180      	movs	r1, #128	; 0x80
 8001a42:	0049      	lsls	r1, r1, #1
 8001a44:	430a      	orrs	r2, r1
 8001a46:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001a48:	f7ff fb5a 	bl	8001100 <HAL_GetTick>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a52:	f7ff fb55 	bl	8001100 <HAL_GetTick>
 8001a56:	0002      	movs	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e127      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a64:	4b96      	ldr	r3, [pc, #600]	; (8001cc0 <HAL_RCC_OscConfig+0x61c>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d0f0      	beq.n	8001a52 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d106      	bne.n	8001a86 <HAL_RCC_OscConfig+0x3e2>
 8001a78:	4b90      	ldr	r3, [pc, #576]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001a7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a7c:	4b8f      	ldr	r3, [pc, #572]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001a7e:	2101      	movs	r1, #1
 8001a80:	430a      	orrs	r2, r1
 8001a82:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a84:	e01c      	b.n	8001ac0 <HAL_RCC_OscConfig+0x41c>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	2b05      	cmp	r3, #5
 8001a8c:	d10c      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x404>
 8001a8e:	4b8b      	ldr	r3, [pc, #556]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001a90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a92:	4b8a      	ldr	r3, [pc, #552]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001a94:	2104      	movs	r1, #4
 8001a96:	430a      	orrs	r2, r1
 8001a98:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a9a:	4b88      	ldr	r3, [pc, #544]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001a9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a9e:	4b87      	ldr	r3, [pc, #540]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001aa6:	e00b      	b.n	8001ac0 <HAL_RCC_OscConfig+0x41c>
 8001aa8:	4b84      	ldr	r3, [pc, #528]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001aaa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001aac:	4b83      	ldr	r3, [pc, #524]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001aae:	2101      	movs	r1, #1
 8001ab0:	438a      	bics	r2, r1
 8001ab2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ab4:	4b81      	ldr	r3, [pc, #516]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001ab6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ab8:	4b80      	ldr	r3, [pc, #512]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001aba:	2104      	movs	r1, #4
 8001abc:	438a      	bics	r2, r1
 8001abe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d014      	beq.n	8001af2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fb1a 	bl	8001100 <HAL_GetTick>
 8001acc:	0003      	movs	r3, r0
 8001ace:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ad0:	e009      	b.n	8001ae6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad2:	f7ff fb15 	bl	8001100 <HAL_GetTick>
 8001ad6:	0002      	movs	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	4a79      	ldr	r2, [pc, #484]	; (8001cc4 <HAL_RCC_OscConfig+0x620>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e0e6      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ae6:	4b75      	ldr	r3, [pc, #468]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aea:	2202      	movs	r2, #2
 8001aec:	4013      	ands	r3, r2
 8001aee:	d0f0      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x42e>
 8001af0:	e013      	b.n	8001b1a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af2:	f7ff fb05 	bl	8001100 <HAL_GetTick>
 8001af6:	0003      	movs	r3, r0
 8001af8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001afa:	e009      	b.n	8001b10 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001afc:	f7ff fb00 	bl	8001100 <HAL_GetTick>
 8001b00:	0002      	movs	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	4a6f      	ldr	r2, [pc, #444]	; (8001cc4 <HAL_RCC_OscConfig+0x620>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e0d1      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b10:	4b6a      	ldr	r3, [pc, #424]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b14:	2202      	movs	r2, #2
 8001b16:	4013      	ands	r3, r2
 8001b18:	d1f0      	bne.n	8001afc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001b1a:	231f      	movs	r3, #31
 8001b1c:	18fb      	adds	r3, r7, r3
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d105      	bne.n	8001b30 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001b24:	4b65      	ldr	r3, [pc, #404]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001b26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b28:	4b64      	ldr	r3, [pc, #400]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001b2a:	4967      	ldr	r1, [pc, #412]	; (8001cc8 <HAL_RCC_OscConfig+0x624>)
 8001b2c:	400a      	ands	r2, r1
 8001b2e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d100      	bne.n	8001b3a <HAL_RCC_OscConfig+0x496>
 8001b38:	e0bb      	b.n	8001cb2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b3a:	4b60      	ldr	r3, [pc, #384]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	2238      	movs	r2, #56	; 0x38
 8001b40:	4013      	ands	r3, r2
 8001b42:	2b10      	cmp	r3, #16
 8001b44:	d100      	bne.n	8001b48 <HAL_RCC_OscConfig+0x4a4>
 8001b46:	e07b      	b.n	8001c40 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d156      	bne.n	8001bfe <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b50:	4b5a      	ldr	r3, [pc, #360]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b59      	ldr	r3, [pc, #356]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001b56:	495d      	ldr	r1, [pc, #372]	; (8001ccc <HAL_RCC_OscConfig+0x628>)
 8001b58:	400a      	ands	r2, r1
 8001b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fad0 	bl	8001100 <HAL_GetTick>
 8001b60:	0003      	movs	r3, r0
 8001b62:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b66:	f7ff facb 	bl	8001100 <HAL_GetTick>
 8001b6a:	0002      	movs	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e09d      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b78:	4b50      	ldr	r3, [pc, #320]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	2380      	movs	r3, #128	; 0x80
 8001b7e:	049b      	lsls	r3, r3, #18
 8001b80:	4013      	ands	r3, r2
 8001b82:	d1f0      	bne.n	8001b66 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b84:	4b4d      	ldr	r3, [pc, #308]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	4a51      	ldr	r2, [pc, #324]	; (8001cd0 <HAL_RCC_OscConfig+0x62c>)
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	0019      	movs	r1, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a1a      	ldr	r2, [r3, #32]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b96:	431a      	orrs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	4b42      	ldr	r3, [pc, #264]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bb8:	4b40      	ldr	r3, [pc, #256]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b3f      	ldr	r3, [pc, #252]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001bbe:	2180      	movs	r1, #128	; 0x80
 8001bc0:	0449      	lsls	r1, r1, #17
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001bc6:	4b3d      	ldr	r3, [pc, #244]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	4b3c      	ldr	r3, [pc, #240]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001bcc:	2180      	movs	r1, #128	; 0x80
 8001bce:	0549      	lsls	r1, r1, #21
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd4:	f7ff fa94 	bl	8001100 <HAL_GetTick>
 8001bd8:	0003      	movs	r3, r0
 8001bda:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bde:	f7ff fa8f 	bl	8001100 <HAL_GetTick>
 8001be2:	0002      	movs	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e061      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf0:	4b32      	ldr	r3, [pc, #200]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	2380      	movs	r3, #128	; 0x80
 8001bf6:	049b      	lsls	r3, r3, #18
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d0f0      	beq.n	8001bde <HAL_RCC_OscConfig+0x53a>
 8001bfc:	e059      	b.n	8001cb2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfe:	4b2f      	ldr	r3, [pc, #188]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	4b2e      	ldr	r3, [pc, #184]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001c04:	4931      	ldr	r1, [pc, #196]	; (8001ccc <HAL_RCC_OscConfig+0x628>)
 8001c06:	400a      	ands	r2, r1
 8001c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0a:	f7ff fa79 	bl	8001100 <HAL_GetTick>
 8001c0e:	0003      	movs	r3, r0
 8001c10:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c14:	f7ff fa74 	bl	8001100 <HAL_GetTick>
 8001c18:	0002      	movs	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e046      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c26:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	2380      	movs	r3, #128	; 0x80
 8001c2c:	049b      	lsls	r3, r3, #18
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001c32:	4b22      	ldr	r3, [pc, #136]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	4b21      	ldr	r3, [pc, #132]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001c38:	4926      	ldr	r1, [pc, #152]	; (8001cd4 <HAL_RCC_OscConfig+0x630>)
 8001c3a:	400a      	ands	r2, r1
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	e038      	b.n	8001cb2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d101      	bne.n	8001c4c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e033      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001c4c:	4b1b      	ldr	r3, [pc, #108]	; (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	2203      	movs	r2, #3
 8001c56:	401a      	ands	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d126      	bne.n	8001cae <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	2270      	movs	r2, #112	; 0x70
 8001c64:	401a      	ands	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d11f      	bne.n	8001cae <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	23fe      	movs	r3, #254	; 0xfe
 8001c72:	01db      	lsls	r3, r3, #7
 8001c74:	401a      	ands	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d116      	bne.n	8001cae <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	23f8      	movs	r3, #248	; 0xf8
 8001c84:	039b      	lsls	r3, r3, #14
 8001c86:	401a      	ands	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d10e      	bne.n	8001cae <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	23e0      	movs	r3, #224	; 0xe0
 8001c94:	051b      	lsls	r3, r3, #20
 8001c96:	401a      	ands	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d106      	bne.n	8001cae <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	0f5b      	lsrs	r3, r3, #29
 8001ca4:	075a      	lsls	r2, r3, #29
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d001      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b008      	add	sp, #32
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40007000 	.word	0x40007000
 8001cc4:	00001388 	.word	0x00001388
 8001cc8:	efffffff 	.word	0xefffffff
 8001ccc:	feffffff 	.word	0xfeffffff
 8001cd0:	11c1808c 	.word	0x11c1808c
 8001cd4:	eefefffc 	.word	0xeefefffc

08001cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e0e9      	b.n	8001ec0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cec:	4b76      	ldr	r3, [pc, #472]	; (8001ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2207      	movs	r2, #7
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d91e      	bls.n	8001d38 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfa:	4b73      	ldr	r3, [pc, #460]	; (8001ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2207      	movs	r2, #7
 8001d00:	4393      	bics	r3, r2
 8001d02:	0019      	movs	r1, r3
 8001d04:	4b70      	ldr	r3, [pc, #448]	; (8001ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d0c:	f7ff f9f8 	bl	8001100 <HAL_GetTick>
 8001d10:	0003      	movs	r3, r0
 8001d12:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d14:	e009      	b.n	8001d2a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d16:	f7ff f9f3 	bl	8001100 <HAL_GetTick>
 8001d1a:	0002      	movs	r2, r0
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	4a6a      	ldr	r2, [pc, #424]	; (8001ecc <HAL_RCC_ClockConfig+0x1f4>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e0ca      	b.n	8001ec0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d2a:	4b67      	ldr	r3, [pc, #412]	; (8001ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2207      	movs	r2, #7
 8001d30:	4013      	ands	r3, r2
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d1ee      	bne.n	8001d16 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d015      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2204      	movs	r2, #4
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d006      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d4c:	4b60      	ldr	r3, [pc, #384]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	4b5f      	ldr	r3, [pc, #380]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d52:	21e0      	movs	r1, #224	; 0xe0
 8001d54:	01c9      	lsls	r1, r1, #7
 8001d56:	430a      	orrs	r2, r1
 8001d58:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d5a:	4b5d      	ldr	r3, [pc, #372]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	4a5d      	ldr	r2, [pc, #372]	; (8001ed4 <HAL_RCC_ClockConfig+0x1fc>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	0019      	movs	r1, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	4b59      	ldr	r3, [pc, #356]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2201      	movs	r2, #1
 8001d74:	4013      	ands	r3, r2
 8001d76:	d057      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d107      	bne.n	8001d90 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d80:	4b53      	ldr	r3, [pc, #332]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	029b      	lsls	r3, r3, #10
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d12b      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e097      	b.n	8001ec0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d107      	bne.n	8001da8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d98:	4b4d      	ldr	r3, [pc, #308]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	049b      	lsls	r3, r3, #18
 8001da0:	4013      	ands	r3, r2
 8001da2:	d11f      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e08b      	b.n	8001ec0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d107      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001db0:	4b47      	ldr	r3, [pc, #284]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	4013      	ands	r3, r2
 8001dba:	d113      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e07f      	b.n	8001ec0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b03      	cmp	r3, #3
 8001dc6:	d106      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dc8:	4b41      	ldr	r3, [pc, #260]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8001dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dcc:	2202      	movs	r2, #2
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d108      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e074      	b.n	8001ec0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dd6:	4b3e      	ldr	r3, [pc, #248]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8001dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dda:	2202      	movs	r2, #2
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d101      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e06d      	b.n	8001ec0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001de4:	4b3a      	ldr	r3, [pc, #232]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2207      	movs	r2, #7
 8001dea:	4393      	bics	r3, r2
 8001dec:	0019      	movs	r1, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	4b37      	ldr	r3, [pc, #220]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8001df4:	430a      	orrs	r2, r1
 8001df6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001df8:	f7ff f982 	bl	8001100 <HAL_GetTick>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e00:	e009      	b.n	8001e16 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e02:	f7ff f97d 	bl	8001100 <HAL_GetTick>
 8001e06:	0002      	movs	r2, r0
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	4a2f      	ldr	r2, [pc, #188]	; (8001ecc <HAL_RCC_ClockConfig+0x1f4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e054      	b.n	8001ec0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e16:	4b2e      	ldr	r3, [pc, #184]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2238      	movs	r2, #56	; 0x38
 8001e1c:	401a      	ands	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d1ec      	bne.n	8001e02 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e28:	4b27      	ldr	r3, [pc, #156]	; (8001ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2207      	movs	r2, #7
 8001e2e:	4013      	ands	r3, r2
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d21e      	bcs.n	8001e74 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e36:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2207      	movs	r2, #7
 8001e3c:	4393      	bics	r3, r2
 8001e3e:	0019      	movs	r1, r3
 8001e40:	4b21      	ldr	r3, [pc, #132]	; (8001ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e48:	f7ff f95a 	bl	8001100 <HAL_GetTick>
 8001e4c:	0003      	movs	r3, r0
 8001e4e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e50:	e009      	b.n	8001e66 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e52:	f7ff f955 	bl	8001100 <HAL_GetTick>
 8001e56:	0002      	movs	r2, r0
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	4a1b      	ldr	r2, [pc, #108]	; (8001ecc <HAL_RCC_ClockConfig+0x1f4>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e02c      	b.n	8001ec0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e66:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2207      	movs	r2, #7
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d1ee      	bne.n	8001e52 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2204      	movs	r2, #4
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d009      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e7e:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	4a15      	ldr	r2, [pc, #84]	; (8001ed8 <HAL_RCC_ClockConfig+0x200>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	0019      	movs	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68da      	ldr	r2, [r3, #12]
 8001e8c:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e92:	f000 f829 	bl	8001ee8 <HAL_RCC_GetSysClockFreq>
 8001e96:	0001      	movs	r1, r0
 8001e98:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	0a1b      	lsrs	r3, r3, #8
 8001e9e:	220f      	movs	r2, #15
 8001ea0:	401a      	ands	r2, r3
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <HAL_RCC_ClockConfig+0x204>)
 8001ea4:	0092      	lsls	r2, r2, #2
 8001ea6:	58d3      	ldr	r3, [r2, r3]
 8001ea8:	221f      	movs	r2, #31
 8001eaa:	4013      	ands	r3, r2
 8001eac:	000a      	movs	r2, r1
 8001eae:	40da      	lsrs	r2, r3
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_RCC_ClockConfig+0x208>)
 8001eb2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <HAL_RCC_ClockConfig+0x20c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	0018      	movs	r0, r3
 8001eba:	f7ff f8c5 	bl	8001048 <HAL_InitTick>
 8001ebe:	0003      	movs	r3, r0
}
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	b004      	add	sp, #16
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40022000 	.word	0x40022000
 8001ecc:	00001388 	.word	0x00001388
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	fffff0ff 	.word	0xfffff0ff
 8001ed8:	ffff8fff 	.word	0xffff8fff
 8001edc:	080044a8 	.word	0x080044a8
 8001ee0:	20000004 	.word	0x20000004
 8001ee4:	20000008 	.word	0x20000008

08001ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eee:	4b3c      	ldr	r3, [pc, #240]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2238      	movs	r2, #56	; 0x38
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d10f      	bne.n	8001f18 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001ef8:	4b39      	ldr	r3, [pc, #228]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	0adb      	lsrs	r3, r3, #11
 8001efe:	2207      	movs	r2, #7
 8001f00:	4013      	ands	r3, r2
 8001f02:	2201      	movs	r2, #1
 8001f04:	409a      	lsls	r2, r3
 8001f06:	0013      	movs	r3, r2
 8001f08:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001f0a:	6839      	ldr	r1, [r7, #0]
 8001f0c:	4835      	ldr	r0, [pc, #212]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f0e:	f7fe f8f9 	bl	8000104 <__udivsi3>
 8001f12:	0003      	movs	r3, r0
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	e05d      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f18:	4b31      	ldr	r3, [pc, #196]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	2238      	movs	r2, #56	; 0x38
 8001f1e:	4013      	ands	r3, r2
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d102      	bne.n	8001f2a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f24:	4b30      	ldr	r3, [pc, #192]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	e054      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f2a:	4b2d      	ldr	r3, [pc, #180]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2238      	movs	r2, #56	; 0x38
 8001f30:	4013      	ands	r3, r2
 8001f32:	2b10      	cmp	r3, #16
 8001f34:	d138      	bne.n	8001fa8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001f36:	4b2a      	ldr	r3, [pc, #168]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f40:	4b27      	ldr	r3, [pc, #156]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	091b      	lsrs	r3, r3, #4
 8001f46:	2207      	movs	r2, #7
 8001f48:	4013      	ands	r3, r2
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2b03      	cmp	r3, #3
 8001f52:	d10d      	bne.n	8001f70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f54:	68b9      	ldr	r1, [r7, #8]
 8001f56:	4824      	ldr	r0, [pc, #144]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f58:	f7fe f8d4 	bl	8000104 <__udivsi3>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	0019      	movs	r1, r3
 8001f60:	4b1f      	ldr	r3, [pc, #124]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	227f      	movs	r2, #127	; 0x7f
 8001f68:	4013      	ands	r3, r2
 8001f6a:	434b      	muls	r3, r1
 8001f6c:	617b      	str	r3, [r7, #20]
        break;
 8001f6e:	e00d      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001f70:	68b9      	ldr	r1, [r7, #8]
 8001f72:	481c      	ldr	r0, [pc, #112]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f74:	f7fe f8c6 	bl	8000104 <__udivsi3>
 8001f78:	0003      	movs	r3, r0
 8001f7a:	0019      	movs	r1, r3
 8001f7c:	4b18      	ldr	r3, [pc, #96]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	0a1b      	lsrs	r3, r3, #8
 8001f82:	227f      	movs	r2, #127	; 0x7f
 8001f84:	4013      	ands	r3, r2
 8001f86:	434b      	muls	r3, r1
 8001f88:	617b      	str	r3, [r7, #20]
        break;
 8001f8a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001f8c:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	0f5b      	lsrs	r3, r3, #29
 8001f92:	2207      	movs	r2, #7
 8001f94:	4013      	ands	r3, r2
 8001f96:	3301      	adds	r3, #1
 8001f98:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	6978      	ldr	r0, [r7, #20]
 8001f9e:	f7fe f8b1 	bl	8000104 <__udivsi3>
 8001fa2:	0003      	movs	r3, r0
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	e015      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	2238      	movs	r2, #56	; 0x38
 8001fae:	4013      	ands	r3, r2
 8001fb0:	2b20      	cmp	r3, #32
 8001fb2:	d103      	bne.n	8001fbc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001fb4:	2380      	movs	r3, #128	; 0x80
 8001fb6:	021b      	lsls	r3, r3, #8
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	e00b      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001fbc:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2238      	movs	r2, #56	; 0x38
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	2b18      	cmp	r3, #24
 8001fc6:	d103      	bne.n	8001fd0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001fc8:	23fa      	movs	r3, #250	; 0xfa
 8001fca:	01db      	lsls	r3, r3, #7
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	e001      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001fd4:	693b      	ldr	r3, [r7, #16]
}
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	b006      	add	sp, #24
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	00f42400 	.word	0x00f42400
 8001fe8:	007a1200 	.word	0x007a1200

08001fec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ff0:	4b02      	ldr	r3, [pc, #8]	; (8001ffc <HAL_RCC_GetHCLKFreq+0x10>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
}
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	20000004 	.word	0x20000004

08002000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002000:	b5b0      	push	{r4, r5, r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002004:	f7ff fff2 	bl	8001fec <HAL_RCC_GetHCLKFreq>
 8002008:	0004      	movs	r4, r0
 800200a:	f7ff fb3f 	bl	800168c <LL_RCC_GetAPB1Prescaler>
 800200e:	0003      	movs	r3, r0
 8002010:	0b1a      	lsrs	r2, r3, #12
 8002012:	4b05      	ldr	r3, [pc, #20]	; (8002028 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002014:	0092      	lsls	r2, r2, #2
 8002016:	58d3      	ldr	r3, [r2, r3]
 8002018:	221f      	movs	r2, #31
 800201a:	4013      	ands	r3, r2
 800201c:	40dc      	lsrs	r4, r3
 800201e:	0023      	movs	r3, r4
}
 8002020:	0018      	movs	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	bdb0      	pop	{r4, r5, r7, pc}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	080044e8 	.word	0x080044e8

0800202c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002034:	2313      	movs	r3, #19
 8002036:	18fb      	adds	r3, r7, r3
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800203c:	2312      	movs	r3, #18
 800203e:	18fb      	adds	r3, r7, r3
 8002040:	2200      	movs	r2, #0
 8002042:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	2380      	movs	r3, #128	; 0x80
 800204a:	029b      	lsls	r3, r3, #10
 800204c:	4013      	ands	r3, r2
 800204e:	d100      	bne.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002050:	e0a3      	b.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002052:	2011      	movs	r0, #17
 8002054:	183b      	adds	r3, r7, r0
 8002056:	2200      	movs	r2, #0
 8002058:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800205a:	4bc3      	ldr	r3, [pc, #780]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800205c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800205e:	2380      	movs	r3, #128	; 0x80
 8002060:	055b      	lsls	r3, r3, #21
 8002062:	4013      	ands	r3, r2
 8002064:	d110      	bne.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002066:	4bc0      	ldr	r3, [pc, #768]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002068:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800206a:	4bbf      	ldr	r3, [pc, #764]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800206c:	2180      	movs	r1, #128	; 0x80
 800206e:	0549      	lsls	r1, r1, #21
 8002070:	430a      	orrs	r2, r1
 8002072:	63da      	str	r2, [r3, #60]	; 0x3c
 8002074:	4bbc      	ldr	r3, [pc, #752]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002076:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002078:	2380      	movs	r3, #128	; 0x80
 800207a:	055b      	lsls	r3, r3, #21
 800207c:	4013      	ands	r3, r2
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002082:	183b      	adds	r3, r7, r0
 8002084:	2201      	movs	r2, #1
 8002086:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002088:	4bb8      	ldr	r3, [pc, #736]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4bb7      	ldr	r3, [pc, #732]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800208e:	2180      	movs	r1, #128	; 0x80
 8002090:	0049      	lsls	r1, r1, #1
 8002092:	430a      	orrs	r2, r1
 8002094:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002096:	f7ff f833 	bl	8001100 <HAL_GetTick>
 800209a:	0003      	movs	r3, r0
 800209c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800209e:	e00b      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a0:	f7ff f82e 	bl	8001100 <HAL_GetTick>
 80020a4:	0002      	movs	r2, r0
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d904      	bls.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80020ae:	2313      	movs	r3, #19
 80020b0:	18fb      	adds	r3, r7, r3
 80020b2:	2203      	movs	r2, #3
 80020b4:	701a      	strb	r2, [r3, #0]
        break;
 80020b6:	e005      	b.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020b8:	4bac      	ldr	r3, [pc, #688]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	4013      	ands	r3, r2
 80020c2:	d0ed      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80020c4:	2313      	movs	r3, #19
 80020c6:	18fb      	adds	r3, r7, r3
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d154      	bne.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020ce:	4ba6      	ldr	r3, [pc, #664]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020d2:	23c0      	movs	r3, #192	; 0xc0
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4013      	ands	r3, r2
 80020d8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d019      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d014      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020ea:	4b9f      	ldr	r3, [pc, #636]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ee:	4aa0      	ldr	r2, [pc, #640]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020f4:	4b9c      	ldr	r3, [pc, #624]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020f8:	4b9b      	ldr	r3, [pc, #620]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020fa:	2180      	movs	r1, #128	; 0x80
 80020fc:	0249      	lsls	r1, r1, #9
 80020fe:	430a      	orrs	r2, r1
 8002100:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002102:	4b99      	ldr	r3, [pc, #612]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002104:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002106:	4b98      	ldr	r3, [pc, #608]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002108:	499a      	ldr	r1, [pc, #616]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800210a:	400a      	ands	r2, r1
 800210c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800210e:	4b96      	ldr	r3, [pc, #600]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	2201      	movs	r2, #1
 8002118:	4013      	ands	r3, r2
 800211a:	d016      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211c:	f7fe fff0 	bl	8001100 <HAL_GetTick>
 8002120:	0003      	movs	r3, r0
 8002122:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002124:	e00c      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002126:	f7fe ffeb 	bl	8001100 <HAL_GetTick>
 800212a:	0002      	movs	r2, r0
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	4a91      	ldr	r2, [pc, #580]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d904      	bls.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002136:	2313      	movs	r3, #19
 8002138:	18fb      	adds	r3, r7, r3
 800213a:	2203      	movs	r2, #3
 800213c:	701a      	strb	r2, [r3, #0]
            break;
 800213e:	e004      	b.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002140:	4b89      	ldr	r3, [pc, #548]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002144:	2202      	movs	r2, #2
 8002146:	4013      	ands	r3, r2
 8002148:	d0ed      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800214a:	2313      	movs	r3, #19
 800214c:	18fb      	adds	r3, r7, r3
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10a      	bne.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002154:	4b84      	ldr	r3, [pc, #528]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002158:	4a85      	ldr	r2, [pc, #532]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800215a:	4013      	ands	r3, r2
 800215c:	0019      	movs	r1, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002162:	4b81      	ldr	r3, [pc, #516]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002164:	430a      	orrs	r2, r1
 8002166:	65da      	str	r2, [r3, #92]	; 0x5c
 8002168:	e00c      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800216a:	2312      	movs	r3, #18
 800216c:	18fb      	adds	r3, r7, r3
 800216e:	2213      	movs	r2, #19
 8002170:	18ba      	adds	r2, r7, r2
 8002172:	7812      	ldrb	r2, [r2, #0]
 8002174:	701a      	strb	r2, [r3, #0]
 8002176:	e005      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002178:	2312      	movs	r3, #18
 800217a:	18fb      	adds	r3, r7, r3
 800217c:	2213      	movs	r2, #19
 800217e:	18ba      	adds	r2, r7, r2
 8002180:	7812      	ldrb	r2, [r2, #0]
 8002182:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002184:	2311      	movs	r3, #17
 8002186:	18fb      	adds	r3, r7, r3
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d105      	bne.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800218e:	4b76      	ldr	r3, [pc, #472]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002190:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002192:	4b75      	ldr	r3, [pc, #468]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002194:	4979      	ldr	r1, [pc, #484]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002196:	400a      	ands	r2, r1
 8002198:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2201      	movs	r2, #1
 80021a0:	4013      	ands	r3, r2
 80021a2:	d009      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021a4:	4b70      	ldr	r3, [pc, #448]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a8:	2203      	movs	r2, #3
 80021aa:	4393      	bics	r3, r2
 80021ac:	0019      	movs	r1, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	4b6d      	ldr	r3, [pc, #436]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021b4:	430a      	orrs	r2, r1
 80021b6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2202      	movs	r2, #2
 80021be:	4013      	ands	r3, r2
 80021c0:	d009      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021c2:	4b69      	ldr	r3, [pc, #420]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c6:	220c      	movs	r2, #12
 80021c8:	4393      	bics	r3, r2
 80021ca:	0019      	movs	r1, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	4b65      	ldr	r3, [pc, #404]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021d2:	430a      	orrs	r2, r1
 80021d4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2210      	movs	r2, #16
 80021dc:	4013      	ands	r3, r2
 80021de:	d009      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021e0:	4b61      	ldr	r3, [pc, #388]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e4:	4a66      	ldr	r2, [pc, #408]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80021e6:	4013      	ands	r3, r2
 80021e8:	0019      	movs	r1, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	4b5e      	ldr	r3, [pc, #376]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021f0:	430a      	orrs	r2, r1
 80021f2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4013      	ands	r3, r2
 80021fe:	d009      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002200:	4b59      	ldr	r3, [pc, #356]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002204:	4a5f      	ldr	r2, [pc, #380]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002206:	4013      	ands	r3, r2
 8002208:	0019      	movs	r1, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	699a      	ldr	r2, [r3, #24]
 800220e:	4b56      	ldr	r3, [pc, #344]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002210:	430a      	orrs	r2, r1
 8002212:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	2380      	movs	r3, #128	; 0x80
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	4013      	ands	r3, r2
 800221e:	d009      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002220:	4b51      	ldr	r3, [pc, #324]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002224:	4a58      	ldr	r2, [pc, #352]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002226:	4013      	ands	r3, r2
 8002228:	0019      	movs	r1, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69da      	ldr	r2, [r3, #28]
 800222e:	4b4e      	ldr	r3, [pc, #312]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002230:	430a      	orrs	r2, r1
 8002232:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2220      	movs	r2, #32
 800223a:	4013      	ands	r3, r2
 800223c:	d009      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800223e:	4b4a      	ldr	r3, [pc, #296]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002242:	4a52      	ldr	r2, [pc, #328]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002244:	4013      	ands	r3, r2
 8002246:	0019      	movs	r1, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691a      	ldr	r2, [r3, #16]
 800224c:	4b46      	ldr	r3, [pc, #280]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800224e:	430a      	orrs	r2, r1
 8002250:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	2380      	movs	r3, #128	; 0x80
 8002258:	01db      	lsls	r3, r3, #7
 800225a:	4013      	ands	r3, r2
 800225c:	d015      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800225e:	4b42      	ldr	r3, [pc, #264]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	0899      	lsrs	r1, r3, #2
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a1a      	ldr	r2, [r3, #32]
 800226a:	4b3f      	ldr	r3, [pc, #252]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800226c:	430a      	orrs	r2, r1
 800226e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a1a      	ldr	r2, [r3, #32]
 8002274:	2380      	movs	r3, #128	; 0x80
 8002276:	05db      	lsls	r3, r3, #23
 8002278:	429a      	cmp	r2, r3
 800227a:	d106      	bne.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800227c:	4b3a      	ldr	r3, [pc, #232]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	4b39      	ldr	r3, [pc, #228]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002282:	2180      	movs	r1, #128	; 0x80
 8002284:	0249      	lsls	r1, r1, #9
 8002286:	430a      	orrs	r2, r1
 8002288:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	031b      	lsls	r3, r3, #12
 8002292:	4013      	ands	r3, r2
 8002294:	d009      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002296:	4b34      	ldr	r3, [pc, #208]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229a:	2240      	movs	r2, #64	; 0x40
 800229c:	4393      	bics	r3, r2
 800229e:	0019      	movs	r1, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022a4:	4b30      	ldr	r3, [pc, #192]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022a6:	430a      	orrs	r2, r1
 80022a8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	2380      	movs	r3, #128	; 0x80
 80022b0:	039b      	lsls	r3, r3, #14
 80022b2:	4013      	ands	r3, r2
 80022b4:	d016      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80022b6:	4b2c      	ldr	r3, [pc, #176]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ba:	4a35      	ldr	r2, [pc, #212]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80022bc:	4013      	ands	r3, r2
 80022be:	0019      	movs	r1, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022c4:	4b28      	ldr	r3, [pc, #160]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022c6:	430a      	orrs	r2, r1
 80022c8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	03db      	lsls	r3, r3, #15
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d106      	bne.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80022d6:	4b24      	ldr	r3, [pc, #144]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	4b23      	ldr	r3, [pc, #140]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022dc:	2180      	movs	r1, #128	; 0x80
 80022de:	0449      	lsls	r1, r1, #17
 80022e0:	430a      	orrs	r2, r1
 80022e2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	2380      	movs	r3, #128	; 0x80
 80022ea:	03db      	lsls	r3, r3, #15
 80022ec:	4013      	ands	r3, r2
 80022ee:	d016      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80022f0:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f4:	4a27      	ldr	r2, [pc, #156]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80022f6:	4013      	ands	r3, r2
 80022f8:	0019      	movs	r1, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022fe:	4b1a      	ldr	r3, [pc, #104]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002300:	430a      	orrs	r2, r1
 8002302:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	045b      	lsls	r3, r3, #17
 800230c:	429a      	cmp	r2, r3
 800230e:	d106      	bne.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002310:	4b15      	ldr	r3, [pc, #84]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	4b14      	ldr	r3, [pc, #80]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002316:	2180      	movs	r1, #128	; 0x80
 8002318:	0449      	lsls	r1, r1, #17
 800231a:	430a      	orrs	r2, r1
 800231c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	2380      	movs	r3, #128	; 0x80
 8002324:	011b      	lsls	r3, r3, #4
 8002326:	4013      	ands	r3, r2
 8002328:	d016      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800232a:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800232c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232e:	4a1a      	ldr	r2, [pc, #104]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002330:	4013      	ands	r3, r2
 8002332:	0019      	movs	r1, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	695a      	ldr	r2, [r3, #20]
 8002338:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800233a:	430a      	orrs	r2, r1
 800233c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695a      	ldr	r2, [r3, #20]
 8002342:	2380      	movs	r3, #128	; 0x80
 8002344:	01db      	lsls	r3, r3, #7
 8002346:	429a      	cmp	r2, r3
 8002348:	d106      	bne.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800234a:	4b07      	ldr	r3, [pc, #28]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	4b06      	ldr	r3, [pc, #24]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002350:	2180      	movs	r1, #128	; 0x80
 8002352:	0249      	lsls	r1, r1, #9
 8002354:	430a      	orrs	r2, r1
 8002356:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002358:	2312      	movs	r3, #18
 800235a:	18fb      	adds	r3, r7, r3
 800235c:	781b      	ldrb	r3, [r3, #0]
}
 800235e:	0018      	movs	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	b006      	add	sp, #24
 8002364:	bd80      	pop	{r7, pc}
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	40021000 	.word	0x40021000
 800236c:	40007000 	.word	0x40007000
 8002370:	fffffcff 	.word	0xfffffcff
 8002374:	fffeffff 	.word	0xfffeffff
 8002378:	00001388 	.word	0x00001388
 800237c:	efffffff 	.word	0xefffffff
 8002380:	fffff3ff 	.word	0xfffff3ff
 8002384:	fff3ffff 	.word	0xfff3ffff
 8002388:	ffcfffff 	.word	0xffcfffff
 800238c:	ffffcfff 	.word	0xffffcfff
 8002390:	ffbfffff 	.word	0xffbfffff
 8002394:	feffffff 	.word	0xfeffffff
 8002398:	ffff3fff 	.word	0xffff3fff

0800239c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e04a      	b.n	8002444 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	223d      	movs	r2, #61	; 0x3d
 80023b2:	5c9b      	ldrb	r3, [r3, r2]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d107      	bne.n	80023ca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	223c      	movs	r2, #60	; 0x3c
 80023be:	2100      	movs	r1, #0
 80023c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	0018      	movs	r0, r3
 80023c6:	f7fe fcd9 	bl	8000d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	223d      	movs	r2, #61	; 0x3d
 80023ce:	2102      	movs	r1, #2
 80023d0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3304      	adds	r3, #4
 80023da:	0019      	movs	r1, r3
 80023dc:	0010      	movs	r0, r2
 80023de:	f000 fd03 	bl	8002de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2248      	movs	r2, #72	; 0x48
 80023e6:	2101      	movs	r1, #1
 80023e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	223e      	movs	r2, #62	; 0x3e
 80023ee:	2101      	movs	r1, #1
 80023f0:	5499      	strb	r1, [r3, r2]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	223f      	movs	r2, #63	; 0x3f
 80023f6:	2101      	movs	r1, #1
 80023f8:	5499      	strb	r1, [r3, r2]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2240      	movs	r2, #64	; 0x40
 80023fe:	2101      	movs	r1, #1
 8002400:	5499      	strb	r1, [r3, r2]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2241      	movs	r2, #65	; 0x41
 8002406:	2101      	movs	r1, #1
 8002408:	5499      	strb	r1, [r3, r2]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2242      	movs	r2, #66	; 0x42
 800240e:	2101      	movs	r1, #1
 8002410:	5499      	strb	r1, [r3, r2]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2243      	movs	r2, #67	; 0x43
 8002416:	2101      	movs	r1, #1
 8002418:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2244      	movs	r2, #68	; 0x44
 800241e:	2101      	movs	r1, #1
 8002420:	5499      	strb	r1, [r3, r2]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2245      	movs	r2, #69	; 0x45
 8002426:	2101      	movs	r1, #1
 8002428:	5499      	strb	r1, [r3, r2]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2246      	movs	r2, #70	; 0x46
 800242e:	2101      	movs	r1, #1
 8002430:	5499      	strb	r1, [r3, r2]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2247      	movs	r2, #71	; 0x47
 8002436:	2101      	movs	r1, #1
 8002438:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	223d      	movs	r2, #61	; 0x3d
 800243e:	2101      	movs	r1, #1
 8002440:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	0018      	movs	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	b002      	add	sp, #8
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	223d      	movs	r2, #61	; 0x3d
 8002458:	5c9b      	ldrb	r3, [r3, r2]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b01      	cmp	r3, #1
 800245e:	d001      	beq.n	8002464 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e042      	b.n	80024ea <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	223d      	movs	r2, #61	; 0x3d
 8002468:	2102      	movs	r1, #2
 800246a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2101      	movs	r1, #1
 8002478:	430a      	orrs	r2, r1
 800247a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a1c      	ldr	r2, [pc, #112]	; (80024f4 <HAL_TIM_Base_Start_IT+0xa8>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d00f      	beq.n	80024a6 <HAL_TIM_Base_Start_IT+0x5a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	2380      	movs	r3, #128	; 0x80
 800248c:	05db      	lsls	r3, r3, #23
 800248e:	429a      	cmp	r2, r3
 8002490:	d009      	beq.n	80024a6 <HAL_TIM_Base_Start_IT+0x5a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a18      	ldr	r2, [pc, #96]	; (80024f8 <HAL_TIM_Base_Start_IT+0xac>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d004      	beq.n	80024a6 <HAL_TIM_Base_Start_IT+0x5a>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a16      	ldr	r2, [pc, #88]	; (80024fc <HAL_TIM_Base_Start_IT+0xb0>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d116      	bne.n	80024d4 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	4a14      	ldr	r2, [pc, #80]	; (8002500 <HAL_TIM_Base_Start_IT+0xb4>)
 80024ae:	4013      	ands	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2b06      	cmp	r3, #6
 80024b6:	d016      	beq.n	80024e6 <HAL_TIM_Base_Start_IT+0x9a>
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	025b      	lsls	r3, r3, #9
 80024be:	429a      	cmp	r2, r3
 80024c0:	d011      	beq.n	80024e6 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2101      	movs	r1, #1
 80024ce:	430a      	orrs	r2, r1
 80024d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d2:	e008      	b.n	80024e6 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2101      	movs	r1, #1
 80024e0:	430a      	orrs	r2, r1
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	e000      	b.n	80024e8 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024e6:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	0018      	movs	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	b004      	add	sp, #16
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	46c0      	nop			; (mov r8, r8)
 80024f4:	40012c00 	.word	0x40012c00
 80024f8:	40000400 	.word	0x40000400
 80024fc:	40014000 	.word	0x40014000
 8002500:	00010007 	.word	0x00010007

08002504 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e04a      	b.n	80025ac <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	223d      	movs	r2, #61	; 0x3d
 800251a:	5c9b      	ldrb	r3, [r3, r2]
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d107      	bne.n	8002532 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	223c      	movs	r2, #60	; 0x3c
 8002526:	2100      	movs	r1, #0
 8002528:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	0018      	movs	r0, r3
 800252e:	f000 f841 	bl	80025b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	223d      	movs	r2, #61	; 0x3d
 8002536:	2102      	movs	r1, #2
 8002538:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3304      	adds	r3, #4
 8002542:	0019      	movs	r1, r3
 8002544:	0010      	movs	r0, r2
 8002546:	f000 fc4f 	bl	8002de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2248      	movs	r2, #72	; 0x48
 800254e:	2101      	movs	r1, #1
 8002550:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	223e      	movs	r2, #62	; 0x3e
 8002556:	2101      	movs	r1, #1
 8002558:	5499      	strb	r1, [r3, r2]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	223f      	movs	r2, #63	; 0x3f
 800255e:	2101      	movs	r1, #1
 8002560:	5499      	strb	r1, [r3, r2]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2240      	movs	r2, #64	; 0x40
 8002566:	2101      	movs	r1, #1
 8002568:	5499      	strb	r1, [r3, r2]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2241      	movs	r2, #65	; 0x41
 800256e:	2101      	movs	r1, #1
 8002570:	5499      	strb	r1, [r3, r2]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2242      	movs	r2, #66	; 0x42
 8002576:	2101      	movs	r1, #1
 8002578:	5499      	strb	r1, [r3, r2]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2243      	movs	r2, #67	; 0x43
 800257e:	2101      	movs	r1, #1
 8002580:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2244      	movs	r2, #68	; 0x44
 8002586:	2101      	movs	r1, #1
 8002588:	5499      	strb	r1, [r3, r2]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2245      	movs	r2, #69	; 0x45
 800258e:	2101      	movs	r1, #1
 8002590:	5499      	strb	r1, [r3, r2]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2246      	movs	r2, #70	; 0x46
 8002596:	2101      	movs	r1, #1
 8002598:	5499      	strb	r1, [r3, r2]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2247      	movs	r2, #71	; 0x47
 800259e:	2101      	movs	r1, #1
 80025a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	223d      	movs	r2, #61	; 0x3d
 80025a6:	2101      	movs	r1, #1
 80025a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	0018      	movs	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b002      	add	sp, #8
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025bc:	46c0      	nop			; (mov r8, r8)
 80025be:	46bd      	mov	sp, r7
 80025c0:	b002      	add	sp, #8
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d108      	bne.n	80025e6 <HAL_TIM_PWM_Start+0x22>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	223e      	movs	r2, #62	; 0x3e
 80025d8:	5c9b      	ldrb	r3, [r3, r2]
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	3b01      	subs	r3, #1
 80025de:	1e5a      	subs	r2, r3, #1
 80025e0:	4193      	sbcs	r3, r2
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	e037      	b.n	8002656 <HAL_TIM_PWM_Start+0x92>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d108      	bne.n	80025fe <HAL_TIM_PWM_Start+0x3a>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	223f      	movs	r2, #63	; 0x3f
 80025f0:	5c9b      	ldrb	r3, [r3, r2]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	3b01      	subs	r3, #1
 80025f6:	1e5a      	subs	r2, r3, #1
 80025f8:	4193      	sbcs	r3, r2
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	e02b      	b.n	8002656 <HAL_TIM_PWM_Start+0x92>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b08      	cmp	r3, #8
 8002602:	d108      	bne.n	8002616 <HAL_TIM_PWM_Start+0x52>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2240      	movs	r2, #64	; 0x40
 8002608:	5c9b      	ldrb	r3, [r3, r2]
 800260a:	b2db      	uxtb	r3, r3
 800260c:	3b01      	subs	r3, #1
 800260e:	1e5a      	subs	r2, r3, #1
 8002610:	4193      	sbcs	r3, r2
 8002612:	b2db      	uxtb	r3, r3
 8002614:	e01f      	b.n	8002656 <HAL_TIM_PWM_Start+0x92>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	2b0c      	cmp	r3, #12
 800261a:	d108      	bne.n	800262e <HAL_TIM_PWM_Start+0x6a>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2241      	movs	r2, #65	; 0x41
 8002620:	5c9b      	ldrb	r3, [r3, r2]
 8002622:	b2db      	uxtb	r3, r3
 8002624:	3b01      	subs	r3, #1
 8002626:	1e5a      	subs	r2, r3, #1
 8002628:	4193      	sbcs	r3, r2
 800262a:	b2db      	uxtb	r3, r3
 800262c:	e013      	b.n	8002656 <HAL_TIM_PWM_Start+0x92>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b10      	cmp	r3, #16
 8002632:	d108      	bne.n	8002646 <HAL_TIM_PWM_Start+0x82>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2242      	movs	r2, #66	; 0x42
 8002638:	5c9b      	ldrb	r3, [r3, r2]
 800263a:	b2db      	uxtb	r3, r3
 800263c:	3b01      	subs	r3, #1
 800263e:	1e5a      	subs	r2, r3, #1
 8002640:	4193      	sbcs	r3, r2
 8002642:	b2db      	uxtb	r3, r3
 8002644:	e007      	b.n	8002656 <HAL_TIM_PWM_Start+0x92>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2243      	movs	r2, #67	; 0x43
 800264a:	5c9b      	ldrb	r3, [r3, r2]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	3b01      	subs	r3, #1
 8002650:	1e5a      	subs	r2, r3, #1
 8002652:	4193      	sbcs	r3, r2
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e08b      	b.n	8002776 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d104      	bne.n	800266e <HAL_TIM_PWM_Start+0xaa>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	223e      	movs	r2, #62	; 0x3e
 8002668:	2102      	movs	r1, #2
 800266a:	5499      	strb	r1, [r3, r2]
 800266c:	e023      	b.n	80026b6 <HAL_TIM_PWM_Start+0xf2>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2b04      	cmp	r3, #4
 8002672:	d104      	bne.n	800267e <HAL_TIM_PWM_Start+0xba>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	223f      	movs	r2, #63	; 0x3f
 8002678:	2102      	movs	r1, #2
 800267a:	5499      	strb	r1, [r3, r2]
 800267c:	e01b      	b.n	80026b6 <HAL_TIM_PWM_Start+0xf2>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2b08      	cmp	r3, #8
 8002682:	d104      	bne.n	800268e <HAL_TIM_PWM_Start+0xca>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2240      	movs	r2, #64	; 0x40
 8002688:	2102      	movs	r1, #2
 800268a:	5499      	strb	r1, [r3, r2]
 800268c:	e013      	b.n	80026b6 <HAL_TIM_PWM_Start+0xf2>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2b0c      	cmp	r3, #12
 8002692:	d104      	bne.n	800269e <HAL_TIM_PWM_Start+0xda>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2241      	movs	r2, #65	; 0x41
 8002698:	2102      	movs	r1, #2
 800269a:	5499      	strb	r1, [r3, r2]
 800269c:	e00b      	b.n	80026b6 <HAL_TIM_PWM_Start+0xf2>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2b10      	cmp	r3, #16
 80026a2:	d104      	bne.n	80026ae <HAL_TIM_PWM_Start+0xea>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2242      	movs	r2, #66	; 0x42
 80026a8:	2102      	movs	r1, #2
 80026aa:	5499      	strb	r1, [r3, r2]
 80026ac:	e003      	b.n	80026b6 <HAL_TIM_PWM_Start+0xf2>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2243      	movs	r2, #67	; 0x43
 80026b2:	2102      	movs	r1, #2
 80026b4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6839      	ldr	r1, [r7, #0]
 80026bc:	2201      	movs	r2, #1
 80026be:	0018      	movs	r0, r3
 80026c0:	f000 ff72 	bl	80035a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a2d      	ldr	r2, [pc, #180]	; (8002780 <HAL_TIM_PWM_Start+0x1bc>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d00e      	beq.n	80026ec <HAL_TIM_PWM_Start+0x128>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a2c      	ldr	r2, [pc, #176]	; (8002784 <HAL_TIM_PWM_Start+0x1c0>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d009      	beq.n	80026ec <HAL_TIM_PWM_Start+0x128>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a2a      	ldr	r2, [pc, #168]	; (8002788 <HAL_TIM_PWM_Start+0x1c4>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d004      	beq.n	80026ec <HAL_TIM_PWM_Start+0x128>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a29      	ldr	r2, [pc, #164]	; (800278c <HAL_TIM_PWM_Start+0x1c8>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d101      	bne.n	80026f0 <HAL_TIM_PWM_Start+0x12c>
 80026ec:	2301      	movs	r3, #1
 80026ee:	e000      	b.n	80026f2 <HAL_TIM_PWM_Start+0x12e>
 80026f0:	2300      	movs	r3, #0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d008      	beq.n	8002708 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2180      	movs	r1, #128	; 0x80
 8002702:	0209      	lsls	r1, r1, #8
 8002704:	430a      	orrs	r2, r1
 8002706:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a1c      	ldr	r2, [pc, #112]	; (8002780 <HAL_TIM_PWM_Start+0x1bc>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d00f      	beq.n	8002732 <HAL_TIM_PWM_Start+0x16e>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	2380      	movs	r3, #128	; 0x80
 8002718:	05db      	lsls	r3, r3, #23
 800271a:	429a      	cmp	r2, r3
 800271c:	d009      	beq.n	8002732 <HAL_TIM_PWM_Start+0x16e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a1b      	ldr	r2, [pc, #108]	; (8002790 <HAL_TIM_PWM_Start+0x1cc>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d004      	beq.n	8002732 <HAL_TIM_PWM_Start+0x16e>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a15      	ldr	r2, [pc, #84]	; (8002784 <HAL_TIM_PWM_Start+0x1c0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d116      	bne.n	8002760 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	4a16      	ldr	r2, [pc, #88]	; (8002794 <HAL_TIM_PWM_Start+0x1d0>)
 800273a:	4013      	ands	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2b06      	cmp	r3, #6
 8002742:	d016      	beq.n	8002772 <HAL_TIM_PWM_Start+0x1ae>
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	2380      	movs	r3, #128	; 0x80
 8002748:	025b      	lsls	r3, r3, #9
 800274a:	429a      	cmp	r2, r3
 800274c:	d011      	beq.n	8002772 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2101      	movs	r1, #1
 800275a:	430a      	orrs	r2, r1
 800275c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800275e:	e008      	b.n	8002772 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2101      	movs	r1, #1
 800276c:	430a      	orrs	r2, r1
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	e000      	b.n	8002774 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002772:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	0018      	movs	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	b004      	add	sp, #16
 800277c:	bd80      	pop	{r7, pc}
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	40012c00 	.word	0x40012c00
 8002784:	40014000 	.word	0x40014000
 8002788:	40014400 	.word	0x40014400
 800278c:	40014800 	.word	0x40014800
 8002790:	40000400 	.word	0x40000400
 8002794:	00010007 	.word	0x00010007

08002798 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	2202      	movs	r2, #2
 80027a8:	4013      	ands	r3, r2
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d124      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	2202      	movs	r2, #2
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d11d      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2203      	movs	r2, #3
 80027c2:	4252      	negs	r2, r2
 80027c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	2203      	movs	r2, #3
 80027d4:	4013      	ands	r3, r2
 80027d6:	d004      	beq.n	80027e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	0018      	movs	r0, r3
 80027dc:	f000 faec 	bl	8002db8 <HAL_TIM_IC_CaptureCallback>
 80027e0:	e007      	b.n	80027f2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	0018      	movs	r0, r3
 80027e6:	f000 fadf 	bl	8002da8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	0018      	movs	r0, r3
 80027ee:	f000 faeb 	bl	8002dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	2204      	movs	r2, #4
 8002800:	4013      	ands	r3, r2
 8002802:	2b04      	cmp	r3, #4
 8002804:	d125      	bne.n	8002852 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	2204      	movs	r2, #4
 800280e:	4013      	ands	r3, r2
 8002810:	2b04      	cmp	r3, #4
 8002812:	d11e      	bne.n	8002852 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2205      	movs	r2, #5
 800281a:	4252      	negs	r2, r2
 800281c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2202      	movs	r2, #2
 8002822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699a      	ldr	r2, [r3, #24]
 800282a:	23c0      	movs	r3, #192	; 0xc0
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4013      	ands	r3, r2
 8002830:	d004      	beq.n	800283c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	0018      	movs	r0, r3
 8002836:	f000 fabf 	bl	8002db8 <HAL_TIM_IC_CaptureCallback>
 800283a:	e007      	b.n	800284c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	0018      	movs	r0, r3
 8002840:	f000 fab2 	bl	8002da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	0018      	movs	r0, r3
 8002848:	f000 fabe 	bl	8002dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	2208      	movs	r2, #8
 800285a:	4013      	ands	r3, r2
 800285c:	2b08      	cmp	r3, #8
 800285e:	d124      	bne.n	80028aa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	2208      	movs	r2, #8
 8002868:	4013      	ands	r3, r2
 800286a:	2b08      	cmp	r3, #8
 800286c:	d11d      	bne.n	80028aa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2209      	movs	r2, #9
 8002874:	4252      	negs	r2, r2
 8002876:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2204      	movs	r2, #4
 800287c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	2203      	movs	r2, #3
 8002886:	4013      	ands	r3, r2
 8002888:	d004      	beq.n	8002894 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	0018      	movs	r0, r3
 800288e:	f000 fa93 	bl	8002db8 <HAL_TIM_IC_CaptureCallback>
 8002892:	e007      	b.n	80028a4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	0018      	movs	r0, r3
 8002898:	f000 fa86 	bl	8002da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	0018      	movs	r0, r3
 80028a0:	f000 fa92 	bl	8002dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	2210      	movs	r2, #16
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b10      	cmp	r3, #16
 80028b6:	d125      	bne.n	8002904 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2210      	movs	r2, #16
 80028c0:	4013      	ands	r3, r2
 80028c2:	2b10      	cmp	r3, #16
 80028c4:	d11e      	bne.n	8002904 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2211      	movs	r2, #17
 80028cc:	4252      	negs	r2, r2
 80028ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2208      	movs	r2, #8
 80028d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	69da      	ldr	r2, [r3, #28]
 80028dc:	23c0      	movs	r3, #192	; 0xc0
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4013      	ands	r3, r2
 80028e2:	d004      	beq.n	80028ee <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	0018      	movs	r0, r3
 80028e8:	f000 fa66 	bl	8002db8 <HAL_TIM_IC_CaptureCallback>
 80028ec:	e007      	b.n	80028fe <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	0018      	movs	r0, r3
 80028f2:	f000 fa59 	bl	8002da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	0018      	movs	r0, r3
 80028fa:	f000 fa65 	bl	8002dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	2201      	movs	r2, #1
 800290c:	4013      	ands	r3, r2
 800290e:	2b01      	cmp	r3, #1
 8002910:	d10f      	bne.n	8002932 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	2201      	movs	r2, #1
 800291a:	4013      	ands	r3, r2
 800291c:	2b01      	cmp	r3, #1
 800291e:	d108      	bne.n	8002932 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2202      	movs	r2, #2
 8002926:	4252      	negs	r2, r2
 8002928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	0018      	movs	r0, r3
 800292e:	f7fe f8f1 	bl	8000b14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	2280      	movs	r2, #128	; 0x80
 800293a:	4013      	ands	r3, r2
 800293c:	2b80      	cmp	r3, #128	; 0x80
 800293e:	d10f      	bne.n	8002960 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	2280      	movs	r2, #128	; 0x80
 8002948:	4013      	ands	r3, r2
 800294a:	2b80      	cmp	r3, #128	; 0x80
 800294c:	d108      	bne.n	8002960 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2281      	movs	r2, #129	; 0x81
 8002954:	4252      	negs	r2, r2
 8002956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	0018      	movs	r0, r3
 800295c:	f000 ff64 	bl	8003828 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	691a      	ldr	r2, [r3, #16]
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	401a      	ands	r2, r3
 800296c:	2380      	movs	r3, #128	; 0x80
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	429a      	cmp	r2, r3
 8002972:	d10e      	bne.n	8002992 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	2280      	movs	r2, #128	; 0x80
 800297c:	4013      	ands	r3, r2
 800297e:	2b80      	cmp	r3, #128	; 0x80
 8002980:	d107      	bne.n	8002992 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a1c      	ldr	r2, [pc, #112]	; (80029f8 <HAL_TIM_IRQHandler+0x260>)
 8002988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	0018      	movs	r0, r3
 800298e:	f000 ff53 	bl	8003838 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	2240      	movs	r2, #64	; 0x40
 800299a:	4013      	ands	r3, r2
 800299c:	2b40      	cmp	r3, #64	; 0x40
 800299e:	d10f      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	2240      	movs	r2, #64	; 0x40
 80029a8:	4013      	ands	r3, r2
 80029aa:	2b40      	cmp	r3, #64	; 0x40
 80029ac:	d108      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2241      	movs	r2, #65	; 0x41
 80029b4:	4252      	negs	r2, r2
 80029b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	0018      	movs	r0, r3
 80029bc:	f000 fa0c 	bl	8002dd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	2220      	movs	r2, #32
 80029c8:	4013      	ands	r3, r2
 80029ca:	2b20      	cmp	r3, #32
 80029cc:	d10f      	bne.n	80029ee <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	2220      	movs	r2, #32
 80029d6:	4013      	ands	r3, r2
 80029d8:	2b20      	cmp	r3, #32
 80029da:	d108      	bne.n	80029ee <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2221      	movs	r2, #33	; 0x21
 80029e2:	4252      	negs	r2, r2
 80029e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	0018      	movs	r0, r3
 80029ea:	f000 ff15 	bl	8003818 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	46bd      	mov	sp, r7
 80029f2:	b002      	add	sp, #8
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	fffffeff 	.word	0xfffffeff

080029fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a08:	2317      	movs	r3, #23
 8002a0a:	18fb      	adds	r3, r7, r3
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	223c      	movs	r2, #60	; 0x3c
 8002a14:	5c9b      	ldrb	r3, [r3, r2]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d101      	bne.n	8002a1e <HAL_TIM_PWM_ConfigChannel+0x22>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e0e5      	b.n	8002bea <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	223c      	movs	r2, #60	; 0x3c
 8002a22:	2101      	movs	r1, #1
 8002a24:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b14      	cmp	r3, #20
 8002a2a:	d900      	bls.n	8002a2e <HAL_TIM_PWM_ConfigChannel+0x32>
 8002a2c:	e0d1      	b.n	8002bd2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	009a      	lsls	r2, r3, #2
 8002a32:	4b70      	ldr	r3, [pc, #448]	; (8002bf4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002a34:	18d3      	adds	r3, r2, r3
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	0011      	movs	r1, r2
 8002a42:	0018      	movs	r0, r3
 8002a44:	f000 fa50 	bl	8002ee8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699a      	ldr	r2, [r3, #24]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2108      	movs	r1, #8
 8002a54:	430a      	orrs	r2, r1
 8002a56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	699a      	ldr	r2, [r3, #24]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2104      	movs	r1, #4
 8002a64:	438a      	bics	r2, r1
 8002a66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6999      	ldr	r1, [r3, #24]
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	691a      	ldr	r2, [r3, #16]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	619a      	str	r2, [r3, #24]
      break;
 8002a7a:	e0af      	b.n	8002bdc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	0011      	movs	r1, r2
 8002a84:	0018      	movs	r0, r3
 8002a86:	f000 fab9 	bl	8002ffc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	699a      	ldr	r2, [r3, #24]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2180      	movs	r1, #128	; 0x80
 8002a96:	0109      	lsls	r1, r1, #4
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699a      	ldr	r2, [r3, #24]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4954      	ldr	r1, [pc, #336]	; (8002bf8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002aa8:	400a      	ands	r2, r1
 8002aaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6999      	ldr	r1, [r3, #24]
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	021a      	lsls	r2, r3, #8
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	619a      	str	r2, [r3, #24]
      break;
 8002ac0:	e08c      	b.n	8002bdc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	0011      	movs	r1, r2
 8002aca:	0018      	movs	r0, r3
 8002acc:	f000 fb1a 	bl	8003104 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	69da      	ldr	r2, [r3, #28]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2108      	movs	r1, #8
 8002adc:	430a      	orrs	r2, r1
 8002ade:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	69da      	ldr	r2, [r3, #28]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2104      	movs	r1, #4
 8002aec:	438a      	bics	r2, r1
 8002aee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	69d9      	ldr	r1, [r3, #28]
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	691a      	ldr	r2, [r3, #16]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	61da      	str	r2, [r3, #28]
      break;
 8002b02:	e06b      	b.n	8002bdc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	0011      	movs	r1, r2
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f000 fb81 	bl	8003214 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	69da      	ldr	r2, [r3, #28]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2180      	movs	r1, #128	; 0x80
 8002b1e:	0109      	lsls	r1, r1, #4
 8002b20:	430a      	orrs	r2, r1
 8002b22:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	69da      	ldr	r2, [r3, #28]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4932      	ldr	r1, [pc, #200]	; (8002bf8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002b30:	400a      	ands	r2, r1
 8002b32:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	69d9      	ldr	r1, [r3, #28]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	021a      	lsls	r2, r3, #8
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	61da      	str	r2, [r3, #28]
      break;
 8002b48:	e048      	b.n	8002bdc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	0011      	movs	r1, r2
 8002b52:	0018      	movs	r0, r3
 8002b54:	f000 fbc8 	bl	80032e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2108      	movs	r1, #8
 8002b64:	430a      	orrs	r2, r1
 8002b66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2104      	movs	r1, #4
 8002b74:	438a      	bics	r2, r1
 8002b76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	691a      	ldr	r2, [r3, #16]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002b8a:	e027      	b.n	8002bdc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	0011      	movs	r1, r2
 8002b94:	0018      	movs	r0, r3
 8002b96:	f000 fc07 	bl	80033a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2180      	movs	r1, #128	; 0x80
 8002ba6:	0109      	lsls	r1, r1, #4
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4910      	ldr	r1, [pc, #64]	; (8002bf8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002bb8:	400a      	ands	r2, r1
 8002bba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	021a      	lsls	r2, r3, #8
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002bd0:	e004      	b.n	8002bdc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002bd2:	2317      	movs	r3, #23
 8002bd4:	18fb      	adds	r3, r7, r3
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	701a      	strb	r2, [r3, #0]
      break;
 8002bda:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	223c      	movs	r2, #60	; 0x3c
 8002be0:	2100      	movs	r1, #0
 8002be2:	5499      	strb	r1, [r3, r2]

  return status;
 8002be4:	2317      	movs	r3, #23
 8002be6:	18fb      	adds	r3, r7, r3
 8002be8:	781b      	ldrb	r3, [r3, #0]
}
 8002bea:	0018      	movs	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	b006      	add	sp, #24
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	08004508 	.word	0x08004508
 8002bf8:	fffffbff 	.word	0xfffffbff

08002bfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c06:	230f      	movs	r3, #15
 8002c08:	18fb      	adds	r3, r7, r3
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	223c      	movs	r2, #60	; 0x3c
 8002c12:	5c9b      	ldrb	r3, [r3, r2]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_TIM_ConfigClockSource+0x20>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e0bc      	b.n	8002d96 <HAL_TIM_ConfigClockSource+0x19a>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	223c      	movs	r2, #60	; 0x3c
 8002c20:	2101      	movs	r1, #1
 8002c22:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	223d      	movs	r2, #61	; 0x3d
 8002c28:	2102      	movs	r1, #2
 8002c2a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	4a5a      	ldr	r2, [pc, #360]	; (8002da0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	4a59      	ldr	r2, [pc, #356]	; (8002da4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2280      	movs	r2, #128	; 0x80
 8002c52:	0192      	lsls	r2, r2, #6
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d040      	beq.n	8002cda <HAL_TIM_ConfigClockSource+0xde>
 8002c58:	2280      	movs	r2, #128	; 0x80
 8002c5a:	0192      	lsls	r2, r2, #6
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d900      	bls.n	8002c62 <HAL_TIM_ConfigClockSource+0x66>
 8002c60:	e088      	b.n	8002d74 <HAL_TIM_ConfigClockSource+0x178>
 8002c62:	2280      	movs	r2, #128	; 0x80
 8002c64:	0152      	lsls	r2, r2, #5
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d100      	bne.n	8002c6c <HAL_TIM_ConfigClockSource+0x70>
 8002c6a:	e088      	b.n	8002d7e <HAL_TIM_ConfigClockSource+0x182>
 8002c6c:	2280      	movs	r2, #128	; 0x80
 8002c6e:	0152      	lsls	r2, r2, #5
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d900      	bls.n	8002c76 <HAL_TIM_ConfigClockSource+0x7a>
 8002c74:	e07e      	b.n	8002d74 <HAL_TIM_ConfigClockSource+0x178>
 8002c76:	2b70      	cmp	r3, #112	; 0x70
 8002c78:	d018      	beq.n	8002cac <HAL_TIM_ConfigClockSource+0xb0>
 8002c7a:	d900      	bls.n	8002c7e <HAL_TIM_ConfigClockSource+0x82>
 8002c7c:	e07a      	b.n	8002d74 <HAL_TIM_ConfigClockSource+0x178>
 8002c7e:	2b60      	cmp	r3, #96	; 0x60
 8002c80:	d04f      	beq.n	8002d22 <HAL_TIM_ConfigClockSource+0x126>
 8002c82:	d900      	bls.n	8002c86 <HAL_TIM_ConfigClockSource+0x8a>
 8002c84:	e076      	b.n	8002d74 <HAL_TIM_ConfigClockSource+0x178>
 8002c86:	2b50      	cmp	r3, #80	; 0x50
 8002c88:	d03b      	beq.n	8002d02 <HAL_TIM_ConfigClockSource+0x106>
 8002c8a:	d900      	bls.n	8002c8e <HAL_TIM_ConfigClockSource+0x92>
 8002c8c:	e072      	b.n	8002d74 <HAL_TIM_ConfigClockSource+0x178>
 8002c8e:	2b40      	cmp	r3, #64	; 0x40
 8002c90:	d057      	beq.n	8002d42 <HAL_TIM_ConfigClockSource+0x146>
 8002c92:	d900      	bls.n	8002c96 <HAL_TIM_ConfigClockSource+0x9a>
 8002c94:	e06e      	b.n	8002d74 <HAL_TIM_ConfigClockSource+0x178>
 8002c96:	2b30      	cmp	r3, #48	; 0x30
 8002c98:	d063      	beq.n	8002d62 <HAL_TIM_ConfigClockSource+0x166>
 8002c9a:	d86b      	bhi.n	8002d74 <HAL_TIM_ConfigClockSource+0x178>
 8002c9c:	2b20      	cmp	r3, #32
 8002c9e:	d060      	beq.n	8002d62 <HAL_TIM_ConfigClockSource+0x166>
 8002ca0:	d868      	bhi.n	8002d74 <HAL_TIM_ConfigClockSource+0x178>
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d05d      	beq.n	8002d62 <HAL_TIM_ConfigClockSource+0x166>
 8002ca6:	2b10      	cmp	r3, #16
 8002ca8:	d05b      	beq.n	8002d62 <HAL_TIM_ConfigClockSource+0x166>
 8002caa:	e063      	b.n	8002d74 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6818      	ldr	r0, [r3, #0]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	6899      	ldr	r1, [r3, #8]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f000 fc54 	bl	8003568 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2277      	movs	r2, #119	; 0x77
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	609a      	str	r2, [r3, #8]
      break;
 8002cd8:	e052      	b.n	8002d80 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6818      	ldr	r0, [r3, #0]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	6899      	ldr	r1, [r3, #8]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	f000 fc3d 	bl	8003568 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2180      	movs	r1, #128	; 0x80
 8002cfa:	01c9      	lsls	r1, r1, #7
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	609a      	str	r2, [r3, #8]
      break;
 8002d00:	e03e      	b.n	8002d80 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6818      	ldr	r0, [r3, #0]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	6859      	ldr	r1, [r3, #4]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	001a      	movs	r2, r3
 8002d10:	f000 fbae 	bl	8003470 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2150      	movs	r1, #80	; 0x50
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	f000 fc08 	bl	8003530 <TIM_ITRx_SetConfig>
      break;
 8002d20:	e02e      	b.n	8002d80 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	6859      	ldr	r1, [r3, #4]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	001a      	movs	r2, r3
 8002d30:	f000 fbcc 	bl	80034cc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2160      	movs	r1, #96	; 0x60
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f000 fbf8 	bl	8003530 <TIM_ITRx_SetConfig>
      break;
 8002d40:	e01e      	b.n	8002d80 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6818      	ldr	r0, [r3, #0]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	6859      	ldr	r1, [r3, #4]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	001a      	movs	r2, r3
 8002d50:	f000 fb8e 	bl	8003470 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2140      	movs	r1, #64	; 0x40
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f000 fbe8 	bl	8003530 <TIM_ITRx_SetConfig>
      break;
 8002d60:	e00e      	b.n	8002d80 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	0019      	movs	r1, r3
 8002d6c:	0010      	movs	r0, r2
 8002d6e:	f000 fbdf 	bl	8003530 <TIM_ITRx_SetConfig>
      break;
 8002d72:	e005      	b.n	8002d80 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002d74:	230f      	movs	r3, #15
 8002d76:	18fb      	adds	r3, r7, r3
 8002d78:	2201      	movs	r2, #1
 8002d7a:	701a      	strb	r2, [r3, #0]
      break;
 8002d7c:	e000      	b.n	8002d80 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002d7e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	223d      	movs	r2, #61	; 0x3d
 8002d84:	2101      	movs	r1, #1
 8002d86:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	223c      	movs	r2, #60	; 0x3c
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	5499      	strb	r1, [r3, r2]

  return status;
 8002d90:	230f      	movs	r3, #15
 8002d92:	18fb      	adds	r3, r7, r3
 8002d94:	781b      	ldrb	r3, [r3, #0]
}
 8002d96:	0018      	movs	r0, r3
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	b004      	add	sp, #16
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	ffceff88 	.word	0xffceff88
 8002da4:	ffff00ff 	.word	0xffff00ff

08002da8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002db0:	46c0      	nop			; (mov r8, r8)
 8002db2:	46bd      	mov	sp, r7
 8002db4:	b002      	add	sp, #8
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dc0:	46c0      	nop			; (mov r8, r8)
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	b002      	add	sp, #8
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dd0:	46c0      	nop			; (mov r8, r8)
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b002      	add	sp, #8
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002de0:	46c0      	nop			; (mov r8, r8)
 8002de2:	46bd      	mov	sp, r7
 8002de4:	b002      	add	sp, #8
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a34      	ldr	r2, [pc, #208]	; (8002ecc <TIM_Base_SetConfig+0xe4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d008      	beq.n	8002e12 <TIM_Base_SetConfig+0x2a>
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	2380      	movs	r3, #128	; 0x80
 8002e04:	05db      	lsls	r3, r3, #23
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d003      	beq.n	8002e12 <TIM_Base_SetConfig+0x2a>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a30      	ldr	r2, [pc, #192]	; (8002ed0 <TIM_Base_SetConfig+0xe8>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d108      	bne.n	8002e24 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2270      	movs	r2, #112	; 0x70
 8002e16:	4393      	bics	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a29      	ldr	r2, [pc, #164]	; (8002ecc <TIM_Base_SetConfig+0xe4>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d018      	beq.n	8002e5e <TIM_Base_SetConfig+0x76>
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	2380      	movs	r3, #128	; 0x80
 8002e30:	05db      	lsls	r3, r3, #23
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d013      	beq.n	8002e5e <TIM_Base_SetConfig+0x76>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a25      	ldr	r2, [pc, #148]	; (8002ed0 <TIM_Base_SetConfig+0xe8>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d00f      	beq.n	8002e5e <TIM_Base_SetConfig+0x76>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a24      	ldr	r2, [pc, #144]	; (8002ed4 <TIM_Base_SetConfig+0xec>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d00b      	beq.n	8002e5e <TIM_Base_SetConfig+0x76>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a23      	ldr	r2, [pc, #140]	; (8002ed8 <TIM_Base_SetConfig+0xf0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d007      	beq.n	8002e5e <TIM_Base_SetConfig+0x76>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a22      	ldr	r2, [pc, #136]	; (8002edc <TIM_Base_SetConfig+0xf4>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d003      	beq.n	8002e5e <TIM_Base_SetConfig+0x76>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a21      	ldr	r2, [pc, #132]	; (8002ee0 <TIM_Base_SetConfig+0xf8>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d108      	bne.n	8002e70 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	4a20      	ldr	r2, [pc, #128]	; (8002ee4 <TIM_Base_SetConfig+0xfc>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2280      	movs	r2, #128	; 0x80
 8002e74:	4393      	bics	r3, r2
 8002e76:	001a      	movs	r2, r3
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a0c      	ldr	r2, [pc, #48]	; (8002ecc <TIM_Base_SetConfig+0xe4>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d00b      	beq.n	8002eb6 <TIM_Base_SetConfig+0xce>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a0d      	ldr	r2, [pc, #52]	; (8002ed8 <TIM_Base_SetConfig+0xf0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d007      	beq.n	8002eb6 <TIM_Base_SetConfig+0xce>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a0c      	ldr	r2, [pc, #48]	; (8002edc <TIM_Base_SetConfig+0xf4>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d003      	beq.n	8002eb6 <TIM_Base_SetConfig+0xce>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a0b      	ldr	r2, [pc, #44]	; (8002ee0 <TIM_Base_SetConfig+0xf8>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d103      	bne.n	8002ebe <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	691a      	ldr	r2, [r3, #16]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	615a      	str	r2, [r3, #20]
}
 8002ec4:	46c0      	nop			; (mov r8, r8)
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b004      	add	sp, #16
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40012c00 	.word	0x40012c00
 8002ed0:	40000400 	.word	0x40000400
 8002ed4:	40002000 	.word	0x40002000
 8002ed8:	40014000 	.word	0x40014000
 8002edc:	40014400 	.word	0x40014400
 8002ee0:	40014800 	.word	0x40014800
 8002ee4:	fffffcff 	.word	0xfffffcff

08002ee8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	4393      	bics	r3, r2
 8002efa:	001a      	movs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	4a32      	ldr	r2, [pc, #200]	; (8002fe0 <TIM_OC1_SetConfig+0xf8>)
 8002f16:	4013      	ands	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2203      	movs	r2, #3
 8002f1e:	4393      	bics	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	4393      	bics	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a28      	ldr	r2, [pc, #160]	; (8002fe4 <TIM_OC1_SetConfig+0xfc>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00b      	beq.n	8002f5e <TIM_OC1_SetConfig+0x76>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a27      	ldr	r2, [pc, #156]	; (8002fe8 <TIM_OC1_SetConfig+0x100>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d007      	beq.n	8002f5e <TIM_OC1_SetConfig+0x76>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a26      	ldr	r2, [pc, #152]	; (8002fec <TIM_OC1_SetConfig+0x104>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d003      	beq.n	8002f5e <TIM_OC1_SetConfig+0x76>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a25      	ldr	r2, [pc, #148]	; (8002ff0 <TIM_OC1_SetConfig+0x108>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d10c      	bne.n	8002f78 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2208      	movs	r2, #8
 8002f62:	4393      	bics	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	2204      	movs	r2, #4
 8002f74:	4393      	bics	r3, r2
 8002f76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a1a      	ldr	r2, [pc, #104]	; (8002fe4 <TIM_OC1_SetConfig+0xfc>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d00b      	beq.n	8002f98 <TIM_OC1_SetConfig+0xb0>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a19      	ldr	r2, [pc, #100]	; (8002fe8 <TIM_OC1_SetConfig+0x100>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d007      	beq.n	8002f98 <TIM_OC1_SetConfig+0xb0>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a18      	ldr	r2, [pc, #96]	; (8002fec <TIM_OC1_SetConfig+0x104>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d003      	beq.n	8002f98 <TIM_OC1_SetConfig+0xb0>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a17      	ldr	r2, [pc, #92]	; (8002ff0 <TIM_OC1_SetConfig+0x108>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d111      	bne.n	8002fbc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	4a16      	ldr	r2, [pc, #88]	; (8002ff4 <TIM_OC1_SetConfig+0x10c>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	4a15      	ldr	r2, [pc, #84]	; (8002ff8 <TIM_OC1_SetConfig+0x110>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	621a      	str	r2, [r3, #32]
}
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	b006      	add	sp, #24
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	fffeff8f 	.word	0xfffeff8f
 8002fe4:	40012c00 	.word	0x40012c00
 8002fe8:	40014000 	.word	0x40014000
 8002fec:	40014400 	.word	0x40014400
 8002ff0:	40014800 	.word	0x40014800
 8002ff4:	fffffeff 	.word	0xfffffeff
 8002ff8:	fffffdff 	.word	0xfffffdff

08002ffc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	2210      	movs	r2, #16
 800300c:	4393      	bics	r3, r2
 800300e:	001a      	movs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4a2e      	ldr	r2, [pc, #184]	; (80030e4 <TIM_OC2_SetConfig+0xe8>)
 800302a:	4013      	ands	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	4a2d      	ldr	r2, [pc, #180]	; (80030e8 <TIM_OC2_SetConfig+0xec>)
 8003032:	4013      	ands	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	021b      	lsls	r3, r3, #8
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	4313      	orrs	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2220      	movs	r2, #32
 8003046:	4393      	bics	r3, r2
 8003048:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	4313      	orrs	r3, r2
 8003054:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a24      	ldr	r2, [pc, #144]	; (80030ec <TIM_OC2_SetConfig+0xf0>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d10d      	bne.n	800307a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2280      	movs	r2, #128	; 0x80
 8003062:	4393      	bics	r3, r2
 8003064:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	011b      	lsls	r3, r3, #4
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	4313      	orrs	r3, r2
 8003070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	2240      	movs	r2, #64	; 0x40
 8003076:	4393      	bics	r3, r2
 8003078:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a1b      	ldr	r2, [pc, #108]	; (80030ec <TIM_OC2_SetConfig+0xf0>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d00b      	beq.n	800309a <TIM_OC2_SetConfig+0x9e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a1a      	ldr	r2, [pc, #104]	; (80030f0 <TIM_OC2_SetConfig+0xf4>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d007      	beq.n	800309a <TIM_OC2_SetConfig+0x9e>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a19      	ldr	r2, [pc, #100]	; (80030f4 <TIM_OC2_SetConfig+0xf8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d003      	beq.n	800309a <TIM_OC2_SetConfig+0x9e>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a18      	ldr	r2, [pc, #96]	; (80030f8 <TIM_OC2_SetConfig+0xfc>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d113      	bne.n	80030c2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	4a17      	ldr	r2, [pc, #92]	; (80030fc <TIM_OC2_SetConfig+0x100>)
 800309e:	4013      	ands	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	4a16      	ldr	r2, [pc, #88]	; (8003100 <TIM_OC2_SetConfig+0x104>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	4313      	orrs	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	621a      	str	r2, [r3, #32]
}
 80030dc:	46c0      	nop			; (mov r8, r8)
 80030de:	46bd      	mov	sp, r7
 80030e0:	b006      	add	sp, #24
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	feff8fff 	.word	0xfeff8fff
 80030e8:	fffffcff 	.word	0xfffffcff
 80030ec:	40012c00 	.word	0x40012c00
 80030f0:	40014000 	.word	0x40014000
 80030f4:	40014400 	.word	0x40014400
 80030f8:	40014800 	.word	0x40014800
 80030fc:	fffffbff 	.word	0xfffffbff
 8003100:	fffff7ff 	.word	0xfffff7ff

08003104 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	4a35      	ldr	r2, [pc, #212]	; (80031e8 <TIM_OC3_SetConfig+0xe4>)
 8003114:	401a      	ands	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4a2f      	ldr	r2, [pc, #188]	; (80031ec <TIM_OC3_SetConfig+0xe8>)
 8003130:	4013      	ands	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2203      	movs	r2, #3
 8003138:	4393      	bics	r3, r2
 800313a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	4313      	orrs	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	4a29      	ldr	r2, [pc, #164]	; (80031f0 <TIM_OC3_SetConfig+0xec>)
 800314a:	4013      	ands	r3, r2
 800314c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	021b      	lsls	r3, r3, #8
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	4313      	orrs	r3, r2
 8003158:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a25      	ldr	r2, [pc, #148]	; (80031f4 <TIM_OC3_SetConfig+0xf0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d10d      	bne.n	800317e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	4a24      	ldr	r2, [pc, #144]	; (80031f8 <TIM_OC3_SetConfig+0xf4>)
 8003166:	4013      	ands	r3, r2
 8003168:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	021b      	lsls	r3, r3, #8
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	4313      	orrs	r3, r2
 8003174:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	4a20      	ldr	r2, [pc, #128]	; (80031fc <TIM_OC3_SetConfig+0xf8>)
 800317a:	4013      	ands	r3, r2
 800317c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a1c      	ldr	r2, [pc, #112]	; (80031f4 <TIM_OC3_SetConfig+0xf0>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d00b      	beq.n	800319e <TIM_OC3_SetConfig+0x9a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a1d      	ldr	r2, [pc, #116]	; (8003200 <TIM_OC3_SetConfig+0xfc>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d007      	beq.n	800319e <TIM_OC3_SetConfig+0x9a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a1c      	ldr	r2, [pc, #112]	; (8003204 <TIM_OC3_SetConfig+0x100>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d003      	beq.n	800319e <TIM_OC3_SetConfig+0x9a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a1b      	ldr	r2, [pc, #108]	; (8003208 <TIM_OC3_SetConfig+0x104>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d113      	bne.n	80031c6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4a1a      	ldr	r2, [pc, #104]	; (800320c <TIM_OC3_SetConfig+0x108>)
 80031a2:	4013      	ands	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4a19      	ldr	r2, [pc, #100]	; (8003210 <TIM_OC3_SetConfig+0x10c>)
 80031aa:	4013      	ands	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	621a      	str	r2, [r3, #32]
}
 80031e0:	46c0      	nop			; (mov r8, r8)
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b006      	add	sp, #24
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	fffffeff 	.word	0xfffffeff
 80031ec:	fffeff8f 	.word	0xfffeff8f
 80031f0:	fffffdff 	.word	0xfffffdff
 80031f4:	40012c00 	.word	0x40012c00
 80031f8:	fffff7ff 	.word	0xfffff7ff
 80031fc:	fffffbff 	.word	0xfffffbff
 8003200:	40014000 	.word	0x40014000
 8003204:	40014400 	.word	0x40014400
 8003208:	40014800 	.word	0x40014800
 800320c:	ffffefff 	.word	0xffffefff
 8003210:	ffffdfff 	.word	0xffffdfff

08003214 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	4a28      	ldr	r2, [pc, #160]	; (80032c4 <TIM_OC4_SetConfig+0xb0>)
 8003224:	401a      	ands	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4a22      	ldr	r2, [pc, #136]	; (80032c8 <TIM_OC4_SetConfig+0xb4>)
 8003240:	4013      	ands	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4a21      	ldr	r2, [pc, #132]	; (80032cc <TIM_OC4_SetConfig+0xb8>)
 8003248:	4013      	ands	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	021b      	lsls	r3, r3, #8
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4313      	orrs	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4a1d      	ldr	r2, [pc, #116]	; (80032d0 <TIM_OC4_SetConfig+0xbc>)
 800325c:	4013      	ands	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	031b      	lsls	r3, r3, #12
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a19      	ldr	r2, [pc, #100]	; (80032d4 <TIM_OC4_SetConfig+0xc0>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d00b      	beq.n	800328c <TIM_OC4_SetConfig+0x78>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a18      	ldr	r2, [pc, #96]	; (80032d8 <TIM_OC4_SetConfig+0xc4>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d007      	beq.n	800328c <TIM_OC4_SetConfig+0x78>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a17      	ldr	r2, [pc, #92]	; (80032dc <TIM_OC4_SetConfig+0xc8>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d003      	beq.n	800328c <TIM_OC4_SetConfig+0x78>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a16      	ldr	r2, [pc, #88]	; (80032e0 <TIM_OC4_SetConfig+0xcc>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d109      	bne.n	80032a0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	4a15      	ldr	r2, [pc, #84]	; (80032e4 <TIM_OC4_SetConfig+0xd0>)
 8003290:	4013      	ands	r3, r2
 8003292:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	019b      	lsls	r3, r3, #6
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	4313      	orrs	r3, r2
 800329e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	621a      	str	r2, [r3, #32]
}
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	46bd      	mov	sp, r7
 80032be:	b006      	add	sp, #24
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	ffffefff 	.word	0xffffefff
 80032c8:	feff8fff 	.word	0xfeff8fff
 80032cc:	fffffcff 	.word	0xfffffcff
 80032d0:	ffffdfff 	.word	0xffffdfff
 80032d4:	40012c00 	.word	0x40012c00
 80032d8:	40014000 	.word	0x40014000
 80032dc:	40014400 	.word	0x40014400
 80032e0:	40014800 	.word	0x40014800
 80032e4:	ffffbfff 	.word	0xffffbfff

080032e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	4a25      	ldr	r2, [pc, #148]	; (800338c <TIM_OC5_SetConfig+0xa4>)
 80032f8:	401a      	ands	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4a1f      	ldr	r2, [pc, #124]	; (8003390 <TIM_OC5_SetConfig+0xa8>)
 8003314:	4013      	ands	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	4313      	orrs	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4a1b      	ldr	r2, [pc, #108]	; (8003394 <TIM_OC5_SetConfig+0xac>)
 8003326:	4013      	ands	r3, r2
 8003328:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	041b      	lsls	r3, r3, #16
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a17      	ldr	r2, [pc, #92]	; (8003398 <TIM_OC5_SetConfig+0xb0>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d00b      	beq.n	8003356 <TIM_OC5_SetConfig+0x6e>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a16      	ldr	r2, [pc, #88]	; (800339c <TIM_OC5_SetConfig+0xb4>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d007      	beq.n	8003356 <TIM_OC5_SetConfig+0x6e>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a15      	ldr	r2, [pc, #84]	; (80033a0 <TIM_OC5_SetConfig+0xb8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d003      	beq.n	8003356 <TIM_OC5_SetConfig+0x6e>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a14      	ldr	r2, [pc, #80]	; (80033a4 <TIM_OC5_SetConfig+0xbc>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d109      	bne.n	800336a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	4a0c      	ldr	r2, [pc, #48]	; (800338c <TIM_OC5_SetConfig+0xa4>)
 800335a:	4013      	ands	r3, r2
 800335c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	021b      	lsls	r3, r3, #8
 8003364:	697a      	ldr	r2, [r7, #20]
 8003366:	4313      	orrs	r3, r2
 8003368:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	621a      	str	r2, [r3, #32]
}
 8003384:	46c0      	nop			; (mov r8, r8)
 8003386:	46bd      	mov	sp, r7
 8003388:	b006      	add	sp, #24
 800338a:	bd80      	pop	{r7, pc}
 800338c:	fffeffff 	.word	0xfffeffff
 8003390:	fffeff8f 	.word	0xfffeff8f
 8003394:	fffdffff 	.word	0xfffdffff
 8003398:	40012c00 	.word	0x40012c00
 800339c:	40014000 	.word	0x40014000
 80033a0:	40014400 	.word	0x40014400
 80033a4:	40014800 	.word	0x40014800

080033a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	4a26      	ldr	r2, [pc, #152]	; (8003450 <TIM_OC6_SetConfig+0xa8>)
 80033b8:	401a      	ands	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4a20      	ldr	r2, [pc, #128]	; (8003454 <TIM_OC6_SetConfig+0xac>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	021b      	lsls	r3, r3, #8
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4a1c      	ldr	r2, [pc, #112]	; (8003458 <TIM_OC6_SetConfig+0xb0>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	051b      	lsls	r3, r3, #20
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a18      	ldr	r2, [pc, #96]	; (800345c <TIM_OC6_SetConfig+0xb4>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d00b      	beq.n	8003418 <TIM_OC6_SetConfig+0x70>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a17      	ldr	r2, [pc, #92]	; (8003460 <TIM_OC6_SetConfig+0xb8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d007      	beq.n	8003418 <TIM_OC6_SetConfig+0x70>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a16      	ldr	r2, [pc, #88]	; (8003464 <TIM_OC6_SetConfig+0xbc>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d003      	beq.n	8003418 <TIM_OC6_SetConfig+0x70>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a15      	ldr	r2, [pc, #84]	; (8003468 <TIM_OC6_SetConfig+0xc0>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d109      	bne.n	800342c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	4a14      	ldr	r2, [pc, #80]	; (800346c <TIM_OC6_SetConfig+0xc4>)
 800341c:	4013      	ands	r3, r2
 800341e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	029b      	lsls	r3, r3, #10
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	4313      	orrs	r3, r2
 800342a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	621a      	str	r2, [r3, #32]
}
 8003446:	46c0      	nop			; (mov r8, r8)
 8003448:	46bd      	mov	sp, r7
 800344a:	b006      	add	sp, #24
 800344c:	bd80      	pop	{r7, pc}
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	ffefffff 	.word	0xffefffff
 8003454:	feff8fff 	.word	0xfeff8fff
 8003458:	ffdfffff 	.word	0xffdfffff
 800345c:	40012c00 	.word	0x40012c00
 8003460:	40014000 	.word	0x40014000
 8003464:	40014400 	.word	0x40014400
 8003468:	40014800 	.word	0x40014800
 800346c:	fffbffff 	.word	0xfffbffff

08003470 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	2201      	movs	r2, #1
 8003488:	4393      	bics	r3, r2
 800348a:	001a      	movs	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	22f0      	movs	r2, #240	; 0xf0
 800349a:	4393      	bics	r3, r2
 800349c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	220a      	movs	r2, #10
 80034ac:	4393      	bics	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	621a      	str	r2, [r3, #32]
}
 80034c4:	46c0      	nop			; (mov r8, r8)
 80034c6:	46bd      	mov	sp, r7
 80034c8:	b006      	add	sp, #24
 80034ca:	bd80      	pop	{r7, pc}

080034cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	2210      	movs	r2, #16
 80034de:	4393      	bics	r3, r2
 80034e0:	001a      	movs	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	4a0d      	ldr	r2, [pc, #52]	; (800352c <TIM_TI2_ConfigInputStage+0x60>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	031b      	lsls	r3, r3, #12
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	4313      	orrs	r3, r2
 8003502:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	22a0      	movs	r2, #160	; 0xa0
 8003508:	4393      	bics	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	4313      	orrs	r3, r2
 8003514:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	621a      	str	r2, [r3, #32]
}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	46bd      	mov	sp, r7
 8003526:	b006      	add	sp, #24
 8003528:	bd80      	pop	{r7, pc}
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	ffff0fff 	.word	0xffff0fff

08003530 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4a08      	ldr	r2, [pc, #32]	; (8003564 <TIM_ITRx_SetConfig+0x34>)
 8003544:	4013      	ands	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4313      	orrs	r3, r2
 800354e:	2207      	movs	r2, #7
 8003550:	4313      	orrs	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	609a      	str	r2, [r3, #8]
}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	46bd      	mov	sp, r7
 800355e:	b004      	add	sp, #16
 8003560:	bd80      	pop	{r7, pc}
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	ffcfff8f 	.word	0xffcfff8f

08003568 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
 8003574:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	4a09      	ldr	r2, [pc, #36]	; (80035a4 <TIM_ETR_SetConfig+0x3c>)
 8003580:	4013      	ands	r3, r2
 8003582:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	021a      	lsls	r2, r3, #8
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	431a      	orrs	r2, r3
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	4313      	orrs	r3, r2
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	4313      	orrs	r3, r2
 8003594:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	609a      	str	r2, [r3, #8]
}
 800359c:	46c0      	nop			; (mov r8, r8)
 800359e:	46bd      	mov	sp, r7
 80035a0:	b006      	add	sp, #24
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	ffff00ff 	.word	0xffff00ff

080035a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	221f      	movs	r2, #31
 80035b8:	4013      	ands	r3, r2
 80035ba:	2201      	movs	r2, #1
 80035bc:	409a      	lsls	r2, r3
 80035be:	0013      	movs	r3, r2
 80035c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	43d2      	mvns	r2, r2
 80035ca:	401a      	ands	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a1a      	ldr	r2, [r3, #32]
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	211f      	movs	r1, #31
 80035d8:	400b      	ands	r3, r1
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	4099      	lsls	r1, r3
 80035de:	000b      	movs	r3, r1
 80035e0:	431a      	orrs	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	621a      	str	r2, [r3, #32]
}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b006      	add	sp, #24
 80035ec:	bd80      	pop	{r7, pc}
	...

080035f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	223c      	movs	r2, #60	; 0x3c
 80035fe:	5c9b      	ldrb	r3, [r3, r2]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003604:	2302      	movs	r3, #2
 8003606:	e055      	b.n	80036b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	223c      	movs	r2, #60	; 0x3c
 800360c:	2101      	movs	r1, #1
 800360e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	223d      	movs	r2, #61	; 0x3d
 8003614:	2102      	movs	r1, #2
 8003616:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a23      	ldr	r2, [pc, #140]	; (80036bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d108      	bne.n	8003644 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	4a22      	ldr	r2, [pc, #136]	; (80036c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003636:	4013      	ands	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	4313      	orrs	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2270      	movs	r2, #112	; 0x70
 8003648:	4393      	bics	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a16      	ldr	r2, [pc, #88]	; (80036bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d00f      	beq.n	8003688 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	2380      	movs	r3, #128	; 0x80
 800366e:	05db      	lsls	r3, r3, #23
 8003670:	429a      	cmp	r2, r3
 8003672:	d009      	beq.n	8003688 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a12      	ldr	r2, [pc, #72]	; (80036c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d004      	beq.n	8003688 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a11      	ldr	r2, [pc, #68]	; (80036c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d10c      	bne.n	80036a2 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2280      	movs	r2, #128	; 0x80
 800368c:	4393      	bics	r3, r2
 800368e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	4313      	orrs	r3, r2
 8003698:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	223d      	movs	r2, #61	; 0x3d
 80036a6:	2101      	movs	r1, #1
 80036a8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	223c      	movs	r2, #60	; 0x3c
 80036ae:	2100      	movs	r1, #0
 80036b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b004      	add	sp, #16
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40012c00 	.word	0x40012c00
 80036c0:	ff0fffff 	.word	0xff0fffff
 80036c4:	40000400 	.word	0x40000400
 80036c8:	40014000 	.word	0x40014000

080036cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	223c      	movs	r2, #60	; 0x3c
 80036de:	5c9b      	ldrb	r3, [r3, r2]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80036e4:	2302      	movs	r3, #2
 80036e6:	e079      	b.n	80037dc <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	223c      	movs	r2, #60	; 0x3c
 80036ec:	2101      	movs	r1, #1
 80036ee:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	22ff      	movs	r2, #255	; 0xff
 80036f4:	4393      	bics	r3, r2
 80036f6:	001a      	movs	r2, r3
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4a38      	ldr	r2, [pc, #224]	; (80037e4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003704:	401a      	ands	r2, r3
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	4313      	orrs	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4a35      	ldr	r2, [pc, #212]	; (80037e8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003712:	401a      	ands	r2, r3
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	4313      	orrs	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4a33      	ldr	r2, [pc, #204]	; (80037ec <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003720:	401a      	ands	r2, r3
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4313      	orrs	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	4a30      	ldr	r2, [pc, #192]	; (80037f0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800372e:	401a      	ands	r2, r3
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	4313      	orrs	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4a2e      	ldr	r2, [pc, #184]	; (80037f4 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800373c:	401a      	ands	r2, r3
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	4a2b      	ldr	r2, [pc, #172]	; (80037f8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800374a:	401a      	ands	r2, r3
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003750:	4313      	orrs	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4a29      	ldr	r2, [pc, #164]	; (80037fc <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003758:	401a      	ands	r2, r3
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	041b      	lsls	r3, r3, #16
 8003760:	4313      	orrs	r3, r2
 8003762:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a25      	ldr	r2, [pc, #148]	; (8003800 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d106      	bne.n	800377c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4a24      	ldr	r2, [pc, #144]	; (8003804 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8003772:	401a      	ands	r2, r3
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	4313      	orrs	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a1f      	ldr	r2, [pc, #124]	; (8003800 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d121      	bne.n	80037ca <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	4a1f      	ldr	r2, [pc, #124]	; (8003808 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800378a:	401a      	ands	r2, r3
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003790:	051b      	lsls	r3, r3, #20
 8003792:	4313      	orrs	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4a1c      	ldr	r2, [pc, #112]	; (800380c <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800379a:	401a      	ands	r2, r3
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4a1a      	ldr	r2, [pc, #104]	; (8003810 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80037a8:	401a      	ands	r2, r3
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a12      	ldr	r2, [pc, #72]	; (8003800 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d106      	bne.n	80037ca <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4a15      	ldr	r2, [pc, #84]	; (8003814 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80037c0:	401a      	ands	r2, r3
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	223c      	movs	r2, #60	; 0x3c
 80037d6:	2100      	movs	r1, #0
 80037d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	0018      	movs	r0, r3
 80037de:	46bd      	mov	sp, r7
 80037e0:	b004      	add	sp, #16
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	fffffcff 	.word	0xfffffcff
 80037e8:	fffffbff 	.word	0xfffffbff
 80037ec:	fffff7ff 	.word	0xfffff7ff
 80037f0:	ffffefff 	.word	0xffffefff
 80037f4:	ffffdfff 	.word	0xffffdfff
 80037f8:	ffffbfff 	.word	0xffffbfff
 80037fc:	fff0ffff 	.word	0xfff0ffff
 8003800:	40012c00 	.word	0x40012c00
 8003804:	efffffff 	.word	0xefffffff
 8003808:	ff0fffff 	.word	0xff0fffff
 800380c:	feffffff 	.word	0xfeffffff
 8003810:	fdffffff 	.word	0xfdffffff
 8003814:	dfffffff 	.word	0xdfffffff

08003818 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003820:	46c0      	nop			; (mov r8, r8)
 8003822:	46bd      	mov	sp, r7
 8003824:	b002      	add	sp, #8
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003830:	46c0      	nop			; (mov r8, r8)
 8003832:	46bd      	mov	sp, r7
 8003834:	b002      	add	sp, #8
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003840:	46c0      	nop			; (mov r8, r8)
 8003842:	46bd      	mov	sp, r7
 8003844:	b002      	add	sp, #8
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e046      	b.n	80038e8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2288      	movs	r2, #136	; 0x88
 800385e:	589b      	ldr	r3, [r3, r2]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d107      	bne.n	8003874 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2284      	movs	r2, #132	; 0x84
 8003868:	2100      	movs	r1, #0
 800386a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	0018      	movs	r0, r3
 8003870:	f7fd fb16 	bl	8000ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2288      	movs	r2, #136	; 0x88
 8003878:	2124      	movs	r1, #36	; 0x24
 800387a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2101      	movs	r1, #1
 8003888:	438a      	bics	r2, r1
 800388a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	0018      	movs	r0, r3
 8003890:	f000 f830 	bl	80038f4 <UART_SetConfig>
 8003894:	0003      	movs	r3, r0
 8003896:	2b01      	cmp	r3, #1
 8003898:	d101      	bne.n	800389e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e024      	b.n	80038e8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	0018      	movs	r0, r3
 80038aa:	f000 fae1 	bl	8003e70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	490d      	ldr	r1, [pc, #52]	; (80038f0 <HAL_UART_Init+0xa8>)
 80038ba:	400a      	ands	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	212a      	movs	r1, #42	; 0x2a
 80038ca:	438a      	bics	r2, r1
 80038cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2101      	movs	r1, #1
 80038da:	430a      	orrs	r2, r1
 80038dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	0018      	movs	r0, r3
 80038e2:	f000 fb79 	bl	8003fd8 <UART_CheckIdleState>
 80038e6:	0003      	movs	r3, r0
}
 80038e8:	0018      	movs	r0, r3
 80038ea:	46bd      	mov	sp, r7
 80038ec:	b002      	add	sp, #8
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	ffffb7ff 	.word	0xffffb7ff

080038f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038f4:	b5b0      	push	{r4, r5, r7, lr}
 80038f6:	b090      	sub	sp, #64	; 0x40
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038fc:	231a      	movs	r3, #26
 80038fe:	2220      	movs	r2, #32
 8003900:	189b      	adds	r3, r3, r2
 8003902:	19db      	adds	r3, r3, r7
 8003904:	2200      	movs	r2, #0
 8003906:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	431a      	orrs	r2, r3
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	431a      	orrs	r2, r3
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	4313      	orrs	r3, r2
 800391e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4aaf      	ldr	r2, [pc, #700]	; (8003be4 <UART_SetConfig+0x2f0>)
 8003928:	4013      	ands	r3, r2
 800392a:	0019      	movs	r1, r3
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003932:	430b      	orrs	r3, r1
 8003934:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	4aaa      	ldr	r2, [pc, #680]	; (8003be8 <UART_SetConfig+0x2f4>)
 800393e:	4013      	ands	r3, r2
 8003940:	0018      	movs	r0, r3
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	68d9      	ldr	r1, [r3, #12]
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	0003      	movs	r3, r0
 800394c:	430b      	orrs	r3, r1
 800394e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4aa4      	ldr	r2, [pc, #656]	; (8003bec <UART_SetConfig+0x2f8>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d004      	beq.n	800396a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003966:	4313      	orrs	r3, r2
 8003968:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	4a9f      	ldr	r2, [pc, #636]	; (8003bf0 <UART_SetConfig+0x2fc>)
 8003972:	4013      	ands	r3, r2
 8003974:	0019      	movs	r1, r3
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800397c:	430b      	orrs	r3, r1
 800397e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003986:	220f      	movs	r2, #15
 8003988:	4393      	bics	r3, r2
 800398a:	0018      	movs	r0, r3
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	0003      	movs	r3, r0
 8003996:	430b      	orrs	r3, r1
 8003998:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a95      	ldr	r2, [pc, #596]	; (8003bf4 <UART_SetConfig+0x300>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d131      	bne.n	8003a08 <UART_SetConfig+0x114>
 80039a4:	4b94      	ldr	r3, [pc, #592]	; (8003bf8 <UART_SetConfig+0x304>)
 80039a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a8:	2203      	movs	r2, #3
 80039aa:	4013      	ands	r3, r2
 80039ac:	2b03      	cmp	r3, #3
 80039ae:	d01d      	beq.n	80039ec <UART_SetConfig+0xf8>
 80039b0:	d823      	bhi.n	80039fa <UART_SetConfig+0x106>
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d00c      	beq.n	80039d0 <UART_SetConfig+0xdc>
 80039b6:	d820      	bhi.n	80039fa <UART_SetConfig+0x106>
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <UART_SetConfig+0xce>
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d00e      	beq.n	80039de <UART_SetConfig+0xea>
 80039c0:	e01b      	b.n	80039fa <UART_SetConfig+0x106>
 80039c2:	231b      	movs	r3, #27
 80039c4:	2220      	movs	r2, #32
 80039c6:	189b      	adds	r3, r3, r2
 80039c8:	19db      	adds	r3, r3, r7
 80039ca:	2200      	movs	r2, #0
 80039cc:	701a      	strb	r2, [r3, #0]
 80039ce:	e0b4      	b.n	8003b3a <UART_SetConfig+0x246>
 80039d0:	231b      	movs	r3, #27
 80039d2:	2220      	movs	r2, #32
 80039d4:	189b      	adds	r3, r3, r2
 80039d6:	19db      	adds	r3, r3, r7
 80039d8:	2202      	movs	r2, #2
 80039da:	701a      	strb	r2, [r3, #0]
 80039dc:	e0ad      	b.n	8003b3a <UART_SetConfig+0x246>
 80039de:	231b      	movs	r3, #27
 80039e0:	2220      	movs	r2, #32
 80039e2:	189b      	adds	r3, r3, r2
 80039e4:	19db      	adds	r3, r3, r7
 80039e6:	2204      	movs	r2, #4
 80039e8:	701a      	strb	r2, [r3, #0]
 80039ea:	e0a6      	b.n	8003b3a <UART_SetConfig+0x246>
 80039ec:	231b      	movs	r3, #27
 80039ee:	2220      	movs	r2, #32
 80039f0:	189b      	adds	r3, r3, r2
 80039f2:	19db      	adds	r3, r3, r7
 80039f4:	2208      	movs	r2, #8
 80039f6:	701a      	strb	r2, [r3, #0]
 80039f8:	e09f      	b.n	8003b3a <UART_SetConfig+0x246>
 80039fa:	231b      	movs	r3, #27
 80039fc:	2220      	movs	r2, #32
 80039fe:	189b      	adds	r3, r3, r2
 8003a00:	19db      	adds	r3, r3, r7
 8003a02:	2210      	movs	r2, #16
 8003a04:	701a      	strb	r2, [r3, #0]
 8003a06:	e098      	b.n	8003b3a <UART_SetConfig+0x246>
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a7b      	ldr	r2, [pc, #492]	; (8003bfc <UART_SetConfig+0x308>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d131      	bne.n	8003a76 <UART_SetConfig+0x182>
 8003a12:	4b79      	ldr	r3, [pc, #484]	; (8003bf8 <UART_SetConfig+0x304>)
 8003a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a16:	220c      	movs	r2, #12
 8003a18:	4013      	ands	r3, r2
 8003a1a:	2b0c      	cmp	r3, #12
 8003a1c:	d01d      	beq.n	8003a5a <UART_SetConfig+0x166>
 8003a1e:	d823      	bhi.n	8003a68 <UART_SetConfig+0x174>
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d00c      	beq.n	8003a3e <UART_SetConfig+0x14a>
 8003a24:	d820      	bhi.n	8003a68 <UART_SetConfig+0x174>
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d002      	beq.n	8003a30 <UART_SetConfig+0x13c>
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	d00e      	beq.n	8003a4c <UART_SetConfig+0x158>
 8003a2e:	e01b      	b.n	8003a68 <UART_SetConfig+0x174>
 8003a30:	231b      	movs	r3, #27
 8003a32:	2220      	movs	r2, #32
 8003a34:	189b      	adds	r3, r3, r2
 8003a36:	19db      	adds	r3, r3, r7
 8003a38:	2200      	movs	r2, #0
 8003a3a:	701a      	strb	r2, [r3, #0]
 8003a3c:	e07d      	b.n	8003b3a <UART_SetConfig+0x246>
 8003a3e:	231b      	movs	r3, #27
 8003a40:	2220      	movs	r2, #32
 8003a42:	189b      	adds	r3, r3, r2
 8003a44:	19db      	adds	r3, r3, r7
 8003a46:	2202      	movs	r2, #2
 8003a48:	701a      	strb	r2, [r3, #0]
 8003a4a:	e076      	b.n	8003b3a <UART_SetConfig+0x246>
 8003a4c:	231b      	movs	r3, #27
 8003a4e:	2220      	movs	r2, #32
 8003a50:	189b      	adds	r3, r3, r2
 8003a52:	19db      	adds	r3, r3, r7
 8003a54:	2204      	movs	r2, #4
 8003a56:	701a      	strb	r2, [r3, #0]
 8003a58:	e06f      	b.n	8003b3a <UART_SetConfig+0x246>
 8003a5a:	231b      	movs	r3, #27
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	189b      	adds	r3, r3, r2
 8003a60:	19db      	adds	r3, r3, r7
 8003a62:	2208      	movs	r2, #8
 8003a64:	701a      	strb	r2, [r3, #0]
 8003a66:	e068      	b.n	8003b3a <UART_SetConfig+0x246>
 8003a68:	231b      	movs	r3, #27
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	189b      	adds	r3, r3, r2
 8003a6e:	19db      	adds	r3, r3, r7
 8003a70:	2210      	movs	r2, #16
 8003a72:	701a      	strb	r2, [r3, #0]
 8003a74:	e061      	b.n	8003b3a <UART_SetConfig+0x246>
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a61      	ldr	r2, [pc, #388]	; (8003c00 <UART_SetConfig+0x30c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d106      	bne.n	8003a8e <UART_SetConfig+0x19a>
 8003a80:	231b      	movs	r3, #27
 8003a82:	2220      	movs	r2, #32
 8003a84:	189b      	adds	r3, r3, r2
 8003a86:	19db      	adds	r3, r3, r7
 8003a88:	2200      	movs	r2, #0
 8003a8a:	701a      	strb	r2, [r3, #0]
 8003a8c:	e055      	b.n	8003b3a <UART_SetConfig+0x246>
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a5c      	ldr	r2, [pc, #368]	; (8003c04 <UART_SetConfig+0x310>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d106      	bne.n	8003aa6 <UART_SetConfig+0x1b2>
 8003a98:	231b      	movs	r3, #27
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	189b      	adds	r3, r3, r2
 8003a9e:	19db      	adds	r3, r3, r7
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	701a      	strb	r2, [r3, #0]
 8003aa4:	e049      	b.n	8003b3a <UART_SetConfig+0x246>
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a50      	ldr	r2, [pc, #320]	; (8003bec <UART_SetConfig+0x2f8>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d13e      	bne.n	8003b2e <UART_SetConfig+0x23a>
 8003ab0:	4b51      	ldr	r3, [pc, #324]	; (8003bf8 <UART_SetConfig+0x304>)
 8003ab2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ab4:	23c0      	movs	r3, #192	; 0xc0
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	4013      	ands	r3, r2
 8003aba:	22c0      	movs	r2, #192	; 0xc0
 8003abc:	0112      	lsls	r2, r2, #4
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d027      	beq.n	8003b12 <UART_SetConfig+0x21e>
 8003ac2:	22c0      	movs	r2, #192	; 0xc0
 8003ac4:	0112      	lsls	r2, r2, #4
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d82a      	bhi.n	8003b20 <UART_SetConfig+0x22c>
 8003aca:	2280      	movs	r2, #128	; 0x80
 8003acc:	0112      	lsls	r2, r2, #4
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d011      	beq.n	8003af6 <UART_SetConfig+0x202>
 8003ad2:	2280      	movs	r2, #128	; 0x80
 8003ad4:	0112      	lsls	r2, r2, #4
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d822      	bhi.n	8003b20 <UART_SetConfig+0x22c>
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d004      	beq.n	8003ae8 <UART_SetConfig+0x1f4>
 8003ade:	2280      	movs	r2, #128	; 0x80
 8003ae0:	00d2      	lsls	r2, r2, #3
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00e      	beq.n	8003b04 <UART_SetConfig+0x210>
 8003ae6:	e01b      	b.n	8003b20 <UART_SetConfig+0x22c>
 8003ae8:	231b      	movs	r3, #27
 8003aea:	2220      	movs	r2, #32
 8003aec:	189b      	adds	r3, r3, r2
 8003aee:	19db      	adds	r3, r3, r7
 8003af0:	2200      	movs	r2, #0
 8003af2:	701a      	strb	r2, [r3, #0]
 8003af4:	e021      	b.n	8003b3a <UART_SetConfig+0x246>
 8003af6:	231b      	movs	r3, #27
 8003af8:	2220      	movs	r2, #32
 8003afa:	189b      	adds	r3, r3, r2
 8003afc:	19db      	adds	r3, r3, r7
 8003afe:	2202      	movs	r2, #2
 8003b00:	701a      	strb	r2, [r3, #0]
 8003b02:	e01a      	b.n	8003b3a <UART_SetConfig+0x246>
 8003b04:	231b      	movs	r3, #27
 8003b06:	2220      	movs	r2, #32
 8003b08:	189b      	adds	r3, r3, r2
 8003b0a:	19db      	adds	r3, r3, r7
 8003b0c:	2204      	movs	r2, #4
 8003b0e:	701a      	strb	r2, [r3, #0]
 8003b10:	e013      	b.n	8003b3a <UART_SetConfig+0x246>
 8003b12:	231b      	movs	r3, #27
 8003b14:	2220      	movs	r2, #32
 8003b16:	189b      	adds	r3, r3, r2
 8003b18:	19db      	adds	r3, r3, r7
 8003b1a:	2208      	movs	r2, #8
 8003b1c:	701a      	strb	r2, [r3, #0]
 8003b1e:	e00c      	b.n	8003b3a <UART_SetConfig+0x246>
 8003b20:	231b      	movs	r3, #27
 8003b22:	2220      	movs	r2, #32
 8003b24:	189b      	adds	r3, r3, r2
 8003b26:	19db      	adds	r3, r3, r7
 8003b28:	2210      	movs	r2, #16
 8003b2a:	701a      	strb	r2, [r3, #0]
 8003b2c:	e005      	b.n	8003b3a <UART_SetConfig+0x246>
 8003b2e:	231b      	movs	r3, #27
 8003b30:	2220      	movs	r2, #32
 8003b32:	189b      	adds	r3, r3, r2
 8003b34:	19db      	adds	r3, r3, r7
 8003b36:	2210      	movs	r2, #16
 8003b38:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a2b      	ldr	r2, [pc, #172]	; (8003bec <UART_SetConfig+0x2f8>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d000      	beq.n	8003b46 <UART_SetConfig+0x252>
 8003b44:	e0a9      	b.n	8003c9a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b46:	231b      	movs	r3, #27
 8003b48:	2220      	movs	r2, #32
 8003b4a:	189b      	adds	r3, r3, r2
 8003b4c:	19db      	adds	r3, r3, r7
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d015      	beq.n	8003b80 <UART_SetConfig+0x28c>
 8003b54:	dc18      	bgt.n	8003b88 <UART_SetConfig+0x294>
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	d00d      	beq.n	8003b76 <UART_SetConfig+0x282>
 8003b5a:	dc15      	bgt.n	8003b88 <UART_SetConfig+0x294>
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d002      	beq.n	8003b66 <UART_SetConfig+0x272>
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d005      	beq.n	8003b70 <UART_SetConfig+0x27c>
 8003b64:	e010      	b.n	8003b88 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b66:	f7fe fa4b 	bl	8002000 <HAL_RCC_GetPCLK1Freq>
 8003b6a:	0003      	movs	r3, r0
 8003b6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b6e:	e014      	b.n	8003b9a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b70:	4b25      	ldr	r3, [pc, #148]	; (8003c08 <UART_SetConfig+0x314>)
 8003b72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b74:	e011      	b.n	8003b9a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b76:	f7fe f9b7 	bl	8001ee8 <HAL_RCC_GetSysClockFreq>
 8003b7a:	0003      	movs	r3, r0
 8003b7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b7e:	e00c      	b.n	8003b9a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b80:	2380      	movs	r3, #128	; 0x80
 8003b82:	021b      	lsls	r3, r3, #8
 8003b84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b86:	e008      	b.n	8003b9a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003b8c:	231a      	movs	r3, #26
 8003b8e:	2220      	movs	r2, #32
 8003b90:	189b      	adds	r3, r3, r2
 8003b92:	19db      	adds	r3, r3, r7
 8003b94:	2201      	movs	r2, #1
 8003b96:	701a      	strb	r2, [r3, #0]
        break;
 8003b98:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d100      	bne.n	8003ba2 <UART_SetConfig+0x2ae>
 8003ba0:	e14b      	b.n	8003e3a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ba6:	4b19      	ldr	r3, [pc, #100]	; (8003c0c <UART_SetConfig+0x318>)
 8003ba8:	0052      	lsls	r2, r2, #1
 8003baa:	5ad3      	ldrh	r3, [r2, r3]
 8003bac:	0019      	movs	r1, r3
 8003bae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003bb0:	f7fc faa8 	bl	8000104 <__udivsi3>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	0013      	movs	r3, r2
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	189b      	adds	r3, r3, r2
 8003bc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d305      	bcc.n	8003bd4 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003bce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d91d      	bls.n	8003c10 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003bd4:	231a      	movs	r3, #26
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	189b      	adds	r3, r3, r2
 8003bda:	19db      	adds	r3, r3, r7
 8003bdc:	2201      	movs	r2, #1
 8003bde:	701a      	strb	r2, [r3, #0]
 8003be0:	e12b      	b.n	8003e3a <UART_SetConfig+0x546>
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	cfff69f3 	.word	0xcfff69f3
 8003be8:	ffffcfff 	.word	0xffffcfff
 8003bec:	40008000 	.word	0x40008000
 8003bf0:	11fff4ff 	.word	0x11fff4ff
 8003bf4:	40013800 	.word	0x40013800
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	40004400 	.word	0x40004400
 8003c00:	40004800 	.word	0x40004800
 8003c04:	40004c00 	.word	0x40004c00
 8003c08:	00f42400 	.word	0x00f42400
 8003c0c:	0800455c 	.word	0x0800455c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c12:	61bb      	str	r3, [r7, #24]
 8003c14:	2300      	movs	r3, #0
 8003c16:	61fb      	str	r3, [r7, #28]
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c1c:	4b92      	ldr	r3, [pc, #584]	; (8003e68 <UART_SetConfig+0x574>)
 8003c1e:	0052      	lsls	r2, r2, #1
 8003c20:	5ad3      	ldrh	r3, [r2, r3]
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	2300      	movs	r3, #0
 8003c26:	617b      	str	r3, [r7, #20]
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	69b8      	ldr	r0, [r7, #24]
 8003c2e:	69f9      	ldr	r1, [r7, #28]
 8003c30:	f7fc fbde 	bl	80003f0 <__aeabi_uldivmod>
 8003c34:	0002      	movs	r2, r0
 8003c36:	000b      	movs	r3, r1
 8003c38:	0e11      	lsrs	r1, r2, #24
 8003c3a:	021d      	lsls	r5, r3, #8
 8003c3c:	430d      	orrs	r5, r1
 8003c3e:	0214      	lsls	r4, r2, #8
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	085b      	lsrs	r3, r3, #1
 8003c46:	60bb      	str	r3, [r7, #8]
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60fb      	str	r3, [r7, #12]
 8003c4c:	68b8      	ldr	r0, [r7, #8]
 8003c4e:	68f9      	ldr	r1, [r7, #12]
 8003c50:	1900      	adds	r0, r0, r4
 8003c52:	4169      	adcs	r1, r5
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	603b      	str	r3, [r7, #0]
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	607b      	str	r3, [r7, #4]
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f7fc fbc5 	bl	80003f0 <__aeabi_uldivmod>
 8003c66:	0002      	movs	r2, r0
 8003c68:	000b      	movs	r3, r1
 8003c6a:	0013      	movs	r3, r2
 8003c6c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c70:	23c0      	movs	r3, #192	; 0xc0
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d309      	bcc.n	8003c8c <UART_SetConfig+0x398>
 8003c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c7a:	2380      	movs	r3, #128	; 0x80
 8003c7c:	035b      	lsls	r3, r3, #13
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d204      	bcs.n	8003c8c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c88:	60da      	str	r2, [r3, #12]
 8003c8a:	e0d6      	b.n	8003e3a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003c8c:	231a      	movs	r3, #26
 8003c8e:	2220      	movs	r2, #32
 8003c90:	189b      	adds	r3, r3, r2
 8003c92:	19db      	adds	r3, r3, r7
 8003c94:	2201      	movs	r2, #1
 8003c96:	701a      	strb	r2, [r3, #0]
 8003c98:	e0cf      	b.n	8003e3a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	69da      	ldr	r2, [r3, #28]
 8003c9e:	2380      	movs	r3, #128	; 0x80
 8003ca0:	021b      	lsls	r3, r3, #8
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d000      	beq.n	8003ca8 <UART_SetConfig+0x3b4>
 8003ca6:	e070      	b.n	8003d8a <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8003ca8:	231b      	movs	r3, #27
 8003caa:	2220      	movs	r2, #32
 8003cac:	189b      	adds	r3, r3, r2
 8003cae:	19db      	adds	r3, r3, r7
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2b08      	cmp	r3, #8
 8003cb4:	d015      	beq.n	8003ce2 <UART_SetConfig+0x3ee>
 8003cb6:	dc18      	bgt.n	8003cea <UART_SetConfig+0x3f6>
 8003cb8:	2b04      	cmp	r3, #4
 8003cba:	d00d      	beq.n	8003cd8 <UART_SetConfig+0x3e4>
 8003cbc:	dc15      	bgt.n	8003cea <UART_SetConfig+0x3f6>
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d002      	beq.n	8003cc8 <UART_SetConfig+0x3d4>
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d005      	beq.n	8003cd2 <UART_SetConfig+0x3de>
 8003cc6:	e010      	b.n	8003cea <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cc8:	f7fe f99a 	bl	8002000 <HAL_RCC_GetPCLK1Freq>
 8003ccc:	0003      	movs	r3, r0
 8003cce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003cd0:	e014      	b.n	8003cfc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cd2:	4b66      	ldr	r3, [pc, #408]	; (8003e6c <UART_SetConfig+0x578>)
 8003cd4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003cd6:	e011      	b.n	8003cfc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cd8:	f7fe f906 	bl	8001ee8 <HAL_RCC_GetSysClockFreq>
 8003cdc:	0003      	movs	r3, r0
 8003cde:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ce0:	e00c      	b.n	8003cfc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ce2:	2380      	movs	r3, #128	; 0x80
 8003ce4:	021b      	lsls	r3, r3, #8
 8003ce6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ce8:	e008      	b.n	8003cfc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003cee:	231a      	movs	r3, #26
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	189b      	adds	r3, r3, r2
 8003cf4:	19db      	adds	r3, r3, r7
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	701a      	strb	r2, [r3, #0]
        break;
 8003cfa:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d100      	bne.n	8003d04 <UART_SetConfig+0x410>
 8003d02:	e09a      	b.n	8003e3a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d08:	4b57      	ldr	r3, [pc, #348]	; (8003e68 <UART_SetConfig+0x574>)
 8003d0a:	0052      	lsls	r2, r2, #1
 8003d0c:	5ad3      	ldrh	r3, [r2, r3]
 8003d0e:	0019      	movs	r1, r3
 8003d10:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003d12:	f7fc f9f7 	bl	8000104 <__udivsi3>
 8003d16:	0003      	movs	r3, r0
 8003d18:	005a      	lsls	r2, r3, #1
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	085b      	lsrs	r3, r3, #1
 8003d20:	18d2      	adds	r2, r2, r3
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	0019      	movs	r1, r3
 8003d28:	0010      	movs	r0, r2
 8003d2a:	f7fc f9eb 	bl	8000104 <__udivsi3>
 8003d2e:	0003      	movs	r3, r0
 8003d30:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d34:	2b0f      	cmp	r3, #15
 8003d36:	d921      	bls.n	8003d7c <UART_SetConfig+0x488>
 8003d38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d3a:	2380      	movs	r3, #128	; 0x80
 8003d3c:	025b      	lsls	r3, r3, #9
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d21c      	bcs.n	8003d7c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	200e      	movs	r0, #14
 8003d48:	2420      	movs	r4, #32
 8003d4a:	1903      	adds	r3, r0, r4
 8003d4c:	19db      	adds	r3, r3, r7
 8003d4e:	210f      	movs	r1, #15
 8003d50:	438a      	bics	r2, r1
 8003d52:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d56:	085b      	lsrs	r3, r3, #1
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2207      	movs	r2, #7
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	b299      	uxth	r1, r3
 8003d60:	1903      	adds	r3, r0, r4
 8003d62:	19db      	adds	r3, r3, r7
 8003d64:	1902      	adds	r2, r0, r4
 8003d66:	19d2      	adds	r2, r2, r7
 8003d68:	8812      	ldrh	r2, [r2, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	1902      	adds	r2, r0, r4
 8003d74:	19d2      	adds	r2, r2, r7
 8003d76:	8812      	ldrh	r2, [r2, #0]
 8003d78:	60da      	str	r2, [r3, #12]
 8003d7a:	e05e      	b.n	8003e3a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003d7c:	231a      	movs	r3, #26
 8003d7e:	2220      	movs	r2, #32
 8003d80:	189b      	adds	r3, r3, r2
 8003d82:	19db      	adds	r3, r3, r7
 8003d84:	2201      	movs	r2, #1
 8003d86:	701a      	strb	r2, [r3, #0]
 8003d88:	e057      	b.n	8003e3a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d8a:	231b      	movs	r3, #27
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	189b      	adds	r3, r3, r2
 8003d90:	19db      	adds	r3, r3, r7
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d015      	beq.n	8003dc4 <UART_SetConfig+0x4d0>
 8003d98:	dc18      	bgt.n	8003dcc <UART_SetConfig+0x4d8>
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d00d      	beq.n	8003dba <UART_SetConfig+0x4c6>
 8003d9e:	dc15      	bgt.n	8003dcc <UART_SetConfig+0x4d8>
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <UART_SetConfig+0x4b6>
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d005      	beq.n	8003db4 <UART_SetConfig+0x4c0>
 8003da8:	e010      	b.n	8003dcc <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003daa:	f7fe f929 	bl	8002000 <HAL_RCC_GetPCLK1Freq>
 8003dae:	0003      	movs	r3, r0
 8003db0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003db2:	e014      	b.n	8003dde <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003db4:	4b2d      	ldr	r3, [pc, #180]	; (8003e6c <UART_SetConfig+0x578>)
 8003db6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003db8:	e011      	b.n	8003dde <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dba:	f7fe f895 	bl	8001ee8 <HAL_RCC_GetSysClockFreq>
 8003dbe:	0003      	movs	r3, r0
 8003dc0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003dc2:	e00c      	b.n	8003dde <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dc4:	2380      	movs	r3, #128	; 0x80
 8003dc6:	021b      	lsls	r3, r3, #8
 8003dc8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003dca:	e008      	b.n	8003dde <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003dd0:	231a      	movs	r3, #26
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	189b      	adds	r3, r3, r2
 8003dd6:	19db      	adds	r3, r3, r7
 8003dd8:	2201      	movs	r2, #1
 8003dda:	701a      	strb	r2, [r3, #0]
        break;
 8003ddc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d02a      	beq.n	8003e3a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003de8:	4b1f      	ldr	r3, [pc, #124]	; (8003e68 <UART_SetConfig+0x574>)
 8003dea:	0052      	lsls	r2, r2, #1
 8003dec:	5ad3      	ldrh	r3, [r2, r3]
 8003dee:	0019      	movs	r1, r3
 8003df0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003df2:	f7fc f987 	bl	8000104 <__udivsi3>
 8003df6:	0003      	movs	r3, r0
 8003df8:	001a      	movs	r2, r3
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	085b      	lsrs	r3, r3, #1
 8003e00:	18d2      	adds	r2, r2, r3
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	0019      	movs	r1, r3
 8003e08:	0010      	movs	r0, r2
 8003e0a:	f7fc f97b 	bl	8000104 <__udivsi3>
 8003e0e:	0003      	movs	r3, r0
 8003e10:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e14:	2b0f      	cmp	r3, #15
 8003e16:	d90a      	bls.n	8003e2e <UART_SetConfig+0x53a>
 8003e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e1a:	2380      	movs	r3, #128	; 0x80
 8003e1c:	025b      	lsls	r3, r3, #9
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d205      	bcs.n	8003e2e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	60da      	str	r2, [r3, #12]
 8003e2c:	e005      	b.n	8003e3a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003e2e:	231a      	movs	r3, #26
 8003e30:	2220      	movs	r2, #32
 8003e32:	189b      	adds	r3, r3, r2
 8003e34:	19db      	adds	r3, r3, r7
 8003e36:	2201      	movs	r2, #1
 8003e38:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	226a      	movs	r2, #106	; 0x6a
 8003e3e:	2101      	movs	r1, #1
 8003e40:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	2268      	movs	r2, #104	; 0x68
 8003e46:	2101      	movs	r1, #1
 8003e48:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	2200      	movs	r2, #0
 8003e54:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003e56:	231a      	movs	r3, #26
 8003e58:	2220      	movs	r2, #32
 8003e5a:	189b      	adds	r3, r3, r2
 8003e5c:	19db      	adds	r3, r3, r7
 8003e5e:	781b      	ldrb	r3, [r3, #0]
}
 8003e60:	0018      	movs	r0, r3
 8003e62:	46bd      	mov	sp, r7
 8003e64:	b010      	add	sp, #64	; 0x40
 8003e66:	bdb0      	pop	{r4, r5, r7, pc}
 8003e68:	0800455c 	.word	0x0800455c
 8003e6c:	00f42400 	.word	0x00f42400

08003e70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	4013      	ands	r3, r2
 8003e80:	d00b      	beq.n	8003e9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	4a4a      	ldr	r2, [pc, #296]	; (8003fb4 <UART_AdvFeatureConfig+0x144>)
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	0019      	movs	r1, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	d00b      	beq.n	8003ebc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	4a43      	ldr	r2, [pc, #268]	; (8003fb8 <UART_AdvFeatureConfig+0x148>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	0019      	movs	r1, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec0:	2204      	movs	r2, #4
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	d00b      	beq.n	8003ede <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	4a3b      	ldr	r2, [pc, #236]	; (8003fbc <UART_AdvFeatureConfig+0x14c>)
 8003ece:	4013      	ands	r3, r2
 8003ed0:	0019      	movs	r1, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee2:	2208      	movs	r2, #8
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	d00b      	beq.n	8003f00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	4a34      	ldr	r2, [pc, #208]	; (8003fc0 <UART_AdvFeatureConfig+0x150>)
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	0019      	movs	r1, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f04:	2210      	movs	r2, #16
 8003f06:	4013      	ands	r3, r2
 8003f08:	d00b      	beq.n	8003f22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	4a2c      	ldr	r2, [pc, #176]	; (8003fc4 <UART_AdvFeatureConfig+0x154>)
 8003f12:	4013      	ands	r3, r2
 8003f14:	0019      	movs	r1, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f26:	2220      	movs	r2, #32
 8003f28:	4013      	ands	r3, r2
 8003f2a:	d00b      	beq.n	8003f44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	4a25      	ldr	r2, [pc, #148]	; (8003fc8 <UART_AdvFeatureConfig+0x158>)
 8003f34:	4013      	ands	r3, r2
 8003f36:	0019      	movs	r1, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f48:	2240      	movs	r2, #64	; 0x40
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	d01d      	beq.n	8003f8a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	4a1d      	ldr	r2, [pc, #116]	; (8003fcc <UART_AdvFeatureConfig+0x15c>)
 8003f56:	4013      	ands	r3, r2
 8003f58:	0019      	movs	r1, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f6a:	2380      	movs	r3, #128	; 0x80
 8003f6c:	035b      	lsls	r3, r3, #13
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d10b      	bne.n	8003f8a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	4a15      	ldr	r2, [pc, #84]	; (8003fd0 <UART_AdvFeatureConfig+0x160>)
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	0019      	movs	r1, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	2280      	movs	r2, #128	; 0x80
 8003f90:	4013      	ands	r3, r2
 8003f92:	d00b      	beq.n	8003fac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	4a0e      	ldr	r2, [pc, #56]	; (8003fd4 <UART_AdvFeatureConfig+0x164>)
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	0019      	movs	r1, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	605a      	str	r2, [r3, #4]
  }
}
 8003fac:	46c0      	nop			; (mov r8, r8)
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	b002      	add	sp, #8
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	fffdffff 	.word	0xfffdffff
 8003fb8:	fffeffff 	.word	0xfffeffff
 8003fbc:	fffbffff 	.word	0xfffbffff
 8003fc0:	ffff7fff 	.word	0xffff7fff
 8003fc4:	ffffefff 	.word	0xffffefff
 8003fc8:	ffffdfff 	.word	0xffffdfff
 8003fcc:	ffefffff 	.word	0xffefffff
 8003fd0:	ff9fffff 	.word	0xff9fffff
 8003fd4:	fff7ffff 	.word	0xfff7ffff

08003fd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af02      	add	r7, sp, #8
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2290      	movs	r2, #144	; 0x90
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fe8:	f7fd f88a 	bl	8001100 <HAL_GetTick>
 8003fec:	0003      	movs	r3, r0
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2208      	movs	r2, #8
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	2b08      	cmp	r3, #8
 8003ffc:	d10c      	bne.n	8004018 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2280      	movs	r2, #128	; 0x80
 8004002:	0391      	lsls	r1, r2, #14
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	4a1a      	ldr	r2, [pc, #104]	; (8004070 <UART_CheckIdleState+0x98>)
 8004008:	9200      	str	r2, [sp, #0]
 800400a:	2200      	movs	r2, #0
 800400c:	f000 f832 	bl	8004074 <UART_WaitOnFlagUntilTimeout>
 8004010:	1e03      	subs	r3, r0, #0
 8004012:	d001      	beq.n	8004018 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e026      	b.n	8004066 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2204      	movs	r2, #4
 8004020:	4013      	ands	r3, r2
 8004022:	2b04      	cmp	r3, #4
 8004024:	d10c      	bne.n	8004040 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2280      	movs	r2, #128	; 0x80
 800402a:	03d1      	lsls	r1, r2, #15
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	4a10      	ldr	r2, [pc, #64]	; (8004070 <UART_CheckIdleState+0x98>)
 8004030:	9200      	str	r2, [sp, #0]
 8004032:	2200      	movs	r2, #0
 8004034:	f000 f81e 	bl	8004074 <UART_WaitOnFlagUntilTimeout>
 8004038:	1e03      	subs	r3, r0, #0
 800403a:	d001      	beq.n	8004040 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e012      	b.n	8004066 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2288      	movs	r2, #136	; 0x88
 8004044:	2120      	movs	r1, #32
 8004046:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	228c      	movs	r2, #140	; 0x8c
 800404c:	2120      	movs	r1, #32
 800404e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2284      	movs	r2, #132	; 0x84
 8004060:	2100      	movs	r1, #0
 8004062:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	0018      	movs	r0, r3
 8004068:	46bd      	mov	sp, r7
 800406a:	b004      	add	sp, #16
 800406c:	bd80      	pop	{r7, pc}
 800406e:	46c0      	nop			; (mov r8, r8)
 8004070:	01ffffff 	.word	0x01ffffff

08004074 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b094      	sub	sp, #80	; 0x50
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	603b      	str	r3, [r7, #0]
 8004080:	1dfb      	adds	r3, r7, #7
 8004082:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004084:	e0a7      	b.n	80041d6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004086:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004088:	3301      	adds	r3, #1
 800408a:	d100      	bne.n	800408e <UART_WaitOnFlagUntilTimeout+0x1a>
 800408c:	e0a3      	b.n	80041d6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800408e:	f7fd f837 	bl	8001100 <HAL_GetTick>
 8004092:	0002      	movs	r2, r0
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800409a:	429a      	cmp	r2, r3
 800409c:	d302      	bcc.n	80040a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800409e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d13f      	bne.n	8004124 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040a4:	f3ef 8310 	mrs	r3, PRIMASK
 80040a8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80040aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80040ac:	647b      	str	r3, [r7, #68]	; 0x44
 80040ae:	2301      	movs	r3, #1
 80040b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b4:	f383 8810 	msr	PRIMASK, r3
}
 80040b8:	46c0      	nop			; (mov r8, r8)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	494e      	ldr	r1, [pc, #312]	; (8004200 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80040c6:	400a      	ands	r2, r1
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040cc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d0:	f383 8810 	msr	PRIMASK, r3
}
 80040d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040d6:	f3ef 8310 	mrs	r3, PRIMASK
 80040da:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80040dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040de:	643b      	str	r3, [r7, #64]	; 0x40
 80040e0:	2301      	movs	r3, #1
 80040e2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e6:	f383 8810 	msr	PRIMASK, r3
}
 80040ea:	46c0      	nop			; (mov r8, r8)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2101      	movs	r1, #1
 80040f8:	438a      	bics	r2, r1
 80040fa:	609a      	str	r2, [r3, #8]
 80040fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004102:	f383 8810 	msr	PRIMASK, r3
}
 8004106:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2288      	movs	r2, #136	; 0x88
 800410c:	2120      	movs	r1, #32
 800410e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	228c      	movs	r2, #140	; 0x8c
 8004114:	2120      	movs	r1, #32
 8004116:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2284      	movs	r2, #132	; 0x84
 800411c:	2100      	movs	r1, #0
 800411e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e069      	b.n	80041f8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2204      	movs	r2, #4
 800412c:	4013      	ands	r3, r2
 800412e:	d052      	beq.n	80041d6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	69da      	ldr	r2, [r3, #28]
 8004136:	2380      	movs	r3, #128	; 0x80
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	401a      	ands	r2, r3
 800413c:	2380      	movs	r3, #128	; 0x80
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	429a      	cmp	r2, r3
 8004142:	d148      	bne.n	80041d6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2280      	movs	r2, #128	; 0x80
 800414a:	0112      	lsls	r2, r2, #4
 800414c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800414e:	f3ef 8310 	mrs	r3, PRIMASK
 8004152:	613b      	str	r3, [r7, #16]
  return(result);
 8004154:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004156:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004158:	2301      	movs	r3, #1
 800415a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f383 8810 	msr	PRIMASK, r3
}
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4924      	ldr	r1, [pc, #144]	; (8004200 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004170:	400a      	ands	r2, r1
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004176:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	f383 8810 	msr	PRIMASK, r3
}
 800417e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004180:	f3ef 8310 	mrs	r3, PRIMASK
 8004184:	61fb      	str	r3, [r7, #28]
  return(result);
 8004186:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004188:	64bb      	str	r3, [r7, #72]	; 0x48
 800418a:	2301      	movs	r3, #1
 800418c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800418e:	6a3b      	ldr	r3, [r7, #32]
 8004190:	f383 8810 	msr	PRIMASK, r3
}
 8004194:	46c0      	nop			; (mov r8, r8)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2101      	movs	r1, #1
 80041a2:	438a      	bics	r2, r1
 80041a4:	609a      	str	r2, [r3, #8]
 80041a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041a8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	f383 8810 	msr	PRIMASK, r3
}
 80041b0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2288      	movs	r2, #136	; 0x88
 80041b6:	2120      	movs	r1, #32
 80041b8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	228c      	movs	r2, #140	; 0x8c
 80041be:	2120      	movs	r1, #32
 80041c0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2290      	movs	r2, #144	; 0x90
 80041c6:	2120      	movs	r1, #32
 80041c8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2284      	movs	r2, #132	; 0x84
 80041ce:	2100      	movs	r1, #0
 80041d0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e010      	b.n	80041f8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	69db      	ldr	r3, [r3, #28]
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	4013      	ands	r3, r2
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	425a      	negs	r2, r3
 80041e6:	4153      	adcs	r3, r2
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	001a      	movs	r2, r3
 80041ec:	1dfb      	adds	r3, r7, #7
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d100      	bne.n	80041f6 <UART_WaitOnFlagUntilTimeout+0x182>
 80041f4:	e747      	b.n	8004086 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	0018      	movs	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	b014      	add	sp, #80	; 0x50
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	fffffe5f 	.word	0xfffffe5f

08004204 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2284      	movs	r2, #132	; 0x84
 8004210:	5c9b      	ldrb	r3, [r3, r2]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d101      	bne.n	800421a <HAL_UARTEx_DisableFifoMode+0x16>
 8004216:	2302      	movs	r3, #2
 8004218:	e027      	b.n	800426a <HAL_UARTEx_DisableFifoMode+0x66>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2284      	movs	r2, #132	; 0x84
 800421e:	2101      	movs	r1, #1
 8004220:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2288      	movs	r2, #136	; 0x88
 8004226:	2124      	movs	r1, #36	; 0x24
 8004228:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2101      	movs	r1, #1
 800423e:	438a      	bics	r2, r1
 8004240:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	4a0b      	ldr	r2, [pc, #44]	; (8004274 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004246:	4013      	ands	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2288      	movs	r2, #136	; 0x88
 800425c:	2120      	movs	r1, #32
 800425e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2284      	movs	r2, #132	; 0x84
 8004264:	2100      	movs	r1, #0
 8004266:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	0018      	movs	r0, r3
 800426c:	46bd      	mov	sp, r7
 800426e:	b004      	add	sp, #16
 8004270:	bd80      	pop	{r7, pc}
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	dfffffff 	.word	0xdfffffff

08004278 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2284      	movs	r2, #132	; 0x84
 8004286:	5c9b      	ldrb	r3, [r3, r2]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d101      	bne.n	8004290 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800428c:	2302      	movs	r3, #2
 800428e:	e02e      	b.n	80042ee <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2284      	movs	r2, #132	; 0x84
 8004294:	2101      	movs	r1, #1
 8004296:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2288      	movs	r2, #136	; 0x88
 800429c:	2124      	movs	r1, #36	; 0x24
 800429e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2101      	movs	r1, #1
 80042b4:	438a      	bics	r2, r1
 80042b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	08d9      	lsrs	r1, r3, #3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	0018      	movs	r0, r3
 80042d0:	f000 f854 	bl	800437c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2288      	movs	r2, #136	; 0x88
 80042e0:	2120      	movs	r1, #32
 80042e2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2284      	movs	r2, #132	; 0x84
 80042e8:	2100      	movs	r1, #0
 80042ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	0018      	movs	r0, r3
 80042f0:	46bd      	mov	sp, r7
 80042f2:	b004      	add	sp, #16
 80042f4:	bd80      	pop	{r7, pc}
	...

080042f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2284      	movs	r2, #132	; 0x84
 8004306:	5c9b      	ldrb	r3, [r3, r2]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d101      	bne.n	8004310 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800430c:	2302      	movs	r3, #2
 800430e:	e02f      	b.n	8004370 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2284      	movs	r2, #132	; 0x84
 8004314:	2101      	movs	r1, #1
 8004316:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2288      	movs	r2, #136	; 0x88
 800431c:	2124      	movs	r1, #36	; 0x24
 800431e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2101      	movs	r1, #1
 8004334:	438a      	bics	r2, r1
 8004336:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	4a0e      	ldr	r2, [pc, #56]	; (8004378 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004340:	4013      	ands	r3, r2
 8004342:	0019      	movs	r1, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	0018      	movs	r0, r3
 8004352:	f000 f813 	bl	800437c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2288      	movs	r2, #136	; 0x88
 8004362:	2120      	movs	r1, #32
 8004364:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2284      	movs	r2, #132	; 0x84
 800436a:	2100      	movs	r1, #0
 800436c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	0018      	movs	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	b004      	add	sp, #16
 8004376:	bd80      	pop	{r7, pc}
 8004378:	f1ffffff 	.word	0xf1ffffff

0800437c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800437c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004388:	2b00      	cmp	r3, #0
 800438a:	d108      	bne.n	800439e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	226a      	movs	r2, #106	; 0x6a
 8004390:	2101      	movs	r1, #1
 8004392:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2268      	movs	r2, #104	; 0x68
 8004398:	2101      	movs	r1, #1
 800439a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800439c:	e043      	b.n	8004426 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800439e:	260f      	movs	r6, #15
 80043a0:	19bb      	adds	r3, r7, r6
 80043a2:	2208      	movs	r2, #8
 80043a4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80043a6:	200e      	movs	r0, #14
 80043a8:	183b      	adds	r3, r7, r0
 80043aa:	2208      	movs	r2, #8
 80043ac:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	0e5b      	lsrs	r3, r3, #25
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	240d      	movs	r4, #13
 80043ba:	193b      	adds	r3, r7, r4
 80043bc:	2107      	movs	r1, #7
 80043be:	400a      	ands	r2, r1
 80043c0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	0f5b      	lsrs	r3, r3, #29
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	250c      	movs	r5, #12
 80043ce:	197b      	adds	r3, r7, r5
 80043d0:	2107      	movs	r1, #7
 80043d2:	400a      	ands	r2, r1
 80043d4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80043d6:	183b      	adds	r3, r7, r0
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	197a      	adds	r2, r7, r5
 80043dc:	7812      	ldrb	r2, [r2, #0]
 80043de:	4914      	ldr	r1, [pc, #80]	; (8004430 <UARTEx_SetNbDataToProcess+0xb4>)
 80043e0:	5c8a      	ldrb	r2, [r1, r2]
 80043e2:	435a      	muls	r2, r3
 80043e4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80043e6:	197b      	adds	r3, r7, r5
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	4a12      	ldr	r2, [pc, #72]	; (8004434 <UARTEx_SetNbDataToProcess+0xb8>)
 80043ec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80043ee:	0019      	movs	r1, r3
 80043f0:	f7fb ff12 	bl	8000218 <__divsi3>
 80043f4:	0003      	movs	r3, r0
 80043f6:	b299      	uxth	r1, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	226a      	movs	r2, #106	; 0x6a
 80043fc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80043fe:	19bb      	adds	r3, r7, r6
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	193a      	adds	r2, r7, r4
 8004404:	7812      	ldrb	r2, [r2, #0]
 8004406:	490a      	ldr	r1, [pc, #40]	; (8004430 <UARTEx_SetNbDataToProcess+0xb4>)
 8004408:	5c8a      	ldrb	r2, [r1, r2]
 800440a:	435a      	muls	r2, r3
 800440c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800440e:	193b      	adds	r3, r7, r4
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	4a08      	ldr	r2, [pc, #32]	; (8004434 <UARTEx_SetNbDataToProcess+0xb8>)
 8004414:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004416:	0019      	movs	r1, r3
 8004418:	f7fb fefe 	bl	8000218 <__divsi3>
 800441c:	0003      	movs	r3, r0
 800441e:	b299      	uxth	r1, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2268      	movs	r2, #104	; 0x68
 8004424:	5299      	strh	r1, [r3, r2]
}
 8004426:	46c0      	nop			; (mov r8, r8)
 8004428:	46bd      	mov	sp, r7
 800442a:	b005      	add	sp, #20
 800442c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800442e:	46c0      	nop			; (mov r8, r8)
 8004430:	08004574 	.word	0x08004574
 8004434:	0800457c 	.word	0x0800457c

08004438 <__libc_init_array>:
 8004438:	b570      	push	{r4, r5, r6, lr}
 800443a:	2600      	movs	r6, #0
 800443c:	4d0c      	ldr	r5, [pc, #48]	; (8004470 <__libc_init_array+0x38>)
 800443e:	4c0d      	ldr	r4, [pc, #52]	; (8004474 <__libc_init_array+0x3c>)
 8004440:	1b64      	subs	r4, r4, r5
 8004442:	10a4      	asrs	r4, r4, #2
 8004444:	42a6      	cmp	r6, r4
 8004446:	d109      	bne.n	800445c <__libc_init_array+0x24>
 8004448:	2600      	movs	r6, #0
 800444a:	f000 f821 	bl	8004490 <_init>
 800444e:	4d0a      	ldr	r5, [pc, #40]	; (8004478 <__libc_init_array+0x40>)
 8004450:	4c0a      	ldr	r4, [pc, #40]	; (800447c <__libc_init_array+0x44>)
 8004452:	1b64      	subs	r4, r4, r5
 8004454:	10a4      	asrs	r4, r4, #2
 8004456:	42a6      	cmp	r6, r4
 8004458:	d105      	bne.n	8004466 <__libc_init_array+0x2e>
 800445a:	bd70      	pop	{r4, r5, r6, pc}
 800445c:	00b3      	lsls	r3, r6, #2
 800445e:	58eb      	ldr	r3, [r5, r3]
 8004460:	4798      	blx	r3
 8004462:	3601      	adds	r6, #1
 8004464:	e7ee      	b.n	8004444 <__libc_init_array+0xc>
 8004466:	00b3      	lsls	r3, r6, #2
 8004468:	58eb      	ldr	r3, [r5, r3]
 800446a:	4798      	blx	r3
 800446c:	3601      	adds	r6, #1
 800446e:	e7f2      	b.n	8004456 <__libc_init_array+0x1e>
 8004470:	0800458c 	.word	0x0800458c
 8004474:	0800458c 	.word	0x0800458c
 8004478:	0800458c 	.word	0x0800458c
 800447c:	08004590 	.word	0x08004590

08004480 <memset>:
 8004480:	0003      	movs	r3, r0
 8004482:	1882      	adds	r2, r0, r2
 8004484:	4293      	cmp	r3, r2
 8004486:	d100      	bne.n	800448a <memset+0xa>
 8004488:	4770      	bx	lr
 800448a:	7019      	strb	r1, [r3, #0]
 800448c:	3301      	adds	r3, #1
 800448e:	e7f9      	b.n	8004484 <memset+0x4>

08004490 <_init>:
 8004490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004492:	46c0      	nop			; (mov r8, r8)
 8004494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004496:	bc08      	pop	{r3}
 8004498:	469e      	mov	lr, r3
 800449a:	4770      	bx	lr

0800449c <_fini>:
 800449c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449e:	46c0      	nop			; (mov r8, r8)
 80044a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044a2:	bc08      	pop	{r3}
 80044a4:	469e      	mov	lr, r3
 80044a6:	4770      	bx	lr
